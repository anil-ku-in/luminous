                                   HACKING
  INTRO  
If you're looking to do something relatively trivial like adding a new language,
improving a language, or just creating a colour theme then this file is 
overkill for you; look at Doxygen instead:
http://asgaard.co.uk/code/luminous/docs/html/pages.html

If you really do want to hack the source code, get the latest SVN trunk version 
(note: unlike some projects Luminous doesn't go to extreme lengths to try to 
keep the trunk release-ready ALL the time, but things aren't committed unless
they pass all automated testing so in reality it will be release ready. But
let's say you do find something unacceptably broken, try getting the most 
recent tagged version, which should be stable)

  $ svn checkout http://luminous.googlecode.com/svn/trunk/ luminous

The pre-packaged versions are not really suitable for development as they do 
not include a few internal functions in the documentation, and more 
importantly, the development version includes a large testing suite which is 
pretty much mandatory if you plan to make any changes. But try not to upload 
the testing files onto a server anywhere, they're potentially a huge security 
(DOS) issue if they become arbitrarily invokable (a .htaccess is provided but
it's not necessarily bulletproof).

  DOCUMENTATION
The documentation is handled by Doxygen; if you run the `doxygen' command in 
the root luminous/ directory, it should output lots of HTML files to 
docs/html/ detailing the API and overall structure. But be aware that not 
everything is documented yet and a cursory inspection of the relevant source is
encouraged.

  TESTING
You'll need Python2.x, Bash and php-cli to run the tests (Windows users should 
investigate Cygwin for Bash, but I would recommend a Ubuntu virtual machine 
instead). There are a few READMEs in various parts of the tests/ directory. The
top level tests/ script called runtests is most general and useful, you should 
run
  $ python runtests --verbose --run-simple --run-regression
after every change you make to get a summary of whether you have obviously 
broken anything. The tests/regressions/ subdirectory is very useful 
(and you're essentially working blind without it); if you start triggering 
suspected regressions it will dump diff files detailing the difference between 
what Luminous expected to generate and what it now generates. Browsing these 
with an intelligent diff viewer such as Kompare (for KDE) will make it 
very easy to see what's changed. It might be that your regression isn't a 
regression at all, but a fix to a long standing minor bug, in which case, 
assuming the difference is entirely desired, the test cases will need 
updating). Look at tests/regressions/README for more info.

If you fix a bug in a language, you should add a regression test case because
if it's obscure enough to have existed for a while, it can be very easy to 
reintroduce it later and not notice (trust me).

You should also occasionally look at the fuzz tester to ensure you're not 
introducing any potentially infinite loops (which is deceptively easy to do if
you're hacking the parsing algorithm; it's easy to overlook safety checks,
especially those concerning only technically wrong source code). 
The fuzz tester just throws a lot of random data at Luminous and expects it to 
exit after a while. If it doesn't exit and has to be interrupted, it will warn 
you. Before using it, run
  $ php fuzz.php --help
  
Formatting tests exist under tests/formatters. The HTML formatter is very slow
as it involves querying the W3C validator for quite a lot of code. The raw 
formatter test is relevant if you make changes to the parser.

  CODING STANDARDS
If you write and submit a patch then it should be formatted to these rules.
Yes, there are small parts of Luminous which violate them but they will be
changed in future.

php considerations:
* Must be compatible with PHP 5.2. That means no closures, namespaces, or, er,
  goto. Sorry!
* Don't use create_function inside loops: it's a memory leak. It IS okay to use
  create_function, but it should be executed exactly once at runtime, and 
  the function body shouldn't be more than a few lines long.

php is case insensitive, but...
* $variable_name, not $variableName (this applies to object properties as well)
* ClassName not className or class_name
* function_name() for functions
* MethodName for object methods, unless it's a callback for say 
  preg_replace_callback in which case suffix it with a '_cb'
* all built-in function calls should be as they are specified on php.net, i.e.
  lower case.
  
* Functions and variables in the global scope should be `namespaced' via a 
  sensible prefix (e.g. the easyAPI uses `luminous_').
* Some people will shout at you for having multiple return statements in a 
  function. I am not one of those people. Returning as soon as possible is 
  better than having the 'real' logic nested inside 15 levels of indentation.

Formatting:
* Use plenty of whitespace and indentation when formatting array definitions,
  especially if they're multi-dimensional.
* Indentation should be two spaces, no tabs
* Braces should be in Allman style, 
  http://en.wikipedia.org/wiki/Indent_style#Allman_style_.28bsd_in_Emacs.29,
  for the reasons that it's easier to match things up visually and it's easy to 
  comment out a condition.
* Break lines at 80 characters unless there's a good reason for not doing so. 
  People often use Vim in an 80 character wide terminal. Good reasons for 
  unbroken lines include not wanting to break a regular expression definition,
  and Doxygen considerations.

* Ignore any and all of these rules if following them results in something 
  hideous.

