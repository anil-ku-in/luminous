<COMMENT>/*</COMMENT>
<COMMENT>_________________            __________________________</COMMENT>
<COMMENT>___    |__  /__(_)__   _________  __ \__  __ \__  ____/</COMMENT>
<COMMENT>__  /| |_  /__  /__ | / /  _ \_  /_/ /_  / / /_  /_    </COMMENT>
<COMMENT>_  ___ |  / _  / __ |/ //  __/  ____/_  /_/ /_  __/</COMMENT>
<COMMENT>/_/  |_/_/  /_/  _____/ \___//_/     /_____/ /_/  </COMMENT>
<COMMENT></COMMENT>
<COMMENT>* Copyright (c) 2007 Thibault Imbert</COMMENT>
<COMMENT>*</COMMENT>
<COMMENT>* This program is distributed under the terms of the MIT License as found </COMMENT>
<COMMENT>* in a file called LICENSE. If it is not present, the license</COMMENT>
<COMMENT>* is always available at http://www.opensource.org/licenses/mit-license.php.</COMMENT>
<COMMENT>*</COMMENT>
<COMMENT>* This program is distributed in the hope that it will be useful, but</COMMENT>
<COMMENT>* without any waranty; without even the implied warranty of merchantability</COMMENT>
<COMMENT>* or fitness for a particular purpose. See the MIT License for full details.</COMMENT>
<COMMENT>*/</COMMENT>

<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT> * This library lets you generate PDF files with the Adobe Flash Player 9 and 10.</DOCCOMMENT>
<DOCCOMMENT> * AlivePDF contains some code from the FPDF PHP library by Olivier Plathey (http://www.fpdf.org/)</DOCCOMMENT>
<DOCCOMMENT> * Core Team : Thibault Imbert, Mark Lynch, Alexandre Pires, Marc Hugues</DOCCOMMENT>
<DOCCOMMENT> * <DOCTAG>@version</DOCTAG> 0.1.5 current release</DOCCOMMENT>
<DOCCOMMENT> * <DOCTAG>@url</DOCTAG> http://alivepdf.bytearray.org</DOCCOMMENT>
<DOCCOMMENT> */</DOCCOMMENT>

<KEYWORD>package</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>pdf</OO>
{
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>display</OO><OPERATOR>.</OPERATOR><OO>BitmapData</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>display</OO><OPERATOR>.</OPERATOR><OO>DisplayObject</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>display</OO><OPERATOR>.</OPERATOR><OO>Shape</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>.</OPERATOR><OO>Event</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>.</OPERATOR><OO>EventDispatcher</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>.</OPERATOR><OO>IEventDispatcher</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>geom</OO><OPERATOR>.</OPERATOR><OO>Matrix</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>geom</OO><OPERATOR>.</OPERATOR><OO>Point</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>geom</OO><OPERATOR>.</OPERATOR><OO>Rectangle</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>net</OO><OPERATOR>.</OPERATOR><OO>URLRequest</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>net</OO><OPERATOR>.</OPERATOR><OO>URLRequestHeader</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>net</OO><OPERATOR>.</OPERATOR><OO>URLRequestMethod</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>net</OO><OPERATOR>.</OPERATOR><OO>navigateToURL</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>system</OO><OPERATOR>.</OPERATOR><OO>Capabilities</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>utils</OO><OPERATOR>.</OPERATOR><OO>ByteArray</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>utils</OO><OPERATOR>.</OPERATOR><OO>Dictionary</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>utils</OO><OPERATOR>.</OPERATOR><OO>Endian</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>utils</OO><OPERATOR>.</OPERATOR><OO>getTimer</OO><OPERATOR>;</OPERATOR>
	
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>cells</OO><OPERATOR>.</OPERATOR><OO>CellVO</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>colors</OO><OPERATOR>.</OPERATOR><OO>CMYKColor</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>colors</OO><OPERATOR>.</OPERATOR><OO>GrayColor</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>colors</OO><OPERATOR>.</OPERATOR><OO>IColor</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>colors</OO><OPERATOR>.</OPERATOR><OO>RGBColor</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>colors</OO><OPERATOR>.</OPERATOR><OO>SpotColor</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>.</OPERATOR><OO>Grid</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>.</OPERATOR><OO>GridColumn</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>decoding</OO><OPERATOR>.</OPERATOR><OO>Filter</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>display</OO><OPERATOR>.</OPERATOR><OO>Display</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>display</OO><OPERATOR>.</OPERATOR><OO>PageMode</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>drawing</OO><OPERATOR>.</OPERATOR><OO>DashedLine</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>drawing</OO><OPERATOR>.</OPERATOR><OO>WindingRule</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>encoding</OO><OPERATOR>.</OPERATOR><OO>Base64</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>encoding</OO><OPERATOR>.</OPERATOR><OO>JPEGEncoder</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>encoding</OO><OPERATOR>.</OPERATOR><OO>PNGEncoder</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>encoding</OO><OPERATOR>.</OPERATOR><OO>TIFFEncoder</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>.</OPERATOR><OO>PageEvent</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>.</OPERATOR><OO>ProcessingEvent</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>fonts</OO><OPERATOR>.</OPERATOR><OO>CoreFont</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>fonts</OO><OPERATOR>.</OPERATOR><OO>EmbeddedFont</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>fonts</OO><OPERATOR>.</OPERATOR><OO>FontDescription</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>fonts</OO><OPERATOR>.</OPERATOR><OO>FontFamily</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>fonts</OO><OPERATOR>.</OPERATOR><OO>FontMetrics</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>fonts</OO><OPERATOR>.</OPERATOR><OO>FontType</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>fonts</OO><OPERATOR>.</OPERATOR><OO>IFont</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>html</OO><OPERATOR>.</OPERATOR><OO>HTMLTag</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>ColorSpace</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>DoJPEGImage</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>DoPNGImage</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>DoTIFFImage</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>GIFImage</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>ImageFormat</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>JPEGImage</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>PDFImage</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>PNGImage</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>TIFFImage</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>images</OO><OPERATOR>.</OPERATOR><OO>gif</OO><OPERATOR>.</OPERATOR><OO>player</OO><OPERATOR>.</OPERATOR><OO>GIFPlayer</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>layout</OO><OPERATOR>.</OPERATOR><OO>Align</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>layout</OO><OPERATOR>.</OPERATOR><OO>Layout</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>layout</OO><OPERATOR>.</OPERATOR><OO>Mode</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>layout</OO><OPERATOR>.</OPERATOR><OO>Position</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>layout</OO><OPERATOR>.</OPERATOR><OO>Resize</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>layout</OO><OPERATOR>.</OPERATOR><OO>Size</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>layout</OO><OPERATOR>.</OPERATOR><OO>Unit</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>links</OO><OPERATOR>.</OPERATOR><OO>HTTPLink</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>links</OO><OPERATOR>.</OPERATOR><OO>ILink</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>links</OO><OPERATOR>.</OPERATOR><OO>InternalLink</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>links</OO><OPERATOR>.</OPERATOR><OO>Outline</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>operators</OO><OPERATOR>.</OPERATOR><OO>Drawing</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>pages</OO><OPERATOR>.</OPERATOR><OO>Page</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>saving</OO><OPERATOR>.</OPERATOR><OO>Method</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>tools</OO><OPERATOR>.</OPERATOR><OO>sprintf</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>visibility</OO><OPERATOR>.</OPERATOR><OO>Visibility</OO><OPERATOR>;</OPERATOR>

	<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>	 * Dispatched when a page has been added to the PDF. The addPage() method generate this event</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * <DOCTAG>@eventType</DOCTAG> org.alivepdf.events.PageEvent.ADDED</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>	 * This example shows how to listen for such an event :</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * myPDF.addEventListener ( PageEvent.ADDED, pageAdded );</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>	 */</DOCCOMMENT>
	[<TYPE>Event</TYPE>(name<OPERATOR>=</OPERATOR><STRING>'added'</STRING><OPERATOR>,</OPERATOR> type<OPERATOR>=</OPERATOR><STRING>'org.alivepdf.events.PageEvent'</STRING><CLOSER>)]</CLOSER>
	
	<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>	 * Dispatched when PDF has been generated and available. The save() method generate this event</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * <DOCTAG>@eventType</DOCTAG> org.alivepdf.events.ProcessingEvent.COMPLETE</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>	 * This example shows how to listen for such an event :</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * myPDF.addEventListener ( ProcessingEvent.COMPLETE, generationComplete );</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>	 */</DOCCOMMENT>
	[<TYPE>Event</TYPE>(name<OPERATOR>=</OPERATOR><STRING>'complete'</STRING><OPERATOR>,</OPERATOR> type<OPERATOR>=</OPERATOR><STRING>'org.alivepdf.events.ProcessingEvent'</STRING><CLOSER>)]</CLOSER>
	
	<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>	 * Dispatched when the PDF page tree has been generated. The save() method generate this event</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * <DOCTAG>@eventType</DOCTAG> org.alivepdf.events.ProcessingEvent.PAGE_TREE</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>	 * This example shows how to listen for such an event :</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * myPDF.addEventListener ( ProcessingEvent.PAGE_TREE, pageTreeAdded );</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>	 */</DOCCOMMENT>
	[<TYPE>Event</TYPE>(name<OPERATOR>=</OPERATOR><STRING>'pageTree'</STRING><OPERATOR>,</OPERATOR> type<OPERATOR>=</OPERATOR><STRING>'org.alivepdf.events.ProcessingEvent'</STRING><CLOSER>)]</CLOSER>
	
	<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>	 * Dispatched when the required resources (fonts, images, etc.) haven been written into the PDF. The save() method generate this event</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * <DOCTAG>@eventType</DOCTAG> org.alivepdf.events.ProcessingEvent.RESOURCES</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>	 * This example shows how to listen for such an event :</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * myPDF.addEventListener ( ProcessingEvent.RESOURCES, resourcesAdded );</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>	 */</DOCCOMMENT>
	[<TYPE>Event</TYPE>(name<OPERATOR>=</OPERATOR><STRING>'resources'</STRING><OPERATOR>,</OPERATOR> type<OPERATOR>=</OPERATOR><STRING>'org.alivepdf.events.ProcessingEvent'</STRING><CLOSER>)]</CLOSER>
	
	<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>	 * Dispatched when the PDF generation has been initiated. The save() method generate this event</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * <DOCTAG>@eventType</DOCTAG> org.alivepdf.events.ProcessingEvent.STARTED</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>	 * This example shows how to listen for such an event :</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * myPDF.addEventListener ( ProcessingEvent.STARTED, generationStarted );</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>	 */</DOCCOMMENT>
	[<TYPE>Event</TYPE>(name<OPERATOR>=</OPERATOR><STRING>'started'</STRING><OPERATOR>,</OPERATOR> type<OPERATOR>=</OPERATOR><STRING>'org.alivepdf.events.ProcessingEvent'</STRING><CLOSER>)]</CLOSER>
	
	<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>	 * The PDF class represents a PDF document.</DOCCOMMENT>
<DOCCOMMENT>	 * </DOCCOMMENT>
<DOCCOMMENT>	 * Multiple Wiimotes can be handled as well. It is possible to create up to four Wiimote objects.</DOCCOMMENT>
<DOCCOMMENT>	 * If more than four Wiimote objects have been created an error will be thrown. After one Wiimote</DOCCOMMENT>
<DOCCOMMENT>	 * object made a successful connection to the WiiFlash Server all the other Wiimote objects will</DOCCOMMENT>
<DOCCOMMENT>	 * fire the connect event immediately.</DOCCOMMENT>
<DOCCOMMENT>	 * </DOCCOMMENT>
<DOCCOMMENT>	 * <DOCTAG>@author</DOCTAG> Thibault Imbert</DOCCOMMENT>
<DOCCOMMENT>	 * </DOCCOMMENT>
<DOCCOMMENT>	 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>	 * This example shows how to create a PDF document :</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * </DOCCOMMENT>
<DOCCOMMENT>	 * var myPDF:PDF = new PDF( Orientation.LANDSCAPE, Unit.MM, Size.A4 );</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * </DOCCOMMENT>
<DOCCOMMENT>	 * This example shows how to listen for events during PDF creation :</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * myPDF.addEventListener( ProcessingEvent.STARTED, generationStarted );</DOCCOMMENT>
<DOCCOMMENT>	 * myPDF.addEventListener( ProcessingEvent.PAGE_TREE, pageTreeGeneration );</DOCCOMMENT>
<DOCCOMMENT>	 * myPDF.addEventListener( ProcessingEvent.RESOURCES, resourcesEmbedding );</DOCCOMMENT>
<DOCCOMMENT>	 * myPDF.addEventListener( ProcessingEvent.COMPLETE, generationComplete );</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * </DOCCOMMENT>
<DOCCOMMENT>	 * This example shows how to listen for an event when a page is added to the PDF :</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 *</DOCCOMMENT>
<DOCCOMMENT>	 * myPDF.addEventListener( PageEvent.ADDED, pageAdded );</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>	 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>	 */</DOCCOMMENT>	
	<KEYWORD>public</KEYWORD> <KEYWORD>class</KEYWORD> PDF <KEYWORD>implements</KEYWORD> IEventDispatcher
	{
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> <CONSTANT>PDF_VERSION</CONSTANT><OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <STRING>'1.3'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> <CONSTANT>ALIVEPDF_VERSION</CONSTANT><OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <STRING>'0.1.5'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>const</KEYWORD> <CONSTANT>I1000</CONSTANT><OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>1000</NUMERIC><OPERATOR>;</OPERATOR>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> format<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> size<OPERATOR>:</OPERATOR>Size<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> margin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> nbPages<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> n<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>                 
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> offsets<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>     
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> state<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>      
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> compress<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> defaultOrientation<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> defaultSize<OPERATOR>:</OPERATOR>Size<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> defaultRotation<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> defaultUnit<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> currentOrientation<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> orientationChanges<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> strokeColor<OPERATOR>:</OPERATOR>IColor<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> fillColor<OPERATOR>:</OPERATOR>IColor<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> strokeStyle<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> strokeAlpha<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> strokeFlatness<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> strokeBlendMode<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> strokeDash<OPERATOR>:</OPERATOR>DashedLine<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> strokeCaps<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> strokeJoints<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> strokeMiter<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> textAlpha<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> textLeading<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> textColor<OPERATOR>:</OPERATOR>IColor<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> textScale<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> textSpace<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> textWordSpace<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> k<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>             
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> leftMargin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>        
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> topMargin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>    
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> rightMargin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>        
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> bottomMargin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>    
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> currentMargin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>            
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> currentX<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> currentY<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> currentMatrix<OPERATOR>:</OPERATOR>Matrix<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> lasth<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>       
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> strokeThickness<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>  
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> fonts<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>          
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> fontFiles<OPERATOR>:</OPERATOR><TYPE>Object</TYPE><OPERATOR>;</OPERATOR>    
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> differences<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>                   
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> fontFamily<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>     
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> fontStyle<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>       
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> underline<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>;</OPERATOR>       
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> fontSizePt<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>      
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> windingRule<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>            
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> addTextColor<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>       
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> colorFlag<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>;</OPERATOR>     
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> ws<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> helvetica<OPERATOR>:</OPERATOR>IFont<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> autoPageBreak<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> pageBreakTrigger<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> inHeader<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>;</OPERATOR>    
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> inFooter<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>;</OPERATOR>    
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> zoomMode<OPERATOR>:*;</OPERATOR>     
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> zoomFactor<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>     
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> layoutMode<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>         
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> pageMode<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> isLinux<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> documentTitle<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>            
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> documentSubject<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>       
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> documentAuthor<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>      
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> documentKeywords<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>    
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> documentCreator<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>     
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> aliasNbPages<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>   
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> version<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> buffer<OPERATOR>:</OPERATOR><TYPE>ByteArray</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> streamDictionary<OPERATOR>:</OPERATOR>Dictionary<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> compressedPages<OPERATOR>:</OPERATOR><TYPE>ByteArray</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> image<OPERATOR>:</OPERATOR>PDFImage<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> fontSize<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> name<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> type<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> desc<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> underlinePosition<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> underlineThickness<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> charactersWidth<OPERATOR>:</OPERATOR><TYPE>Object</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> d<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> nb<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> size1<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> size2<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> currentFont<OPERATOR>:</OPERATOR>IFont<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> defaultFont<OPERATOR>:</OPERATOR>IFont<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> b2<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> filter<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> filled<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> dispatcher<OPERATOR>:</OPERATOR>EventDispatcher<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> arrayPages<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> arrayNotes<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> graphicStates<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> currentPage<OPERATOR>:</OPERATOR>Page<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> outlines<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> outlineRoot<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> textRendering<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> viewerPreferences<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> reference<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> pagesReferences<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> nameDictionary<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> displayObjectbounds<OPERATOR>:</OPERATOR>Rectangle<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> coreFontMetrics<OPERATOR>:</OPERATOR>FontMetrics<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> columnNames<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> columns<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> currentGrid<OPERATOR>:</OPERATOR>Grid<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> isEven<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> matrix<OPERATOR>:</OPERATOR>Matrix<OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> pushedFontName<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> fontUnderline<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> jsResource<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> js<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> totalEmbeddedFonts<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> widths<OPERATOR>:*;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> aligns<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> spotColors<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> drawColor<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> bitmapFilled<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> bitmapFillBuffer<OPERATOR>:</OPERATOR>Shape <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Shape(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> visibility<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <OBJ>Visibility</OBJ><OPERATOR>.</OPERATOR><OO>ALL</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> nOCGPrint<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>protected</KEYWORD> <KEYWORD>var</KEYWORD> nOCGView<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>

		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The PDF class represents a PDF document.</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to create a valid PDF document :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var myPDF:PDF = new PDF ( Orientation.PORTRAIT, Unit.MM, Size.A4 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> PDF ( orientation<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'Portrait'</STRING><OPERATOR>,</OPERATOR> unit<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'Mm'</STRING><OPERATOR>,</OPERATOR> pageSize<OPERATOR>:</OPERATOR>Size<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> rotation<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER>
		{
			size <OPERATOR>=</OPERATOR> ( pageSize <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>Size</OBJ><OPERATOR>.</OPERATOR><OO>getSize</OO>(pageSize<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>clone</OO>(<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <OBJ>Size</OBJ><OPERATOR>.</OPERATOR><OO>A4</OO><OPERATOR>.</OPERATOR><OO>clone</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( size <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD>  <CLOSER>)</CLOSER> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>RangeError</TYPE> (<STRING>'Unknown page format : '</STRING> <OPERATOR>+</OPERATOR> pageSize <OPERATOR>+</OPERATOR><STRING>', please use a org.alivepdf.layout.'</STRING> <OPERATOR>+</OPERATOR> 
				<STRING>'Size object or any of those strings : Size.A3, Size.A4, Size.A5, Size.Letter, Size.Legal, Size.Tabloid'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			dispatcher <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> EventDispatcher ( <KEYWORD>this</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			viewerPreferences <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>String</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			outlines <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			arrayPages <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			arrayNotes <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			graphicStates <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			orientationChanges <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			nbPages <OPERATOR>=</OPERATOR> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			buffer <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>ByteArray</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			offsets <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			fonts <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			fontFiles <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Object</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			differences <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			streamDictionary <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Dictionary(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			inHeader <OPERATOR>=</OPERATOR> inFooter <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			fontFamily <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>String</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			fontStyle <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>String</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			underline <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			
			colorFlag <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			matrix <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Matrix(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			pagesReferences <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			compressedPages <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>ByteArray</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			coreFontMetrics <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> FontMetrics(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			defaultUnit <OPERATOR>=</OPERATOR> setUnit ( unit <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			defaultSize <OPERATOR>=</OPERATOR> size<OPERATOR>;</OPERATOR>
			defaultOrientation <OPERATOR>=</OPERATOR> orientation<OPERATOR>;</OPERATOR>
			defaultRotation <OPERATOR>=</OPERATOR> rotation<OPERATOR>;</OPERATOR>
			
			n <OPERATOR>=</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
			state <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			lasth <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			fontSizePt <OPERATOR>=</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>;</OPERATOR>
			ws <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			margin <OPERATOR>=</OPERATOR> <NUMERIC>28.35</NUMERIC><OPERATOR>/</OPERATOR>k<OPERATOR>;</OPERATOR>
			
			setMargins ( margin<OPERATOR>,</OPERATOR> margin <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			currentMargin <OPERATOR>=</OPERATOR> margin<OPERATOR>/</OPERATOR><NUMERIC>10</NUMERIC><OPERATOR>;</OPERATOR>
			strokeThickness <OPERATOR>=</OPERATOR> <OPERATOR>.</OPERATOR><NUMERIC>567</NUMERIC><OPERATOR>/</OPERATOR>k<OPERATOR>;</OPERATOR>
			setAutoPageBreak ( <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR> margin <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>			
			setDisplayMode( <OBJ>Display</OBJ><OPERATOR>.</OPERATOR><OO>FULL_WIDTH</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			isLinux <OPERATOR>=</OPERATOR> <OBJ>Capabilities</OBJ><OPERATOR>.</OPERATOR><OO>version</OO><OPERATOR>.</OPERATOR><OO>indexOf</OO> (<STRING>"LNX"</STRING><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			version <OPERATOR>=</OPERATOR> <OBJ>PDF</OBJ><OPERATOR>.</OPERATOR><OO>PDF_VERSION</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you specify the left, top, and right margins</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> left </DOCPROPERTY>Left margin</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> top </DOCPROPERTY>Right number</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> right </DOCPROPERTY>Top number</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> bottom </DOCPROPERTY>Bottom number</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to set margins for the PDF document :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setMargins ( 10, 10, 10, 10 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setMargins ( left<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> top<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> right<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> bottom<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>20</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			leftMargin <OPERATOR>=</OPERATOR> left<OPERATOR>;</OPERATOR>
			topMargin <OPERATOR>=</OPERATOR> top<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD>( right <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> right <OPERATOR>=</OPERATOR> left<OPERATOR>;</OPERATOR>
			bottomMargin <OPERATOR>=</OPERATOR> bottom<OPERATOR>;</OPERATOR>
			rightMargin <OPERATOR>=</OPERATOR> right<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you retrieve the margins dimensions</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Rectangle</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to get the margins dimensions :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var marginsDimensions:Rectangle = myPDF.getMargins ();</DOCCOMMENT>
<DOCCOMMENT>		 * // output : (x=10.00, y=10.0012, w=575.27, h=811.88)</DOCCOMMENT>
<DOCCOMMENT>		 * trace( marginsDimensions )</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getMargins (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR>Rectangle
		{
			<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Rectangle( leftMargin<OPERATOR>,</OPERATOR> topMargin<OPERATOR>,</OPERATOR> getCurrentPage(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>width</OO> <OPERATOR>-</OPERATOR> rightMargin <OPERATOR>-</OPERATOR> leftMargin<OPERATOR>,</OPERATOR> getCurrentPage(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>height</OO> <OPERATOR>-</OPERATOR> bottomMargin <OPERATOR>-</OPERATOR> topMargin <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you specify the left margin</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> margin </DOCPROPERTY>Left margin</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how set left margin for the PDF document :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setLeftMargin ( 10 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setLeftMargin (margin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			leftMargin <OPERATOR>=</OPERATOR> margin<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD>( nbPages <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> currentX <OPERATOR>&lt;</OPERATOR> margin <CLOSER>)</CLOSER> currentX <OPERATOR>=</OPERATOR> margin<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you specify the top margin</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> margin </DOCPROPERTY>Top margin</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how set top margin for the PDF document :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setTopMargin ( 10 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setTopMargin (margin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			topMargin <OPERATOR>=</OPERATOR> margin<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you specify the bottom margin</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> margin </DOCPROPERTY>Bottom margin</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how set bottom margin for the PDF document :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setBottomMargin ( 10 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setBottomMargin (margin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			bottomMargin <OPERATOR>=</OPERATOR> margin<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you specify the right margin</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> margin </DOCPROPERTY>Right margin</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how set right margin for the PDF document :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setRightMargin ( 10 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setRightMargin (margin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			rightMargin <OPERATOR>=</OPERATOR> margin<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you enable or disable auto page break mode and triggering margin </DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> auto </DOCPROPERTY>Page break mode</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> margin </DOCPROPERTY>Bottom margin</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setAutoPageBreak ( auto<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>,</OPERATOR> margin<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			autoPageBreak <OPERATOR>=</OPERATOR> auto<OPERATOR>;</OPERATOR>
			bottomMargin <OPERATOR>=</OPERATOR> margin<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( currentPage <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> pageBreakTrigger <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>margin<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you set a specific display mode, the DisplayMode takes care of the general layout of the PDF in the PDF reader</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> zoom </DOCPROPERTY>Zoom mode, can be Display.FULL_PAGE, Display.FULL_WIDTH, Display.REAL, Display.DEFAULT</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> layout </DOCPROPERTY>Layout of the PDF document, can be Layout.SINGLE_PAGE, Layout.ONE_COLUMN, Layout.TWO_COLUMN_LEFT, Layout.TWO_COLUMN_RIGHT</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> mode </DOCPROPERTY>PageMode can be pageMode.USE_NONE, PageMode.USE_OUTLINES, PageMode.USE_THUMBS, PageMode.FULL_SCREEN</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> zoomValue </DOCPROPERTY>Zoom factor to be used when the PDF is opened, a value of 1.5 would open the PDF with a 150% zoom</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example creates a PDF which opens at full page scaling, one page at a time :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setDisplayMode ( Display.FULL_PAGE, Layout.SINGLE_PAGE );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * To create a full screen PDF you would write :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setDisplayMode( Display.FULL_PAGE, Layout.SINGLE_PAGE, PageMode.FULLSCREEN );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * To create a PDF which will open with a 150% zoom, you would write :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setDisplayMode( Display.REAL, Layout.SINGLE_PAGE, PageMode.USE_NONE, 1.5 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setDisplayMode ( zoom<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'FullWidth'</STRING><OPERATOR>,</OPERATOR> layout<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'SinglePage'</STRING><OPERATOR>,</OPERATOR> mode<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'UseNone'</STRING><OPERATOR>,</OPERATOR> zoomValue<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			zoomMode <OPERATOR>=</OPERATOR> zoom<OPERATOR>;</OPERATOR>
			zoomFactor <OPERATOR>=</OPERATOR> zoomValue<OPERATOR>;</OPERATOR>
			layoutMode <OPERATOR>=</OPERATOR> layout<OPERATOR>;</OPERATOR>
			pageMode <OPERATOR>=</OPERATOR> mode<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you set specify the timing (in seconds) a page is shown when the PDF is shown in fullscreen mode</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> title </DOCPROPERTY>The title</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to set a specific advance timing (5 seconds) for the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setAdvanceTiming ( 5 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * You can also specify this on the Page object :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var page:Page = new Page ( Orientation.PORTRAIT, Unit.MM );</DOCCOMMENT>
<DOCCOMMENT>		 * page.setAdvanceTiming ( 5 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addPage ( page );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setAdvanceTiming ( timing<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>advanceTiming</OO> <OPERATOR>=</OPERATOR> timing<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you set a title for the PDF</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> title </DOCPROPERTY>The title</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to set a specific title to the PDF tags :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setTitle ( "AlivePDF !" );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setTitle ( title<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			documentTitle <OPERATOR>=</OPERATOR> title<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you set a subject for the PDF</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> subject </DOCPROPERTY>The subject</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 *  This example shows how to set a specific subject to the PDF tags :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setSubject ( "Any topic" );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setSubject ( subject<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			documentSubject <OPERATOR>=</OPERATOR> subject<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Sets the specified author for the PDF</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> author </DOCPROPERTY>The author</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a specific author to the PDF tags :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setAuthor ( "Bob" );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setAuthor ( author<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			documentAuthor <OPERATOR>=</OPERATOR> author<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Sets the specified keywords for the PDF</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> keywords </DOCPROPERTY>The keywords</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add some keywords to the PDF tags :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setKeywords ( "Design, Agency, Communication, etc." );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setKeywords ( keywords<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			documentKeywords <OPERATOR>=</OPERATOR> keywords<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Sets the specified creator for the PDF</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> creator </DOCPROPERTY>Name of the PDF creator</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to set a creator name to the PDF tags :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setCreator ( "My Application 1.0" );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setCreator ( creator<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			documentCreator <OPERATOR>=</OPERATOR> creator<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setPermissions ( <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF paging API</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you specify an alias for the total number of pages</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> alias </DOCPROPERTY>Alias to use</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to show the total number of pages :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setAliasNbPages ( "[nb]" );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.textStyle( new RGBColor (0,0,0), 1 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setFont( FontFamily.HELVETICA, Style.NORMAL, 18 );</DOCCOMMENT>
<DOCCOMMENT>		 * // then use the alias when needed</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addText ("There are [nb] pages in the PDF !", 150, 50);</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setAliasNbPages ( alias<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'{nb}'</STRING> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			aliasNbPages <OPERATOR>=</OPERATOR> alias<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you rotate a specific page (between 1 and n-1)</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> number </DOCPROPERTY>Page number</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> rotation </DOCPROPERTY>Page rotation (must be a multiple of 90)</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@throws</DOCTAG><DOCPROPERTY> RangeError </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to rotate the first page 90 clock wise :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.rotatePage ( 1, 90 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to rotate the first page 90 counter clock wise :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.rotatePage ( 1, -90 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> rotatePage ( number<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> rotation<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( number <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> number <OPERATOR>&lt;=</OPERATOR> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <CLOSER>)</CLOSER> arrayPages[number<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>rotate</OO> ( rotation <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>RangeError</TYPE> (<STRING>"No page available, please select a page from 1 to "</STRING> <OPERATOR>+</OPERATOR> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you add a page to the current PDF</DOCCOMMENT>
<DOCCOMMENT>		 *  </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> page </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add an A4 page with a landscape orientation :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var page:Page = new Page ( Orientation.LANDSCAPE, Unit.MM, Size.A4 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addPage( page );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a page with a custom size :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var customSize:Size = new Size ( [420.94, 595.28], "CustomSize", [5.8,  8.3], [148, 210] );</DOCCOMMENT>
<DOCCOMMENT>		 * var page:Page = new Page ( Orientation.PORTRAIT, Unit.MM, customSize );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addPage ( page );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addPage ( page<OPERATOR>:</OPERATOR>Page<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR>Page
		{
			<KEYWORD>if</KEYWORD> ( page <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> page <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Page ( defaultOrientation<OPERATOR>,</OPERATOR> defaultUnit<OPERATOR>,</OPERATOR> defaultSize<OPERATOR>,</OPERATOR> defaultRotation <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<OBJ>pagesReferences</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( (<NUMERIC>3</NUMERIC><OPERATOR>+</OPERATOR>(<OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>&lt;&lt;</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>))</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( currentPage <OPERATOR>=</OPERATOR> page <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>number</OO> <OPERATOR>=</OPERATOR> <OBJ>pagesReferences</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( state <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> open(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD>( nbPages <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER>
			{
				inFooter <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
				footer(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				inFooter <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
				finishPage(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			startPage ( page <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>orientation</OO> <OPERATOR>:</OPERATOR> defaultOrientation <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( strokeColor <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> 
				lineStyle ( strokeColor<OPERATOR>,</OPERATOR> strokeThickness<OPERATOR>,</OPERATOR> strokeFlatness<OPERATOR>,</OPERATOR> strokeAlpha<OPERATOR>,</OPERATOR> windingRule<OPERATOR>,</OPERATOR> strokeBlendMode<OPERATOR>,</OPERATOR> strokeDash<OPERATOR>,</OPERATOR> strokeCaps<OPERATOR>,</OPERATOR> strokeJoints<OPERATOR>,</OPERATOR> strokeMiter <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( fillColor <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> 
				beginFill( fillColor <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( textColor <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> 
				textStyle ( textColor<OPERATOR>,</OPERATOR> textAlpha<OPERATOR>,</OPERATOR> textRendering<OPERATOR>,</OPERATOR> textSpace<OPERATOR>,</OPERATOR> textSpace<OPERATOR>,</OPERATOR> textScale<OPERATOR>,</OPERATOR> textLeading <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( currentFont <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> 
				setFont ( currentFont<OPERATOR>,</OPERATOR> fontSizePt <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> {
				currentFont <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> CoreFont ( <OBJ>FontFamily</OBJ><OPERATOR>.</OPERATOR><OO>HELVETICA</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				setFont(currentFont<OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			inHeader <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			header(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			inHeader <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			
			<OBJ>dispatcher</OBJ><OPERATOR>.</OPERATOR><OO>dispatchEvent</OO>( <KEYWORD>new</KEYWORD> PageEvent ( <OBJ>PageEvent</OBJ><OPERATOR>.</OPERATOR><OO>ADDED</OO><OPERATOR>,</OPERATOR> currentPage <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>return</KEYWORD> page<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you retrieve a Page object</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> page </DOCPROPERTY>page number, from 1 to total numbers of pages</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Page</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to retrieve the first page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var page:Page = myPDF.getPage ( 1 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getPage ( page<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR>Page
		{
			<KEYWORD>if</KEYWORD> ( page <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> page <OPERATOR>&lt;=</OPERATOR> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> arrayPages [page<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>RangeError</TYPE> (<STRING>"Can't retrieve page "</STRING> <OPERATOR>+</OPERATOR> page <OPERATOR>+</OPERATOR> <STRING>"."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you retrieve all the PDF pages</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Array</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to retrieve all the PDF pages :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var pdfPages:Array = myPDF.getPages ();</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * for each ( var p:Page in pdfPages ) trace( p );</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * outputs :</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * [Page orientation=Portrait width=210 height=297]</DOCCOMMENT>
<DOCCOMMENT>		 * [Page orientation=Landscape width=297 height=210]</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getPages (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Array</TYPE>
		{
			<KEYWORD>if</KEYWORD> ( <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> arrayPages<OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>RangeError</TYPE> (<STRING>"No pages available."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you move to a Page in the PDF</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> page </DOCPROPERTY>page number, from 1 to total numbers of pages</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to move to the first page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.gotoPage ( 1 );</DOCCOMMENT>
<DOCCOMMENT>		 * // draw on the first page</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineStyle( new RGBColor(0xFF0000), 2, 0 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.drawRect( 60, 60, 40, 40 ); </DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> gotoPage ( page<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( page <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> page <OPERATOR>&lt;=</OPERATOR> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <CLOSER>)</CLOSER> currentPage <OPERATOR>=</OPERATOR> arrayPages[page<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>	
			<KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>RangeError</TYPE> (<STRING>"Can't find page "</STRING> <OPERATOR>+</OPERATOR> page <OPERATOR>+</OPERATOR> <STRING>"."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you remove a Page from the PDF</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> page </DOCPROPERTY>page number, from 1 to total numbers of pages</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Page</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to remove the first page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.removePage ( 1 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * If you want to remove pages each by each, you can combine removePage with getPageCount</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.removePage ( myPDFEncoder.getPageCount() );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> removePage ( page<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR>Page
		{
			<KEYWORD>if</KEYWORD> ( page <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> page <OPERATOR>&lt;=</OPERATOR> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO> ( page<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>RangeError</TYPE> (<STRING>"Cannot remove page "</STRING> <OPERATOR>+</OPERATOR> page <OPERATOR>+</OPERATOR> <STRING>"."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you remove all the pages from the PDF</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to remove all the pages :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.removeAllPages();</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> removeAllPages (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> 
		{	
			arrayPages <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you retrieve the current Page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Page A Page object</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to retrieve the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var page:Page = myPDF.getCurrentPage ();</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getCurrentPage (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR>Page
		{
			<KEYWORD>if</KEYWORD> ( <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> currentPage<OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>RangeError</TYPE> (<STRING>"Can't retrieve the current page, "</STRING> <OPERATOR>+</OPERATOR> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>+</OPERATOR> <STRING>" pages available."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you retrieve the number of pages in the PDF document</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> int Number of pages in the PDF</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to retrieve the number of pages :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var totalPages:int = myPDF.totalPages;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> get totalPages(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>int</TYPE>
		{
			<KEYWORD>return</KEYWORD> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you insert a line break for text</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> height </DOCPROPERTY>Line break height</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a line break :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.newLine ( 10 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> newLine ( height<OPERATOR>:*=</OPERATOR><STRING>''</STRING> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			currentX <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
			currentY <OPERATOR>+=</OPERATOR> (height <KEYWORD>is</KEYWORD> <TYPE>String</TYPE><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> lasth <OPERATOR>:</OPERATOR> height<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you retrieve the X position for the current page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Number the X position</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getX (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Number</TYPE>
		{
			<KEYWORD>return</KEYWORD> currentX<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you retrieve the Y position for the current page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Number the Y position</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getY (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Number</TYPE>
		{
			<KEYWORD>return</KEYWORD> currentY<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you specify the X position for the current page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY>The X position</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setX ( x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> (acceptPageBreak(<CLOSER>))</CLOSER> currentX <OPERATOR>=</OPERATOR> ( x <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> x <OPERATOR>:</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO> <OPERATOR>+</OPERATOR> x<OPERATOR>;</OPERATOR>	
			<KEYWORD>else</KEYWORD> currentX <OPERATOR>=</OPERATOR> x<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you specify the Y position for the current page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY>The Y position</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setY ( y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> (acceptPageBreak(<CLOSER>))</CLOSER> 
			{
				currentX <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
				currentY <OPERATOR>=</OPERATOR> ( y <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> y <OPERATOR>:</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO> <OPERATOR>+</OPERATOR> y<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> currentY <OPERATOR>=</OPERATOR> y<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you specify the X and Y position for the current page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY>The X position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY>The Y position</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setXY ( x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			setY( y <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			setX( x <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Returns the default PDF Size</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Size</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getDefaultSize (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR>Size
		{
			<KEYWORD>return</KEYWORD> defaultSize<OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Returns the default PDF orientation</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> String</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getDefaultOrientation (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>String</TYPE> 
		{
			<KEYWORD>return</KEYWORD> defaultOrientation<OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Returns the default PDF unit unit</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> String</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getDefaultUnit (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>String</TYPE> 
		{
			<KEYWORD>return</KEYWORD> defaultUnit<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF transform API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* skew()</COMMENT>
<COMMENT>		* rotate()</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> skew(ax<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> ay<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD>(x <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
				x <OPERATOR>=</OPERATOR> getX(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD>(y <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
				y <OPERATOR>=</OPERATOR> getY(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD>(ax <OPERATOR>==</OPERATOR> <NUMERIC>90</NUMERIC> <OPERATOR>||</OPERATOR> ay <OPERATOR>==</OPERATOR> <NUMERIC>90</NUMERIC><CLOSER>)</CLOSER>
				<KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>RangeError</TYPE>(<STRING>"Please use values between -90° and 90° for skewing."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			x <OPERATOR>*=</OPERATOR> k<OPERATOR>;</OPERATOR>
			y <OPERATOR>=</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO> <OPERATOR>-</OPERATOR> y<CLOSER>)</CLOSER> <OPERATOR>*</OPERATOR> k<OPERATOR>;</OPERATOR>
			ax <OPERATOR>*=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>PI</OO> <OPERATOR>/</OPERATOR> <NUMERIC>180</NUMERIC><OPERATOR>;</OPERATOR>
			ay <OPERATOR>*=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>PI</OO> <OPERATOR>/</OPERATOR> <NUMERIC>180</NUMERIC><OPERATOR>;</OPERATOR>
			<OBJ>matrix</OBJ><OPERATOR>.</OPERATOR><OO>identity</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>matrix</OBJ><OPERATOR>.</OPERATOR><OO>a</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<OBJ>matrix</OBJ><OPERATOR>.</OPERATOR><OO>b</OO> <OPERATOR>=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>tan</OO>(ay<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>matrix</OBJ><OPERATOR>.</OPERATOR><OO>c</OO> <OPERATOR>=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>tan</OO>(ax<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>matrix</OBJ><OPERATOR>.</OPERATOR><OO>d</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			getMatrixTransformPoint(x<OPERATOR>,</OPERATOR> y<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			transform(matrix<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> rotate(angle<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD>(x <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
				x <OPERATOR>=</OPERATOR> getX(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD>(y <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
				y <OPERATOR>=</OPERATOR> getY(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			angle <OPERATOR>*=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>PI</OO> <OPERATOR>/</OPERATOR> <NUMERIC>180</NUMERIC><OPERATOR>;</OPERATOR>
			x <OPERATOR>*=</OPERATOR> k<OPERATOR>;</OPERATOR>
			y <OPERATOR>=</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO> <OPERATOR>-</OPERATOR> y<CLOSER>)</CLOSER> <OPERATOR>*</OPERATOR> k<OPERATOR>;</OPERATOR>
			<OBJ>matrix</OBJ><OPERATOR>.</OPERATOR><OO>identity</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>matrix</OBJ><OPERATOR>.</OPERATOR><OO>rotate</OO>(<OPERATOR>-</OPERATOR>angle<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			getMatrixTransformPoint(x<OPERATOR>,</OPERATOR> y<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			transform(matrix<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> transform(tm<OPERATOR>:</OPERATOR>Matrix<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write(sprintf(<STRING>'%.3f %.3f %.3f %.3f %.3f %.3f cm'</STRING><OPERATOR>,</OPERATOR> <OBJ>tm</OBJ><OPERATOR>.</OPERATOR><OO>a</OO><OPERATOR>,</OPERATOR> <OBJ>tm</OBJ><OPERATOR>.</OPERATOR><OO>b</OO><OPERATOR>,</OPERATOR> <OBJ>tm</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>,</OPERATOR> <OBJ>tm</OBJ><OPERATOR>.</OPERATOR><OO>d</OO><OPERATOR>,</OPERATOR> <OBJ>tm</OBJ><OPERATOR>.</OPERATOR><OO>tx</OO><OPERATOR>,</OPERATOR> <OBJ>tm</OBJ><OPERATOR>.</OPERATOR><OO>ty</OO><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> getMatrixTransformPoint(px<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> py<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> position<OPERATOR>:</OPERATOR>Point <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Point(px<OPERATOR>,</OPERATOR> py<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> deltaPoint<OPERATOR>:</OPERATOR>Point <OPERATOR>=</OPERATOR> <OBJ>matrix</OBJ><OPERATOR>.</OPERATOR><OO>deltaTransformPoint</OO>(position<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>matrix</OBJ><OPERATOR>.</OPERATOR><OO>tx</OO> <OPERATOR>=</OPERATOR> px <OPERATOR>-</OPERATOR> <OBJ>deltaPoint</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>;</OPERATOR>
			<OBJ>matrix</OBJ><OPERATOR>.</OPERATOR><OO>ty</OO> <OPERATOR>=</OPERATOR> py <OPERATOR>-</OPERATOR> <OBJ>deltaPoint</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> startTransform(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write(<STRING>'q'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> stopTransform(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write(<STRING>'Q'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF Header and Footer API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* header()</COMMENT>
<COMMENT>		* footer()</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> header(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<COMMENT>/*</COMMENT>
<COMMENT>			//to be overriden (uncomment for a demo )</COMMENT>
<COMMENT>			var newFont:CoreFont = new CoreFont ( FontFamily.HELVETICA );</COMMENT>
<COMMENT>			this.setFont(newFont, 12);</COMMENT>
<COMMENT>			this.textStyle( new RGBColor (0x000000) );</COMMENT>
<COMMENT>			this.addCell(80);</COMMENT>
<COMMENT>			this.addCell(30,10,'Title',1,0,'C');</COMMENT>
<COMMENT>			this.newLine(20);*/</COMMENT>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> footer(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<COMMENT>/*</COMMENT>
<COMMENT>			//to be overriden (uncomment for a demo )</COMMENT>
<COMMENT>			this.setXY (15, -15);</COMMENT>
<COMMENT>			var newFont:CoreFont = new CoreFont ( FontFamily.HELVETICA );</COMMENT>
<COMMENT>			this.setFont(newFont, 8);</COMMENT>
<COMMENT>			this.textStyle( new RGBColor (0x000000) );</COMMENT>
<COMMENT>			this.addCell(0,10,'Page '+(totalPages-1),0,0,'C');</COMMENT>
<COMMENT>			this.newLine(20);*/</COMMENT>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF Drawing API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* moveTo()</COMMENT>
<COMMENT>		* lineTo()</COMMENT>
<COMMENT>		* end()</COMMENT>
<COMMENT>		* curveTo()</COMMENT>
<COMMENT>		* lineStyle()</COMMENT>
<COMMENT>		* beginFill()</COMMENT>
<COMMENT>		* beginBitmapFill()</COMMENT>
<COMMENT>		* endFill()</COMMENT>
<COMMENT>		* drawRect()</COMMENT>
<COMMENT>		* drawRoundRect()</COMMENT>
<COMMENT>		* drawComplexRoundRect()</COMMENT>
<COMMENT>		* drawCircle()</COMMENT>
<COMMENT>		* drawEllipse()</COMMENT>
<COMMENT>		* drawPolygone()</COMMENT>
<COMMENT>		* drawRegularPolygone()</COMMENT>
<COMMENT>		* drawPath()</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you specify the opacity for the next drawing operations, from 0 (100% transparent) to 1 (100% opaque)</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> alpha </DOCPROPERTY>Opacity</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> blendMode </DOCPROPERTY>Blend mode, can be Blend.DIFFERENCE, BLEND.HARDLIGHT, etc.</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to set the transparency to 50% for any following drawing, image or text operation :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setAlpha ( .5 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>	
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setAlpha ( alpha<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> blendMode<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'Normal'</STRING> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> graphicState<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> addExtGState( { <STRING>'ca'</STRING> <OPERATOR>:</OPERATOR> alpha<OPERATOR>,</OPERATOR> <STRING>'SA'</STRING> <OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR> <STRING>'CA'</STRING> <OPERATOR>:</OPERATOR> alpha<OPERATOR>,</OPERATOR> <STRING>'BM'</STRING> <OPERATOR>:</OPERATOR> <STRING>'/'</STRING> <OPERATOR>+</OPERATOR> blendMode <CLOSER>}</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			setExtGState ( graphicState <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you move the current drawing point to the specified destination</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY>X position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY>Y position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to move the pen to 120,200 :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.moveTo ( 120, 200 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> moveTo ( x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write ( x<OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>" m"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you draw a stroke from the current point to the new point</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY>X position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY>Y position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to draw some dashed lines in the current page with specific caps style and joint style :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;br&gt;&lt;b&gt;Important : Always call the end() method when you're done&lt;/b&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineStyle( new RGBColor ( 0x990000 ), 1, 1 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.moveTo ( 10, 20 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 40, 20 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 40, 40 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 10, 40 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 10, 20 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.end();</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> lineTo ( x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write ( x<OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>+</OPERATOR> <STRING>" l"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The end method closes the stroke</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to draw some dashed lines in the current page with specific caps style and joint style :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;br&gt;&lt;b&gt;Important : Always call the end() method when you're done&lt;/b&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineStyle( new RGBColor ( 0x990000 ), 1, 1 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.moveTo ( 10, 20 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 40, 20 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 40, 40 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 10, 40 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 10, 20 );</DOCCOMMENT>
<DOCCOMMENT>		 * // end the stroke</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.end();</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> end (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write ( <OPERATOR>!</OPERATOR>filled <OPERATOR>?</OPERATOR> <STRING>"s"</STRING> <OPERATOR>:</OPERATOR> windingRule <OPERATOR>==</OPERATOR> <OBJ>WindingRule</OBJ><OPERATOR>.</OPERATOR><OO>NON_ZERO</OO> <OPERATOR>?</OPERATOR> <STRING>"b"</STRING> <OPERATOR>:</OPERATOR> <STRING>"b*"</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The curveTo method draws a cubic bezier curve</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> controlX1 </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> controlY1 </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> controlX2 </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> controlY2 </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> finalX3 </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> finalY3 </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to draw some curves lines in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;br&gt;&lt;b&gt;Important : Always call the end() method when you're done&lt;/b&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineStyle ( new RGBColor ( 0x990000 ), 1, 1, null, CapsStyle.NONE, JointStyle.MITER );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.moveTo ( 10, 200 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.curveTo ( 120, 210, 196, 280, 139, 195 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.curveTo ( 190, 110, 206, 190, 179, 205 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.end();</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>	
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> curveTo ( controlX1<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> controlY1<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> controlX2<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> controlY2<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> finalX3<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> finalY3<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write (controlX1<OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>controlY1<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> controlX2<OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>controlY2<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> finalX3<OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>finalY3<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>" c"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Sets the stroke style</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> color </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> thickness </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> flatness </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> alpha </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> rule </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> blendMode </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> style </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> caps </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> joints </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> miterLimit </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to draw a star with an "even odd" rule :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineStyle( new RGBColor ( 0x990000 ), 1, 0, 1, Rule.EVEN_ODD, null, null, Caps.NONE, Joint.MITER );</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginFill( new RGBColor ( 0x009900 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.moveTo ( 66, 10 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 23, 127 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 122, 50 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 10, 49 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 109, 127 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.end();</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to draw a star with an "non-zero" winding rule :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineStyle( new RGBColor ( 0x990000 ), 1, 0, 1, Rule.NON_ZERO_WINDING, null, null, Caps.NONE, Joint.MITER );</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginFill( new RGBColor ( 0x009900 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.moveTo ( 66, 10 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 23, 127 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 122, 50 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 10, 49 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 109, 127 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.end();</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>	
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> lineStyle ( color<OPERATOR>:</OPERATOR>IColor<OPERATOR>,</OPERATOR> thickness<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> flatness<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> alpha<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> rule<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>"NonZeroWinding"</STRING><OPERATOR>,</OPERATOR> blendMode<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>"Normal"</STRING><OPERATOR>,</OPERATOR> style<OPERATOR>:</OPERATOR>DashedLine<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> caps<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> joints<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> miterLimit<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>3</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			setStrokeColor ( strokeColor <OPERATOR>=</OPERATOR> color <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			strokeThickness <OPERATOR>=</OPERATOR> thickness<OPERATOR>;</OPERATOR>
			strokeAlpha <OPERATOR>=</OPERATOR> alpha<OPERATOR>;</OPERATOR>
			strokeFlatness <OPERATOR>=</OPERATOR> flatness<OPERATOR>;</OPERATOR>
			windingRule <OPERATOR>=</OPERATOR> rule<OPERATOR>;</OPERATOR>
			strokeBlendMode <OPERATOR>=</OPERATOR> blendMode<OPERATOR>;</OPERATOR>
			strokeDash <OPERATOR>=</OPERATOR> style<OPERATOR>;</OPERATOR>
			strokeCaps <OPERATOR>=</OPERATOR> caps<OPERATOR>;</OPERATOR>
			strokeJoints <OPERATOR>=</OPERATOR> joints<OPERATOR>;</OPERATOR>
			strokeMiter <OPERATOR>=</OPERATOR> miterLimit<OPERATOR>;</OPERATOR>
			setAlpha ( alpha<OPERATOR>,</OPERATOR> blendMode <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( nbPages <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> write ( sprintf (<STRING>'%.2f w'</STRING><OPERATOR>,</OPERATOR> thickness<OPERATOR>*</OPERATOR>k<CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write ( flatness <OPERATOR>+</OPERATOR> <STRING>" i "</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write ( style <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <OBJ>style</OBJ><OPERATOR>.</OPERATOR><OO>pattern</OO> <OPERATOR>:</OPERATOR> <STRING>'[] 0 d'</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( caps <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> write ( caps <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( joints <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> write ( joints <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write ( miterLimit <OPERATOR>+</OPERATOR> <STRING>" M"</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Sets the stroke color for different color spaces CMYK, RGB and DEVICEGRAY</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> setStrokeColor ( color<OPERATOR>:</OPERATOR>IColor<OPERATOR>,</OPERATOR> tint<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>100</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> op<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( color <KEYWORD>is</KEYWORD> RGBColor <CLOSER>)</CLOSER>
			{
				op <OPERATOR>=</OPERATOR> <STRING>"RG"</STRING><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> r<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> RGBColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>r</OO><OPERATOR>/</OPERATOR><NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> g<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> RGBColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>g</OO><OPERATOR>/</OPERATOR><NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> b<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> RGBColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>b</OO><OPERATOR>/</OPERATOR><NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				write ( r <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> g <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> b <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> op <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( color <KEYWORD>is</KEYWORD> CMYKColor <CLOSER>)</CLOSER>
			{	
				op <OPERATOR>=</OPERATOR> <STRING>"K"</STRING><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> c<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>cyan</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> m<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>magenta</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>yellow</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> k<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>black</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				write ( c <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> m <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> y <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> k <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> op <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( color <KEYWORD>is</KEYWORD> SpotColor <CLOSER>)</CLOSER>
			{
				<KEYWORD>if</KEYWORD> ( <OBJ>spotColors</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO> (color<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> <OBJ>spotColors</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( color <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write (sprintf(<STRING>'/CS%d CS %.3F SCN'</STRING><OPERATOR>,</OPERATOR> (color <KEYWORD>as</KEYWORD> SpotColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>i</OO><OPERATOR>,</OPERATOR> tint<OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> 
			{
				op <OPERATOR>=</OPERATOR> <STRING>"G"</STRING><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> gray<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> GrayColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>gray</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				write ( gray <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> op <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Sets the text color for different color spaces CMYK, RGB, and DEVICEGRAY</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> setTextColor ( color<OPERATOR>:</OPERATOR>IColor<OPERATOR>,</OPERATOR> tint<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>100</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> op<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( color <KEYWORD>is</KEYWORD> RGBColor <CLOSER>)</CLOSER>
			{
				op <OPERATOR>=</OPERATOR> <OPERATOR>!</OPERATOR>textRendering <OPERATOR>?</OPERATOR> <STRING>"rg"</STRING> <OPERATOR>:</OPERATOR> <STRING>"RG"</STRING>
				<KEYWORD>var</KEYWORD> r<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> RGBColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>r</OO><OPERATOR>/</OPERATOR><NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> g<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> RGBColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>g</OO><OPERATOR>/</OPERATOR><NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> b<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> RGBColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>b</OO><OPERATOR>/</OPERATOR><NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				addTextColor <OPERATOR>=</OPERATOR> r <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> g <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> b <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> op<OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( color <KEYWORD>is</KEYWORD> CMYKColor <CLOSER>)</CLOSER>
			{
				op <OPERATOR>=</OPERATOR> <OPERATOR>!</OPERATOR>textRendering <OPERATOR>?</OPERATOR> <STRING>"k"</STRING> <OPERATOR>:</OPERATOR> <STRING>"K"</STRING>
				<KEYWORD>var</KEYWORD> c<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>cyan</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> m<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>magenta</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>yellow</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> k<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>black</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				addTextColor <OPERATOR>=</OPERATOR> c <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> m <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> y <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> k <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> op<OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( color <KEYWORD>is</KEYWORD> SpotColor <CLOSER>)</CLOSER>
			{
				<KEYWORD>if</KEYWORD> ( <OBJ>spotColors</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO> (color<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> <OBJ>spotColors</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( color <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				addTextColor <OPERATOR>=</OPERATOR> sprintf(<STRING>'/CS%d cs %.3F scn'</STRING><OPERATOR>,</OPERATOR> (color <KEYWORD>as</KEYWORD> SpotColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>i</OO><OPERATOR>,</OPERATOR> tint<OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				colorFlag <OPERATOR>=</OPERATOR> (fillColor <OPERATOR>!=</OPERATOR> textColor<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD>
			{
				op <OPERATOR>=</OPERATOR> <OPERATOR>!</OPERATOR>textRendering <OPERATOR>?</OPERATOR> <STRING>"g"</STRING> <OPERATOR>:</OPERATOR> <STRING>"G"</STRING>
				<KEYWORD>var</KEYWORD> gray<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> GrayColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>gray</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				addTextColor <OPERATOR>=</OPERATOR> gray <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> op<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Sets the filling color for different color spaces CMYK/RGB/DEVICEGRAY</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> color </DOCPROPERTY>Color object, can be CMYKColor, GrayColor, or RGBColor</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to create a red rectangle in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginFill ( new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.drawRect ( new Rectangle ( 10, 26, 50, 25 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> beginFill ( color<OPERATOR>:</OPERATOR>IColor<OPERATOR>,</OPERATOR> tint<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>100</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			filled <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			fillColor <OPERATOR>=</OPERATOR> color<OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> op<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( color <KEYWORD>is</KEYWORD> RGBColor <CLOSER>)</CLOSER>
			{
				op <OPERATOR>=</OPERATOR> <STRING>"rg"</STRING><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> r<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> RGBColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>r</OO><OPERATOR>/</OPERATOR><NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> g<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> RGBColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>g</OO><OPERATOR>/</OPERATOR><NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> b<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> RGBColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>b</OO><OPERATOR>/</OPERATOR><NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				write ( r <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> g <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> b <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> op <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( color <KEYWORD>is</KEYWORD> CMYKColor <CLOSER>)</CLOSER>
			{
				op <OPERATOR>=</OPERATOR> <STRING>"k"</STRING><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> c<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>cyan</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> m<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>magenta</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>yellow</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> k<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> CMYKColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>black</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				write ( c <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> m <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> y <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> k <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> op <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( color <KEYWORD>is</KEYWORD> SpotColor <CLOSER>)</CLOSER>
			{
				<KEYWORD>if</KEYWORD> ( <OBJ>spotColors</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO> (color<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> <OBJ>spotColors</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( color <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write (sprintf(<STRING>'/CS%d cs %.3F scn'</STRING><OPERATOR>,</OPERATOR> (color <KEYWORD>as</KEYWORD> SpotColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>i</OO><OPERATOR>,</OPERATOR> tint<OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				colorFlag <OPERATOR>=</OPERATOR> (fillColor <OPERATOR>!=</OPERATOR> textColor<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD>
			{
				op <OPERATOR>=</OPERATOR> <STRING>"g"</STRING><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> gray<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <KEYWORD>as</KEYWORD> GrayColor<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>gray</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>;</OPERATOR>
				write ( gray <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> op <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The beginBitmapFill method fills a surface with a bitmap as a texture</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> bitmap </DOCPROPERTY>A flash.display.BitmapData object</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> matrix </DOCPROPERTY>A flash.geom.Matrix object</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to create a 100*100 rectangle filled with a bitmap texture :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var texture:BitmapData = new CustomBitmapData (0,0);</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginBitmapFill( texture );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.drawRect ( new Rectangle ( 0, 0, 100, 100 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> beginBitmapFill ( bitmap<OPERATOR>:</OPERATOR>BitmapData<OPERATOR>,</OPERATOR> matrix<OPERATOR>:</OPERATOR>Matrix<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			bitmapFilled <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			bitmapFillBuffer <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Shape(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>bitmapFillBuffer</OBJ><OPERATOR>.</OPERATOR><OO>graphics</OO><OPERATOR>.</OPERATOR><OO>beginBitmapFill</OO>( bitmap<OPERATOR>,</OPERATOR> matrix <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Ends all previous filling</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to create a red rectangle in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginFill ( new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.moveTo ( 10, 10 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 20, 90 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineTo ( 90, 50);</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.end()</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.endFill();</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> endFill (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>bitmapFilled <CLOSER>)</CLOSER> filled <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> bitmapFilled <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The drawRect method draws a rectangle shape</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> rect </DOCPROPERTY>A flash.geom.Rectange object</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to create a blue rectangle in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineStyle ( new RGBColor ( 0x990000 ), 1, .3, null, CapsStyle.ROUND, JointStyle.MITER );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginFill ( new RGBColor ( 0x009900 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.drawRect ( new Rectangle ( 20, 46, 100, 45 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> drawRect ( rect<OPERATOR>:</OPERATOR>Rectangle <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>bitmapFilled <CLOSER>)</CLOSER> 
			{
				<KEYWORD>var</KEYWORD> style<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> filled <OPERATOR>?</OPERATOR> <OBJ>Drawing</OBJ><OPERATOR>.</OPERATOR><OO>CLOSE_AND_FILL_AND_STROKE</OO> <OPERATOR>:</OPERATOR> <OBJ>Drawing</OBJ><OPERATOR>.</OPERATOR><OO>STROKE</OO><OPERATOR>;</OPERATOR>
				write (sprintf(<STRING>'%.2f %.2f %.2f %.2f re %s'</STRING><OPERATOR>,</OPERATOR> (<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>(<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> <OPERATOR>-</OPERATOR><OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> style<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> 
			{
				<OBJ>bitmapFillBuffer</OBJ><OPERATOR>.</OPERATOR><OO>graphics</OO><OPERATOR>.</OPERATOR><OO>drawRect</OO> ( <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				addImage(bitmapFillBuffer<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The drawRoundedRect method draws a rounded rectangle shape</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> rect </DOCPROPERTY>A flash.geom.Rectange object</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> ellipseWidth </DOCPROPERTY>Angle radius</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to create a rounded green rectangle in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineStyle ( new RGBColor ( 0x00FF00 ), 1, 0, .3, BlendMode.NORMAL, null, CapsStyle.ROUND, JointStyle.MITER );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginFill ( new RGBColor ( 0x009900 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.drawRoundRect ( new Rectangle ( 20, 46, 100, 45 ), 20 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> drawRoundRect ( rect<OPERATOR>:</OPERATOR>Rectangle<OPERATOR>,</OPERATOR> ellipseWidth<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>bitmapFilled <CLOSER>)</CLOSER>
			{
				drawRoundRectComplex ( rect<OPERATOR>,</OPERATOR> ellipseWidth<OPERATOR>,</OPERATOR> ellipseWidth<OPERATOR>,</OPERATOR> ellipseWidth<OPERATOR>,</OPERATOR> ellipseWidth <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD>
			{
				<OBJ>bitmapFillBuffer</OBJ><OPERATOR>.</OPERATOR><OO>graphics</OO><OPERATOR>.</OPERATOR><OO>drawRoundRect</OO>( <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>,</OPERATOR> ellipseWidth<OPERATOR>,</OPERATOR> ellipseWidth <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				addImage(bitmapFillBuffer<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The drawComplexRoundRect method draws a rounded rectangle shape</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> rect </DOCPROPERTY>A flash.geom.Rectange object</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> topLeftEllipseWidth </DOCPROPERTY>Angle radius</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> bottomLeftEllipseWidth </DOCPROPERTY>Angle radius</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> topRightEllipseWidth </DOCPROPERTY>Angle radius</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> bottomRightEllipseWidth </DOCPROPERTY>Angle radius</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to create a complex rounded green rectangle (different angles radius) in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineStyle ( new RGBColor ( 0x00FF00 ), 1, 0, .3 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginFill ( new RGBColor ( 0x007700 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.drawComplexRoundRect( new Rectangle ( 5, 5, 40, 40 ), 16, 16, 8, 8 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> drawRoundRectComplex ( rect<OPERATOR>:</OPERATOR>Rectangle<OPERATOR>,</OPERATOR> topLeftEllipseWidth<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> topRightEllipseWidth<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> bottomLeftEllipseWidth<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> bottomRightEllipseWidth<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>bitmapFilled <CLOSER>)</CLOSER>
			{
				<KEYWORD>var</KEYWORD> k<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> k<OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> hp<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> MyArc<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC> <OPERATOR>*</OPERATOR> (<OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>sqrt</OO>(<NUMERIC>2</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(sprintf(<STRING>'%.2f %.2f m'</STRING><OPERATOR>,</OPERATOR>(<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>+</OPERATOR>topLeftEllipseWidth<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(hp<OPERATOR>-</OPERATOR><OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k <CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> xc<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>+</OPERATOR><OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>-</OPERATOR>topRightEllipseWidth<OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> yc<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>+</OPERATOR>topRightEllipseWidth<OPERATOR>;</OPERATOR>
				write(sprintf(<STRING>'%.2f %.2f l'</STRING><OPERATOR>,</OPERATOR> xc<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(hp<OPERATOR>-</OPERATOR><OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k <CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				curve(xc <OPERATOR>+</OPERATOR> topRightEllipseWidth<OPERATOR>*</OPERATOR>MyArc<OPERATOR>,</OPERATOR> yc <OPERATOR>-</OPERATOR> topRightEllipseWidth<OPERATOR>,</OPERATOR> xc <OPERATOR>+</OPERATOR> topRightEllipseWidth<OPERATOR>,</OPERATOR> yc <OPERATOR>-</OPERATOR> topRightEllipseWidth<OPERATOR>*</OPERATOR>MyArc<OPERATOR>,</OPERATOR> xc <OPERATOR>+</OPERATOR> topRightEllipseWidth<OPERATOR>,</OPERATOR> yc<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				xc <OPERATOR>=</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>+</OPERATOR><OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>-</OPERATOR>bottomRightEllipseWidth <OPERATOR>;</OPERATOR>
				yc <OPERATOR>=</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>+</OPERATOR><OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>-</OPERATOR>bottomRightEllipseWidth<OPERATOR>;</OPERATOR>
				write(sprintf(<STRING>'%.2f %.2f l'</STRING><OPERATOR>,</OPERATOR>(<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>+</OPERATOR><OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(hp<OPERATOR>-</OPERATOR>yc<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				curve(xc <OPERATOR>+</OPERATOR> bottomRightEllipseWidth<OPERATOR>,</OPERATOR> yc <OPERATOR>+</OPERATOR> bottomRightEllipseWidth<OPERATOR>*</OPERATOR>MyArc<OPERATOR>,</OPERATOR> xc <OPERATOR>+</OPERATOR> bottomRightEllipseWidth<OPERATOR>*</OPERATOR>MyArc<OPERATOR>,</OPERATOR> yc <OPERATOR>+</OPERATOR> bottomRightEllipseWidth<OPERATOR>,</OPERATOR> xc<OPERATOR>,</OPERATOR> yc <OPERATOR>+</OPERATOR> bottomRightEllipseWidth<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				xc <OPERATOR>=</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>+</OPERATOR>bottomLeftEllipseWidth<OPERATOR>;</OPERATOR>
				yc <OPERATOR>=</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>+</OPERATOR><OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>-</OPERATOR>bottomLeftEllipseWidth<OPERATOR>;</OPERATOR>
				write(sprintf(<STRING>'%.2f %.2f l'</STRING><OPERATOR>,</OPERATOR>xc<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(hp<OPERATOR>-</OPERATOR>(<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>+</OPERATOR><OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				curve(xc <OPERATOR>-</OPERATOR> bottomLeftEllipseWidth<OPERATOR>*</OPERATOR>MyArc<OPERATOR>,</OPERATOR> yc <OPERATOR>+</OPERATOR> bottomLeftEllipseWidth<OPERATOR>,</OPERATOR> xc <OPERATOR>-</OPERATOR> bottomLeftEllipseWidth<OPERATOR>,</OPERATOR> yc <OPERATOR>+</OPERATOR> bottomLeftEllipseWidth<OPERATOR>*</OPERATOR>MyArc<OPERATOR>,</OPERATOR> xc <OPERATOR>-</OPERATOR> bottomLeftEllipseWidth<OPERATOR>,</OPERATOR> yc<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				xc <OPERATOR>=</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>+</OPERATOR>topLeftEllipseWidth<OPERATOR>;</OPERATOR>
				yc <OPERATOR>=</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>+</OPERATOR>topLeftEllipseWidth<OPERATOR>;</OPERATOR>
				write(sprintf(<STRING>'%.2f %.2f l'</STRING><OPERATOR>,</OPERATOR>(<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(hp<OPERATOR>-</OPERATOR>yc<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k <CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				curve(xc <OPERATOR>-</OPERATOR> topLeftEllipseWidth<OPERATOR>,</OPERATOR> yc <OPERATOR>-</OPERATOR> topLeftEllipseWidth<OPERATOR>*</OPERATOR>MyArc<OPERATOR>,</OPERATOR> xc <OPERATOR>-</OPERATOR> topLeftEllipseWidth<OPERATOR>*</OPERATOR>MyArc<OPERATOR>,</OPERATOR> yc <OPERATOR>-</OPERATOR> topLeftEllipseWidth<OPERATOR>,</OPERATOR> xc<OPERATOR>,</OPERATOR> yc <OPERATOR>-</OPERATOR> topLeftEllipseWidth<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> style<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> filled <OPERATOR>?</OPERATOR> <OBJ>Drawing</OBJ><OPERATOR>.</OPERATOR><OO>CLOSE_AND_FILL_AND_STROKE</OO> <OPERATOR>:</OPERATOR> <OBJ>Drawing</OBJ><OPERATOR>.</OPERATOR><OO>STROKE</OO><OPERATOR>;</OPERATOR>
				write(style<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> 
			{
				<OBJ>bitmapFillBuffer</OBJ><OPERATOR>.</OPERATOR><OO>graphics</OO><OPERATOR>.</OPERATOR><OO>drawRoundRectComplex</OO>( <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>,</OPERATOR> topLeftEllipseWidth<OPERATOR>,</OPERATOR> topRightEllipseWidth<OPERATOR>,</OPERATOR> bottomLeftEllipseWidth<OPERATOR>,</OPERATOR> bottomRightEllipseWidth <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				addImage(bitmapFillBuffer<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The drawEllipse method draws an ellipse</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY>X Position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY>Y Position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> radiusX </DOCPROPERTY>X Radius</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> radiusY </DOCPROPERTY>Y Radius</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to create a rounded red ellipse in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.lineStyle ( new RGBColor ( 0x990000 ), 1, .3, new DashedLine ([0, 1, 2, 6]), CapsStyle.NONE, JointStyle.ROUND );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginFill ( new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.drawEllipse( 45, 275, 40, 15 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> drawEllipse ( x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> radiusX<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> radiusY<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>bitmapFilled<CLOSER>)</CLOSER>
			{
				<KEYWORD>var</KEYWORD> style<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> filled <OPERATOR>?</OPERATOR> <OBJ>Drawing</OBJ><OPERATOR>.</OPERATOR><OO>CLOSE_AND_FILL_AND_STROKE</OO> <OPERATOR>:</OPERATOR> <OBJ>Drawing</OBJ><OPERATOR>.</OPERATOR><OO>STROKE</OO><OPERATOR>;</OPERATOR>
				
				<KEYWORD>var</KEYWORD> lx<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>*</OPERATOR>(<NUMERIC>1.41421356237309504880</NUMERIC><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>radiusX<OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> ly<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>*</OPERATOR>(<NUMERIC>1.41421356237309504880</NUMERIC><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>radiusY<OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> k<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> k<OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> h<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>;</OPERATOR>
				
				write(sprintf(<STRING>'%.2f %.2f m %.2f %.2f %.2f %.2f %.2f %.2f c'</STRING><OPERATOR>,</OPERATOR>
					(x<OPERATOR>+</OPERATOR>radiusX<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>
					(x<OPERATOR>+</OPERATOR>radiusX<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>(y<OPERATOR>-</OPERATOR>ly<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>
					(x<OPERATOR>+</OPERATOR>lx<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>(y<OPERATOR>-</OPERATOR>radiusY<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>
					x<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>(y<OPERATOR>-</OPERATOR>radiusY<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				write(sprintf(<STRING>'%.2f %.2f %.2f %.2f %.2f %.2f c'</STRING><OPERATOR>,</OPERATOR>
					(x<OPERATOR>-</OPERATOR>lx<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>(y<OPERATOR>-</OPERATOR>radiusY<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>
					(x<OPERATOR>-</OPERATOR>radiusX<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>(y<OPERATOR>-</OPERATOR>ly<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>
					(x<OPERATOR>-</OPERATOR>radiusX<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				write(sprintf(<STRING>'%.2f %.2f %.2f %.2f %.2f %.2f c'</STRING><OPERATOR>,</OPERATOR>
					(x<OPERATOR>-</OPERATOR>radiusX<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>(y<OPERATOR>+</OPERATOR>ly<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>
					(x<OPERATOR>-</OPERATOR>lx<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>(y<OPERATOR>+</OPERATOR>radiusY<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>
					x<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>(y<OPERATOR>+</OPERATOR>radiusY<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				write(sprintf(<STRING>'%.2f %.2f %.2f %.2f %.2f %.2f c %s'</STRING><OPERATOR>,</OPERATOR>
					(x<OPERATOR>+</OPERATOR>lx<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>(y<OPERATOR>+</OPERATOR>radiusY<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>
					(x<OPERATOR>+</OPERATOR>radiusX<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>(y<OPERATOR>+</OPERATOR>ly<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>
					(x<OPERATOR>+</OPERATOR>radiusX<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(h<OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>
					style<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD>
			{
				<OBJ>bitmapFillBuffer</OBJ><OPERATOR>.</OPERATOR><OO>graphics</OO><OPERATOR>.</OPERATOR><OO>drawEllipse</OO>( x<OPERATOR>,</OPERATOR> y<OPERATOR>,</OPERATOR> radiusX<OPERATOR>,</OPERATOR> radiusY <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				addImage(bitmapFillBuffer<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> x<OPERATOR>,</OPERATOR> y<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The drawCircle method draws a circle</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY>X Position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY>Y Position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> radius </DOCPROPERTY>Circle Radius</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to create a rounded red ellipse in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginFill ( new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.drawCircle ( 30, 180, 20 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> drawCircle( x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> radius<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			drawEllipse ( x<OPERATOR>,</OPERATOR> y<OPERATOR>,</OPERATOR> radius<OPERATOR>,</OPERATOR> radius <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The drawPolygone method draws a polygone</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> points </DOCPROPERTY>Array of points</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to create a polygone with a few points :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.beginFill ( new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.drawPolygone ( [89, 40, 20, 90, 40, 50, 10, 60, 70, 90] );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> drawPolygone ( points<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>points</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> pos<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>while</KEYWORD> ( i <OPERATOR>&lt;</OPERATOR> lng <CLOSER>)</CLOSER>
			{
				pos <OPERATOR>=</OPERATOR> <TYPE>int</TYPE>(i<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				i <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>?</OPERATOR> moveTo ( points[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> points[pos<CLOSER>]</CLOSER> <CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> lineTo ( points[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> points[pos<CLOSER>]</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				i<OPERATOR>+=</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			end(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF Visibility API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* setVisible()</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setVisible (visible<OPERATOR>:</OPERATOR><TYPE>String</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( visibility <OPERATOR>!=</OPERATOR> <OBJ>Visibility</OBJ><OPERATOR>.</OPERATOR><OO>ALL</OO> <CLOSER>)</CLOSER>
				write(<STRING>'EMC'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( visible <OPERATOR>==</OPERATOR> <OBJ>Visibility</OBJ><OPERATOR>.</OPERATOR><OO>PRINT</OO> <CLOSER>)</CLOSER>
				write(<STRING>'/OC /OC1 BDC'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD>( visible <OPERATOR>==</OPERATOR> <OBJ>Visibility</OBJ><OPERATOR>.</OPERATOR><OO>SCREEN</OO> <CLOSER>)</CLOSER>
			write(<STRING>'/OC /OC2 BDC'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( visible <OPERATOR>!=</OPERATOR> <OBJ>Visibility</OBJ><OPERATOR>.</OPERATOR><OO>ALL</OO> <CLOSER>)</CLOSER>
				<KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE>(<STRING>'Incorrect visibility: '</STRING><OPERATOR>+</OPERATOR>visible<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			visibility <OPERATOR>=</OPERATOR> visible<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF Interactive API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* addNote()</COMMENT>
<COMMENT>		* addTransition()</COMMENT>
<COMMENT>		* addBookmark()</COMMENT>
<COMMENT>		* addLink()</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you add a text annotation to the current page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY>Note X position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY>Note Y position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> width </DOCPROPERTY>Note width</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> height </DOCPROPERTY>Note height</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> text </DOCPROPERTY>Text for the note</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a note annotation in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addNote (100, 75, 50, 50, "A note !");</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addTextNote ( x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> width<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> text<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>"A note !"</STRING> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> rectangle<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> x<OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> (((<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> (height<OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER> <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> ((x<OPERATOR>*</OPERATOR>k<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> (width<OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER> <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>;</OPERATOR>
			<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>annotations</OO> <OPERATOR>+=</OPERATOR> ( <STRING>'&lt;&lt;/Type /Annot /Name /Help /Border [0 0 1] /Subtype /Text /Rect [ '</STRING><OPERATOR>+</OPERATOR>rectangle<OPERATOR>+</OPERATOR><STRING>' ] /Contents ('</STRING><OPERATOR>+</OPERATOR>text<OPERATOR>+</OPERATOR><STRING>')&gt;&gt;'</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you add a stamp annotation to the current page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> style </DOCPROPERTY>Stamp style can be StampStyle.CONFIDENTIAL, StampStyle.FOR_PUBLIC_RELEASE, etc.</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY>Note X position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY>Note Y position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> width </DOCPROPERTY>Note width</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> height </DOCPROPERTY>Note height</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a stamp annotation in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addStampNote ( StampStyle.CONFIDENTIAL, 15, 15, 50, 50 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addStampNote ( style<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> width<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> rectangle<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> x<OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> (((<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> (height<OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER> <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> ((x<OPERATOR>*</OPERATOR>k<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> (width<OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER> <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>;</OPERATOR>
			<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>annotations</OO> <OPERATOR>+=</OPERATOR> ( <STRING>'&lt;&lt;/Type /Annot /Name /'</STRING><OPERATOR>+</OPERATOR>style<OPERATOR>+</OPERATOR><STRING>' /Subtype /Stamp /Rect [ '</STRING><OPERATOR>+</OPERATOR>rectangle<OPERATOR>+</OPERATOR><STRING>' ]&gt;&gt;'</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you add a bookmark</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> text </DOCPROPERTY>Text appearing in the outline panel</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> level </DOCPROPERTY>Specify the bookmark's level</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY>Position in the current page to go</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> color </DOCPROPERTY>RGBColor object</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a bookmark for the current page just added :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addPage();</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addBookmark("A page bookmark");</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a bookmark with a specific color (red) for the current page just added :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addPage();</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addBookmark("A page bookmark", 0, 0, new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * You can also add sublevel bookmarks with the following code, using the level parameter :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addPage();</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addBookmark("Page 1", 0, 0, new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addBookmark("Page 1 sublink", 1, 0, new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addBookmark ( text<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> level<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> color<OPERATOR>:</OPERATOR>RGBColor<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( color <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> color <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> RGBColor ( <NUMERIC>0x000000</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD>( y <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> y <OPERATOR>=</OPERATOR> getY(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>outlines</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( <KEYWORD>new</KEYWORD> Outline ( text<OPERATOR>,</OPERATOR> level<OPERATOR>,</OPERATOR> nbPages<OPERATOR>,</OPERATOR> y<OPERATOR>,</OPERATOR> <OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>r</OO><OPERATOR>,</OPERATOR> <OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>g</OO><OPERATOR>,</OPERATOR> <OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>b</OO> <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you add clickable link to a specific position</DOCCOMMENT>
<DOCCOMMENT>		 * Link can be internal (document level navigation) or external (HTTP)</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY>Page Format, can be Size.A3, Size.A4, Size.A5, Size.LETTER or Size.LEGAL</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> width </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> height </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> link </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> highlight </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add an invisible clickable HTTP link in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addLink ( 70, 4, 60, 16, new HTTPLink ("http://www.alivepdf.org") );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add an invisible clickable internal link (document level navigation) in the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addLink ( 70, 4, 60, 16, new InternalLink (2, 10) );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * By default, the link highlight mode (when the mouse is pressed over the link) is inverted.</DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how change the visual state of the link when pressed :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addLink ( 70, 4, 60, 16, new InternalLink (2, 10), Highlight.OUTLINE );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * To make the link invisible even when clicked, just pass Highlight.NONE as below :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addLink ( 70, 4, 60, 16, new InternalLink (2, 10), Highlight.NONE );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addLink ( x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> width<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> link<OPERATOR>:</OPERATOR>ILink<OPERATOR>,</OPERATOR> highlight<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>"I"</STRING> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> rectangle<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> x<OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>y<OPERATOR>-</OPERATOR>height<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> (x<OPERATOR>+</OPERATOR>width<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>;</OPERATOR>
			
			<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>annotations</OO> <OPERATOR>+=</OPERATOR> <STRING>"&lt;&lt;/Type /Annot /Subtype /Link /Rect ["</STRING><OPERATOR>+</OPERATOR>rectangle<OPERATOR>+</OPERATOR><STRING>"] /Border [0 0 0] /H /"</STRING><OPERATOR>+</OPERATOR>highlight<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( link <KEYWORD>is</KEYWORD> HTTPLink <CLOSER>)</CLOSER> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>annotations</OO> <OPERATOR>+=</OPERATOR> <STRING>"/A &lt;&lt;/S /URI /URI "</STRING><OPERATOR>+</OPERATOR>escapeString((link <KEYWORD>as</KEYWORD> HTTPLink<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>link</OO><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>"&gt;&gt;&gt;&gt;"</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> 
			{
				<KEYWORD>var</KEYWORD> currentLink<OPERATOR>:</OPERATOR>InternalLink <OPERATOR>=</OPERATOR> link <KEYWORD>as</KEYWORD> InternalLink<OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> h<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> orientationChanges[<OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>page</OO><CLOSER>]</CLOSER> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>wPt</OO> <OPERATOR>:</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>hPt</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( <OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>rectangle</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> 
					<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>annotations</OO> <OPERATOR>+=</OPERATOR> sprintf(<STRING>'/Dest [%d 0 R /FitR %.2f %.2f %.2f %.2f]&gt;&gt;'</STRING><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>+</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR><OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>page</OO><OPERATOR>,</OPERATOR> <OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>rectangle</OO><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR><OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>rectangle</OO><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>-</OPERATOR><OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>rectangle</OO><OPERATOR>.</OPERATOR><OO>height</OO><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> (<OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>rectangle</OO><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>+</OPERATOR><OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>rectangle</OO><OPERATOR>.</OPERATOR><OO>width</OO><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR><OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>rectangle</OO><OPERATOR>.</OPERATOR><OO>y</OO><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>fit</OO> <CLOSER>)</CLOSER> 
					<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>annotations</OO> <OPERATOR>+=</OPERATOR> sprintf(<STRING>'/Dest [%d 0 R /XYZ 0 %.2f null]&gt;&gt;'</STRING><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>+</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR><OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>page</OO><OPERATOR>,</OPERATOR>(<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR><OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>fit</OO> <CLOSER>)</CLOSER> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>annotations</OO> <OPERATOR>+=</OPERATOR> sprintf(<STRING>'/Dest [%d 0 R /Fit]&gt;&gt;'</STRING><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>+</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR><OBJ>currentLink</OBJ><OPERATOR>.</OPERATOR><OO>page</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Returns an InternalLink object linked to the current page at the current Y in the page </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> InternalLink</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add an internal link using the getInternalLink method :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var link:InternalLink = myPDF.getCurrentInternalLink();</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.gotoPage(3);	</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addCell(40, 8, "Here is a link to another page", 0, 0, "", 0, link);		</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getCurrentInternalLink (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR>InternalLink
		{	
			<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> InternalLink( totalPages<OPERATOR>,</OPERATOR> currentY <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you add a transition between each PDF page</DOCCOMMENT>
<DOCCOMMENT>		 * Note : PDF must be shown in fullscreen to see the transitions, use the setDisplayMode method with the PageMode.FULL_SCREEN parameter</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> style </DOCPROPERTY>Transition style, can be Transition.SPLIT, Transition.BLINDS, BLINDS.BOX, Transition.WIPE, etc.</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> duration </DOCPROPERTY>The transition duration</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> dimension </DOCPROPERTY>The dimension in which the the specified transition effect occurs</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> motionDirection </DOCPROPERTY>The motion's direction for the specified transition effect</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> transitionDirection </DOCPROPERTY>The direction in which the specified transition effect moves</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a 4 seconds "Wipe" transition between the first and second page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt; </DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addPage();  </DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addTransition (Transition.WIPE, 4, Dimension.VERTICAL);</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addTransition ( style<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'R'</STRING><OPERATOR>,</OPERATOR> duration<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> dimension<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'H'</STRING><OPERATOR>,</OPERATOR> motionDirection<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'I'</STRING><OPERATOR>,</OPERATOR> transitionDirection<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>addTransition</OO> ( style<OPERATOR>,</OPERATOR> duration<OPERATOR>,</OPERATOR> dimension<OPERATOR>,</OPERATOR> motionDirection<OPERATOR>,</OPERATOR> transitionDirection <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you control the way the document is to be presented on the screen or in print.</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> toolbar </DOCPROPERTY>Toolbar behavior</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> menubar </DOCPROPERTY>Menubar behavior</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> windowUI </DOCPROPERTY>WindowUI behavior</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> fitWindow </DOCPROPERTY>Specify whether to resize the document's window to fit the size of the first displayed page.</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> centeredWindow </DOCPROPERTY>Specify whether to position the document's window in the center of the screen.</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> displayTitle </DOCPROPERTY>Specify whether the window's title bar should display the document title taken from the value passed to the setTitle method</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to present the document centered on the screen with no toolbars :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setViewerPreferences (ToolBar.HIDE, MenuBar.HIDE, WindowUI.HIDE, FitWindow.DEFAULT, CenterWindow.CENTERED);</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setViewerPreferences ( toolbar<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'false'</STRING><OPERATOR>,</OPERATOR> menubar<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'false'</STRING><OPERATOR>,</OPERATOR> windowUI<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'false'</STRING><OPERATOR>,</OPERATOR> fitWindow<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'false'</STRING><OPERATOR>,</OPERATOR> centeredWindow<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'false'</STRING><OPERATOR>,</OPERATOR> displayTitle<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'false'</STRING> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			viewerPreferences <OPERATOR>=</OPERATOR> <STRING>'&lt;&lt; /HideToolbar '</STRING><OPERATOR>+</OPERATOR>toolbar<OPERATOR>+</OPERATOR><STRING>' /HideMenubar '</STRING><OPERATOR>+</OPERATOR>menubar<OPERATOR>+</OPERATOR><STRING>' /HideWindowUI '</STRING><OPERATOR>+</OPERATOR>windowUI<OPERATOR>+</OPERATOR><STRING>' /FitWindow '</STRING><OPERATOR>+</OPERATOR>fitWindow<OPERATOR>+</OPERATOR><STRING>' /CenterWindow '</STRING><OPERATOR>+</OPERATOR>centeredWindow<OPERATOR>+</OPERATOR><STRING>' /DisplayDocTitle '</STRING><OPERATOR>+</OPERATOR>displayTitle<OPERATOR>+</OPERATOR><STRING>' &gt;&gt;'</STRING><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF printing API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> insertSpotColors(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>for</KEYWORD> each( <KEYWORD>var</KEYWORD> color<OPERATOR>:</OPERATOR>SpotColor <KEYWORD>in</KEYWORD> spotColors <CLOSER>)</CLOSER>
			{
				newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'[/Separation /'</STRING><OPERATOR>+</OPERATOR>findAndReplace(<STRING>' '</STRING><OPERATOR>,</OPERATOR> <STRING>'#20'</STRING><OPERATOR>,</OPERATOR> <OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'/DeviceCMYK &lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'/Range [0 1 0 1 0 1 0 1] /C0 [0 0 0 0] '</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(sprintf(<STRING>'/C1 [%.3F %.3F %.3F %.3F] '</STRING><OPERATOR>,</OPERATOR><OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>color</OO><OPERATOR>.</OPERATOR><OO>cyan</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>,</OPERATOR> <OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>color</OO><OPERATOR>.</OPERATOR><OO>magenta</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>,</OPERATOR> <OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>color</OO><OPERATOR>.</OPERATOR><OO>yellow</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><OPERATOR>,</OPERATOR> <OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>color</OO><OPERATOR>.</OPERATOR><OO>black</OO><OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'/FunctionType 2 /Domain [0 1] /N 1&gt;&gt;]'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>n</OO> <OPERATOR>=</OPERATOR> n<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF font API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* addFont()</COMMENT>
<COMMENT>		* removeFont()</COMMENT>
<COMMENT>		* setFont()</COMMENT>
<COMMENT>		* setFontSize()</COMMENT>
<COMMENT>		* getTotalFonts()</COMMENT>
<COMMENT>		* totalFonts</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> addFont ( font<OPERATOR>:</OPERATOR>IFont <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR>IFont
		{
			pushedFontName <OPERATOR>=</OPERATOR> <OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>fonts</OBJ><OPERATOR>.</OPERATOR><OO>some</OO>(filterCallback<CLOSER>)</CLOSER> <CLOSER>)</CLOSER> <OBJ>fonts</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( font <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( font <KEYWORD>is</KEYWORD> EmbeddedFont <CLOSER>)</CLOSER> totalEmbeddedFonts<OPERATOR>++;</OPERATOR>
			
			fontFamily <OPERATOR>=</OPERATOR> <OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> addedFont<OPERATOR>:</OPERATOR>EmbeddedFont<OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( font <KEYWORD>is</KEYWORD> EmbeddedFont <CLOSER>)</CLOSER>
			{
				addedFont <OPERATOR>=</OPERATOR> font <KEYWORD>as</KEYWORD> EmbeddedFont<OPERATOR>;</OPERATOR>	
				
				<KEYWORD>if</KEYWORD> ( <OBJ>addedFont</OBJ><OPERATOR>.</OPERATOR><OO>differences</OO> <CLOSER>)</CLOSER>
				{
					d <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					nb <OPERATOR>=</OPERATOR> <OBJ>differences</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
					<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> j<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;=</OPERATOR> nb <OPERATOR>;</OPERATOR>j<OPERATOR>++</OPERATOR> <CLOSER>)</CLOSER>
					{
						<KEYWORD>if</KEYWORD>(differences[j<CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <OBJ>addedFont</OBJ><OPERATOR>.</OPERATOR><OO>differences</OO><CLOSER>)</CLOSER>
						{
							d<OPERATOR>=</OPERATOR>j<OPERATOR>;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						<CLOSER>}</CLOSER>
					<CLOSER>}</CLOSER>
					<KEYWORD>if</KEYWORD>( d <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER>
					{
						d <OPERATOR>=</OPERATOR> nb<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
						differences[d<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>addedFont</OBJ><OPERATOR>.</OPERATOR><OO>differences</OO><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
					fonts[<OBJ>fonts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>differences</OO> <OPERATOR>=</OPERATOR> d<OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				
			<CLOSER>}</CLOSER>
			
			<KEYWORD>return</KEYWORD> font<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> filterCallback ( element<OPERATOR>:</OPERATOR>IFont<OPERATOR>,</OPERATOR> index<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> arr<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE>
		{	
			<KEYWORD>return</KEYWORD> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>name</OO> <OPERATOR>==</OPERATOR> pushedFontName<OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you set a specific font</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> A </DOCPROPERTY>font, can be a core font (org.alivepdf.fonts.CoreFont), or an embedded font (org.alivepdf.fonts.EmbeddedFont)</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> size </DOCPROPERTY>Any font size</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> underlined </DOCPROPERTY>if text should be underlined</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to set the Helvetica font, with a bold style :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var font:CoreFont = new CoreFont ( FontFamily.HELVETICA_BOLD );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setFont( font );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setFont ( font<OPERATOR>:</OPERATOR>IFont<OPERATOR>,</OPERATOR> size<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> underlined<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>=</OPERATOR><KEYWORD>false</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			pushedFontName <OPERATOR>=</OPERATOR> <OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> result<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <OBJ>fonts</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>(filterCallback<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			currentFont <OPERATOR>=</OPERATOR> <OBJ>result</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>?</OPERATOR> result[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR> addFont( font <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>		
			
			underline <OPERATOR>=</OPERATOR> underlined<OPERATOR>;</OPERATOR>
			fontFamily <OPERATOR>=</OPERATOR> <OBJ>currentFont</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>;</OPERATOR>
			fontSizePt <OPERATOR>=</OPERATOR> size<OPERATOR>;</OPERATOR>
			fontSize <OPERATOR>=</OPERATOR> size<OPERATOR>/</OPERATOR>k<OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( nbPages <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> write (sprintf(<STRING>'BT /F%d %.2f Tf ET'</STRING><OPERATOR>,</OPERATOR> <OBJ>currentFont</OBJ><OPERATOR>.</OPERATOR><OO>id</OO><OPERATOR>,</OPERATOR> fontSizePt<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you set a new size for the current font</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> size </DOCPROPERTY>Font size</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to se the current font to 18 :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setFontSize( 18 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> setFontSize ( size<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			<KEYWORD>if</KEYWORD>( fontSizePt <OPERATOR>==</OPERATOR> size <CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
			fontSizePt <OPERATOR>=</OPERATOR> size<OPERATOR>;</OPERATOR>
			fontSize <OPERATOR>=</OPERATOR> size<OPERATOR>/</OPERATOR>k<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD>( nbPages <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> write (sprintf(<STRING>'BT /F%d %.2f Tf ET'</STRING><OPERATOR>,</OPERATOR> <OBJ>currentFont</OBJ><OPERATOR>.</OPERATOR><OO>id</OO><OPERATOR>,</OPERATOR> fontSizePt<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you remove an embedded font from the PDF</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> font </DOCPROPERTY>The embedded font</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to remove an embedded font :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.removeFont( myEmbeddedFont );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> removeFont ( font<OPERATOR>:</OPERATOR>IFont <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( <OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>==</OPERATOR> <OBJ>FontType</OBJ><OPERATOR>.</OPERATOR><OO>CORE</OO> <CLOSER>)</CLOSER> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE>(<STRING>'The font you have passed is a Core font. Core fonts cannot be removed as they are not embedded in the PDF.'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> position<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>fonts</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(font<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( position <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> <OBJ>fonts</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>(position<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE> (<STRING>"Font cannot be found."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you retrieve the total number of fonts used in the PDF document</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> int Number of fonts (embedded or not) used in the PDF</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to retrieve the number of fonts used in the PDF document :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var totalFonts:int = myPDF.totalFonts;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> get totalFonts(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>int</TYPE>
		{
			<KEYWORD>return</KEYWORD> <OBJ>fonts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you retrieve the fonts used in the PDF document</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Array An Array of fonts objects (CoreFont, EmbeddedFont)</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to retrieve the fonts :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var fonts:Array = myPDF.getFonts();</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getFonts(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Array</TYPE>
		{
			<KEYWORD>return</KEYWORD> fonts<OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF text API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* addText()</COMMENT>
<COMMENT>		* textStyle()</COMMENT>
<COMMENT>		* addCell()</COMMENT>
<COMMENT>		* addMultiCell()</COMMENT>
<COMMENT>		* writeText()</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you set some text to any position on the page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> text </DOCPROPERTY>The text to add</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY>X position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY>Y position</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to set some text to a specific place :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addText ('Some simple text added !', 14, 110);</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addText ( text<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>	
		{
			<KEYWORD>var</KEYWORD> s<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> sprintf(<STRING>'BT %.2f %.2f Td (%s) Tj ET'</STRING><OPERATOR>,</OPERATOR>x<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> escapeIt(text<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (underline <OPERATOR>&amp;&amp;</OPERATOR> text <OPERATOR>!=</OPERATOR><STRING>''</STRING><CLOSER>)</CLOSER> s <OPERATOR>+=</OPERATOR> <STRING>' '</STRING><OPERATOR>+</OPERATOR>doUnderline(x<OPERATOR>,</OPERATOR>y<OPERATOR>,</OPERATOR>text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (colorFlag<CLOSER>)</CLOSER> s <OPERATOR>=</OPERATOR> <STRING>'q '</STRING> <OPERATOR>+</OPERATOR> addTextColor <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> s <OPERATOR>+</OPERATOR><STRING>' Q'</STRING><OPERATOR>;</OPERATOR>
			write(s<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Sets the text style</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> color </DOCPROPERTY>Color object, can be CMYKColor, GrayColor, or RGBColor</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> alpha </DOCPROPERTY>Text opacity</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> rendering </DOCPROPERTY>pRendering Specify the text rendering mode</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> wordSpace </DOCPROPERTY>Spaces between each words</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> characterSpace </DOCPROPERTY>Spaces between each characters</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> scale </DOCPROPERTY>Text scaling</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> leading </DOCPROPERTY>Text leading</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to set a specific black text style with full opacity :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.textStyle ( new RGBColor ( 0x000000 ), 1 ); </DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> textStyle ( color<OPERATOR>:</OPERATOR>IColor<OPERATOR>,</OPERATOR> alpha<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> rendering<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> wordSpace<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> characterSpace<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> scale<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>100</NUMERIC><OPERATOR>,</OPERATOR> leading<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			textColor <OPERATOR>=</OPERATOR> color<OPERATOR>;</OPERATOR>
			textAlpha <OPERATOR>=</OPERATOR> alpha<OPERATOR>;</OPERATOR>
			textWordSpace <OPERATOR>=</OPERATOR> wordSpace<OPERATOR>;</OPERATOR>
			textSpace <OPERATOR>=</OPERATOR> characterSpace<OPERATOR>;</OPERATOR>
			textScale <OPERATOR>=</OPERATOR> scale<OPERATOR>;</OPERATOR>
			textLeading <OPERATOR>=</OPERATOR> leading<OPERATOR>;</OPERATOR>
			
			write ( sprintf ( <STRING>'%d Tr'</STRING><OPERATOR>,</OPERATOR> textRendering <OPERATOR>=</OPERATOR> rendering <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			setTextColor ( color <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			setAlpha ( alpha <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write ( wordSpace <OPERATOR>+</OPERATOR> <STRING>' Tw '</STRING> <OPERATOR>+</OPERATOR> characterSpace <OPERATOR>+</OPERATOR> <STRING>' Tc '</STRING> <OPERATOR>+</OPERATOR> scale <OPERATOR>+</OPERATOR> <STRING>' Tz '</STRING> <OPERATOR>+</OPERATOR> leading <OPERATOR>+</OPERATOR> <STRING>' TL '</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			colorFlag <OPERATOR>=</OPERATOR> ( fillColor <OPERATOR>!=</OPERATOR> addTextColor <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Add a cell with some text to the current page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> width </DOCPROPERTY>Cell width</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> height </DOCPROPERTY>Cell height</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> text </DOCPROPERTY>Text to add into the cell</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> ln </DOCPROPERTY>Sets the new position after cell is drawn, default value is 0</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> align </DOCPROPERTY>Lets you center or align the text into the cell</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> fill </DOCPROPERTY>Lets you specify if the cell is colored (1) or transparent (0)</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> link </DOCPROPERTY>Link can be internal to do document level navigation (InternalLink) or external (HTTPLink)</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Page</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to write some text within a cell :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var font:CoreFont = new CoreFont ( FontFamily.HELVETICA_BOLD );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setFont( font );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.textStyle ( new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addCell(50,10,'Some text into a cell !',1,1);</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to write some clickable text within a cell :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var font:CoreFont = new CoreFont ( FontFamily.HELVETICA_BOLD );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setFont( font );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.textStyle ( new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addCell(50,10,'A clickable cell !', 1, 1, null, 0, new HTTPLink ("http://www.alivepdf.org") );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addCell ( width<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> text<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR> border<OPERATOR>:*=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> ln<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> align<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR> fill<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> link<OPERATOR>:</OPERATOR>ILink<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD>( currentY <OPERATOR>+</OPERATOR> height <OPERATOR>&gt;</OPERATOR> pageBreakTrigger <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>inHeader <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>inFooter <OPERATOR>&amp;&amp;</OPERATOR> acceptPageBreak(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER>
			{
				<KEYWORD>var</KEYWORD> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> currentX<OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD>( ws<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER>
				{
					ws<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					write(<STRING>'0 Tw'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				addPage( <KEYWORD>new</KEYWORD> Page ( currentOrientation<OPERATOR>,</OPERATOR> defaultUnit<OPERATOR>,</OPERATOR> defaultSize <OPERATOR>,</OPERATOR><OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>rotation</OO> <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				currentX <OPERATOR>=</OPERATOR> x<OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>( ws<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> write(sprintf(<STRING>'%.3f Tw'</STRING><OPERATOR>,</OPERATOR>ws<OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>if</KEYWORD> ( <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO> <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO><OPERATOR>-</OPERATOR>rightMargin<OPERATOR>-</OPERATOR>currentX<OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> s<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>String</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> op<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD>( fill <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>||</OPERATOR> border <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER>
			{
				<KEYWORD>if</KEYWORD> ( fill <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> op <OPERATOR>=</OPERATOR> ( border <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>Drawing</OBJ><OPERATOR>.</OPERATOR><OO>FILL_AND_STROKE</OO> <OPERATOR>:</OPERATOR> <OBJ>Drawing</OBJ><OPERATOR>.</OPERATOR><OO>FILL</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>else</KEYWORD> op <OPERATOR>=</OPERATOR> <OBJ>Drawing</OBJ><OPERATOR>.</OPERATOR><OO>STROKE</OO><OPERATOR>;</OPERATOR>
				s <OPERATOR>=</OPERATOR> sprintf(<STRING>'%.2f %.2f %.2f %.2f re %s '</STRING><OPERATOR>,</OPERATOR> currentX<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> (<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>currentY<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> width<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> <OPERATOR>-</OPERATOR>height<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> op<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				endFill(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>if</KEYWORD> ( border <KEYWORD>is</KEYWORD> <TYPE>String</TYPE> <CLOSER>)</CLOSER>
			{
				<KEYWORD>var</KEYWORD> borderBuffer<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <TYPE>String</TYPE> ( border <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> currentPageHeight<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>( <OBJ>borderBuffer</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO> (<OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>LEFT</OO><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> s<OPERATOR>+=</OPERATOR>sprintf(<STRING>'%.2f %.2f m %.2f %.2f l S '</STRING><OPERATOR>,</OPERATOR>currentX<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentPageHeight<OPERATOR>-</OPERATOR>currentY<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>currentX<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentPageHeight<OPERATOR>-</OPERATOR>(currentY<OPERATOR>+</OPERATOR>height<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>( <OBJ>borderBuffer</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO> (<OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>TOP</OO><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> s<OPERATOR>+=</OPERATOR>sprintf(<STRING>'%.2f %.2f m %.2f %.2f l S '</STRING><OPERATOR>,</OPERATOR>currentX<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentPageHeight<OPERATOR>-</OPERATOR>currentY<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentX<OPERATOR>+</OPERATOR>width<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentPageHeight<OPERATOR>-</OPERATOR>currentY<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>( <OBJ>borderBuffer</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO> (<OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>RIGHT</OO><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> s<OPERATOR>+=</OPERATOR>sprintf(<STRING>'%.2f %.2f m %.2f %.2f l S '</STRING><OPERATOR>,</OPERATOR>(currentX<OPERATOR>+</OPERATOR>width<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentPageHeight<OPERATOR>-</OPERATOR>currentY<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentX<OPERATOR>+</OPERATOR>width<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentPageHeight<OPERATOR>-</OPERATOR>(currentY<OPERATOR>+</OPERATOR>height<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>( <OBJ>borderBuffer</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO> (<OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>BOTTOM</OO><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> s<OPERATOR>+=</OPERATOR>sprintf(<STRING>'%.2f %.2f m %.2f %.2f l S '</STRING><OPERATOR>,</OPERATOR>currentX<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentPageHeight<OPERATOR>-</OPERATOR>(currentY<OPERATOR>+</OPERATOR>height<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentX<OPERATOR>+</OPERATOR>width<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(currentPageHeight<OPERATOR>-</OPERATOR>(currentY<OPERATOR>+</OPERATOR>height<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>if</KEYWORD> ( text <OPERATOR>!==</OPERATOR> <STRING>''</STRING> <CLOSER>)</CLOSER>
			{
				<KEYWORD>var</KEYWORD> dx<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( align <OPERATOR>==</OPERATOR> <OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>RIGHT</OO> <CLOSER>)</CLOSER> dx <OPERATOR>=</OPERATOR> width<OPERATOR>-</OPERATOR>currentMargin<OPERATOR>-</OPERATOR>getStringWidth(text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( align <OPERATOR>==</OPERATOR> <OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>CENTER</OO> <CLOSER>)</CLOSER> dx <OPERATOR>=</OPERATOR> (width<OPERATOR>-</OPERATOR>getStringWidth(text<CLOSER>))</CLOSER><OPERATOR>*.</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>else</KEYWORD> dx <OPERATOR>=</OPERATOR> currentMargin<OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> (colorFlag<CLOSER>)</CLOSER> s <OPERATOR>+=</OPERATOR> <STRING>'q '</STRING><OPERATOR>+</OPERATOR>addTextColor<OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>;</OPERATOR>
				
				<KEYWORD>var</KEYWORD> txt2<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> findAndReplace(<STRING>')'</STRING><OPERATOR>,</OPERATOR><STRING>'<ESC>\\</ESC>)'</STRING><OPERATOR>,</OPERATOR>findAndReplace(<STRING>'('</STRING><OPERATOR>,</OPERATOR><STRING>'<ESC>\\</ESC>('</STRING><OPERATOR>,</OPERATOR>findAndReplace(<STRING>'<ESC>\\</ESC>'</STRING><OPERATOR>,</OPERATOR><STRING>'<ESC>\\</ESC><ESC>\\</ESC>'</STRING><OPERATOR>,</OPERATOR>text<CLOSER>)))</CLOSER><OPERATOR>;</OPERATOR>
				s <OPERATOR>+=</OPERATOR> sprintf(<STRING>'BT %.2f %.2f Td (%s) Tj ET'</STRING><OPERATOR>,</OPERATOR>(currentX<OPERATOR>+</OPERATOR>dx<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>(currentY<OPERATOR>+.</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>*</OPERATOR>height<OPERATOR>+.</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>*</OPERATOR>fontSize<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>txt2<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> (underline<CLOSER>)</CLOSER> s <OPERATOR>+=</OPERATOR> <STRING>' '</STRING><OPERATOR>+</OPERATOR>doUnderline(currentX<OPERATOR>+</OPERATOR>dx<OPERATOR>,</OPERATOR>currentY<OPERATOR>+.</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>*</OPERATOR>height<OPERATOR>+.</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>*</OPERATOR>fontSize<OPERATOR>,</OPERATOR>text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (colorFlag<CLOSER>)</CLOSER> s <OPERATOR>+=</OPERATOR> <STRING>' Q'</STRING><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( link <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> addLink (currentX<OPERATOR>+</OPERATOR>dx<OPERATOR>,</OPERATOR>currentY<OPERATOR>+.</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>*</OPERATOR>height<OPERATOR>-.</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>*</OPERATOR>fontSize<OPERATOR>,</OPERATOR>getStringWidth(text<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>fontSize<OPERATOR>,</OPERATOR> link<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>if</KEYWORD> ( s <OPERATOR>!=</OPERATOR> <STRING>''</STRING> <CLOSER>)</CLOSER> write(s<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			lasth <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( ln <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER>
			{
				currentY <OPERATOR>+=</OPERATOR> height<OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>( ln <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> currentX <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> currentX <OPERATOR>+=</OPERATOR> width<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Add a multicell with some text to the current page</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> width </DOCPROPERTY>Cell width</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> height </DOCPROPERTY>Cell height</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> text </DOCPROPERTY>Text to add into the cell</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> border </DOCPROPERTY>Lets you specify if a border should be drawn around the cell</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> align </DOCPROPERTY>Lets you center or align the text into the cell, values can be L (left align), C (centered), R (right align), J (justified) default value</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> filled </DOCPROPERTY>Lets you specify if the cell is colored (1) or transparent (0)</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> Page</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to write a table made of text cells :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.setFont( FontFamily.COURIER, Style.BOLD, 14 );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.textStyle ( new RGBColor ( 0x990000 ) );</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addMultiCell ( 70, 24, "A multicell :)", 1);</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addMultiCell ( 70, 24, "A multicell :)", 1);</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addMultiCell ( width<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> text<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> border<OPERATOR>:*=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> align<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'J'</STRING><OPERATOR>,</OPERATOR> filled<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			charactersWidth <OPERATOR>=</OPERATOR> <OBJ>currentFont</OBJ><OPERATOR>.</OPERATOR><OO>charactersWidth</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( width<OPERATOR>==</OPERATOR><NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> width <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO> <OPERATOR>-</OPERATOR> rightMargin <OPERATOR>-</OPERATOR> currentX<OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> wmax<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (width<OPERATOR>-</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR>currentMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>/</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> s<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> findAndReplace (<STRING>"<ESC>\r</ESC>"</STRING><OPERATOR>,</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR>text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> nb<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD>( nb <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(nb<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>"<ESC>\n</ESC>"</STRING> <CLOSER>)</CLOSER> nb<OPERATOR>--;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> b<OPERATOR>:*</OPERATOR> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD>( border <CLOSER>)</CLOSER>
			{
				<KEYWORD>if</KEYWORD>( border <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER>
				{
					border <OPERATOR>=</OPERATOR> <STRING>'LTRB'</STRING><OPERATOR>;</OPERATOR>
					b <OPERATOR>=</OPERATOR> <STRING>'LRT'</STRING><OPERATOR>;</OPERATOR>
					b2 <OPERATOR>=</OPERATOR> <STRING>'LR'</STRING><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				<KEYWORD>else</KEYWORD>
				{
					b2 <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD> (<OBJ>border</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>LEFT</OO><CLOSER>)</CLOSER><OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> b2<OPERATOR>+=</OPERATOR> <OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>LEFT</OO><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD> (<OBJ>border</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>RIGHT</OO><CLOSER>)</CLOSER><OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> b2<OPERATOR>+=</OPERATOR> <OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>RIGHT</OO><OPERATOR>;</OPERATOR>
					b <OPERATOR>=</OPERATOR> (<OBJ>border</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>TOP</OO><CLOSER>)</CLOSER><OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> b2<OPERATOR>+</OPERATOR><OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>TOP</OO> <OPERATOR>:</OPERATOR> b2<OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>var</KEYWORD> sep<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> j<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> l<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> ns<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> nl<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> c<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> cwAux<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			
			<KEYWORD>while</KEYWORD> (i<OPERATOR>&lt;</OPERATOR>nb<CLOSER>)</CLOSER>
			{			
				c <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(i<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> (c<OPERATOR>==</OPERATOR><STRING>"<ESC>\n</ESC>"</STRING><CLOSER>)</CLOSER>
				{
					<KEYWORD>if</KEYWORD> (ws<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>
					{
						ws<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
						write(<STRING>'0 Tw'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
					
					addCell(width<OPERATOR>,</OPERATOR>height<OPERATOR>,</OPERATOR><OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(j<OPERATOR>,</OPERATOR>i<OPERATOR>-</OPERATOR>j<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>b<OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR>align<OPERATOR>,</OPERATOR>filled<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					i<OPERATOR>++;</OPERATOR>
					sep<OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
					j<OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
					l<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					ns<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					nl<OPERATOR>++;</OPERATOR>
					
					<KEYWORD>if</KEYWORD>(border <OPERATOR>&amp;&amp;</OPERATOR> nl<OPERATOR>==</OPERATOR><NUMERIC>2</NUMERIC><CLOSER>)</CLOSER> b<OPERATOR>=</OPERATOR>b2<OPERATOR>;</OPERATOR>
					<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>			
				<CLOSER>}</CLOSER>
				
				<KEYWORD>if</KEYWORD>(c<OPERATOR>==</OPERATOR><STRING>' '</STRING><CLOSER>)</CLOSER>
				{
					sep<OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> ls<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> l<OPERATOR>;</OPERATOR>
					ns<OPERATOR>++;</OPERATOR>
				<CLOSER>}</CLOSER>
				
				<COMMENT>// TBO</COMMENT>
				cwAux <OPERATOR>=</OPERATOR> charactersWidth[c<CLOSER>]</CLOSER> <KEYWORD>as</KEYWORD> <TYPE>int</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (cwAux <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> cwAux <OPERATOR>=</OPERATOR> <NUMERIC>580</NUMERIC><OPERATOR>;</OPERATOR>
				l <OPERATOR>+=</OPERATOR> cwAux<OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> (l<OPERATOR>&gt;</OPERATOR>wmax<CLOSER>)</CLOSER>
				{
					
					<KEYWORD>if</KEYWORD>(sep<OPERATOR>==-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
					{
						<KEYWORD>if</KEYWORD>(i<OPERATOR>==</OPERATOR>j<CLOSER>)</CLOSER> i<OPERATOR>++;</OPERATOR>
						<KEYWORD>if</KEYWORD>(ws<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>
						{
							ws<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
							write(<STRING>'0 Tw'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						<CLOSER>}</CLOSER>
						addCell(width<OPERATOR>,</OPERATOR>height<OPERATOR>,</OPERATOR><OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(j<OPERATOR>,</OPERATOR>i<OPERATOR>-</OPERATOR>j<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>b<OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR>align<OPERATOR>,</OPERATOR>filled<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
					<KEYWORD>else</KEYWORD>
					{
						<KEYWORD>if</KEYWORD>(align<OPERATOR>==</OPERATOR><OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>JUSTIFIED</OO><CLOSER>)</CLOSER>
						{
							ws<OPERATOR>=</OPERATOR>(ns<OPERATOR>&gt;</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> ((wmax<OPERATOR>-</OPERATOR>ls<CLOSER>)</CLOSER><OPERATOR>*.</OPERATOR><NUMERIC>001</NUMERIC><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>fontSize<OPERATOR>/</OPERATOR>(ns<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
							write(sprintf(<STRING>'%.3f Tw'</STRING><OPERATOR>,</OPERATOR>ws<OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
						<CLOSER>}</CLOSER>
						
						addCell(width<OPERATOR>,</OPERATOR>height<OPERATOR>,</OPERATOR><OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(j<OPERATOR>,</OPERATOR>sep<OPERATOR>-</OPERATOR>j<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>b<OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR>align<OPERATOR>,</OPERATOR>filled<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						i<OPERATOR>=</OPERATOR>sep<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
					
					sep<OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
					j<OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
					l<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					ns<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					nl<OPERATOR>++;</OPERATOR>
					<KEYWORD>if</KEYWORD> ( border <OPERATOR>&amp;&amp;</OPERATOR> nl <OPERATOR>==</OPERATOR> <NUMERIC>2</NUMERIC> <CLOSER>)</CLOSER> b <OPERATOR>=</OPERATOR> b2<OPERATOR>;</OPERATOR>
					
				<CLOSER>}</CLOSER>
				<KEYWORD>else</KEYWORD> i<OPERATOR>++;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>if</KEYWORD>(ws<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>
			{
				ws<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
				write(<STRING>'0 Tw'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>if</KEYWORD> ( border <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>border</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO> (<STRING>'B'</STRING><CLOSER>)</CLOSER><OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> b <OPERATOR>+=</OPERATOR> <STRING>'B'</STRING><OPERATOR>;</OPERATOR>
			addCell ( width<OPERATOR>,</OPERATOR>height<OPERATOR>,</OPERATOR><OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(j<OPERATOR>,</OPERATOR>i<OPERATOR>-</OPERATOR>j<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>b<OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR>align<OPERATOR>,</OPERATOR>filled <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			currentX <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you write some text</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> lineHeight </DOCPROPERTY>Line height, lets you specify height between each lines</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> text </DOCPROPERTY>Text to write, to put a line break just add a \n in the text string</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> link </DOCPROPERTY>Any link, like http://www.mylink.com, will open te browser when clicked</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add some text to the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.writeText ( 5, "Lorem ipsum dolor sit amet, consectetuer adipiscing elit.", "http://www.google.fr");</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add some text with a clickable link :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.writeText ( 5, "Lorem ipsum dolor sit amet, consectetuer adipiscing elit.", "http://www.google.fr");</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> writeText ( lineHeight<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> text<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> link<OPERATOR>:</OPERATOR>ILink<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> cw<OPERATOR>:</OPERATOR><TYPE>Object</TYPE> <OPERATOR>=</OPERATOR> <OBJ>currentFont</OBJ><OPERATOR>.</OPERATOR><OO>charactersWidth</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> w<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO><OPERATOR>-</OPERATOR>rightMargin<OPERATOR>-</OPERATOR>currentX<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> wmax<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (w<OPERATOR>-</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR>currentMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>/</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> s<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> findAndReplace (<STRING>"<ESC>\r</ESC>"</STRING><OPERATOR>,</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR> text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> nb<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> sep<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> j<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> l<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> nl<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> c<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> cwAux<OPERATOR>:</OPERATOR><TYPE>int</TYPE>
			
			<KEYWORD>while</KEYWORD>( i<OPERATOR>&lt;</OPERATOR>nb <CLOSER>)</CLOSER>
			{
				c <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(i<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD>( c <OPERATOR>==</OPERATOR> <STRING>"<ESC>\n</ESC>"</STRING> <CLOSER>)</CLOSER>
				{
					
					addCell (w<OPERATOR>,</OPERATOR>lineHeight<OPERATOR>,</OPERATOR><OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(j<OPERATOR>,</OPERATOR>i<OPERATOR>-</OPERATOR>j<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>link<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					i<OPERATOR>++;</OPERATOR>
					sep<OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
					j<OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
					l<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD>(nl<OPERATOR>==</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
					{
						currentX <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
						w <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO><OPERATOR>-</OPERATOR>rightMargin<OPERATOR>-</OPERATOR>currentX<OPERATOR>;</OPERATOR>
						wmax<OPERATOR>=</OPERATOR> (w<OPERATOR>-</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR>currentMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>/</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
					nl<OPERATOR>++;</OPERATOR>
					<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				
				<KEYWORD>if</KEYWORD>(c<OPERATOR>==</OPERATOR><STRING>' '</STRING><CLOSER>)</CLOSER> sep<OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
				
				<COMMENT>// TBO</COMMENT>
				cwAux <OPERATOR>=</OPERATOR> cw[c<CLOSER>]</CLOSER> <KEYWORD>as</KEYWORD> <TYPE>int</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (cwAux <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> cwAux <OPERATOR>=</OPERATOR> <NUMERIC>580</NUMERIC><OPERATOR>;</OPERATOR>
				l <OPERATOR>+=</OPERATOR> cwAux<OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD>( l <OPERATOR>&gt;</OPERATOR> wmax <CLOSER>)</CLOSER>
				{
					<COMMENT>//Automatic line break</COMMENT>
					<KEYWORD>if</KEYWORD>(sep<OPERATOR>==-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
					{
						<KEYWORD>if</KEYWORD>(currentX<OPERATOR>&gt;</OPERATOR>leftMargin<CLOSER>)</CLOSER>
						{
							<COMMENT>//Move to next line</COMMENT>
							currentX <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
							currentY <OPERATOR>+=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>;</OPERATOR>
							w <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO><OPERATOR>-</OPERATOR>rightMargin<OPERATOR>-</OPERATOR>currentX<OPERATOR>;</OPERATOR>
							wmax <OPERATOR>=</OPERATOR> (w<OPERATOR>-</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR>currentMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>/</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
							i<OPERATOR>++;</OPERATOR>
							nl<OPERATOR>++;</OPERATOR>
							<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
						<CLOSER>}</CLOSER>
						<KEYWORD>if</KEYWORD>(i<OPERATOR>==</OPERATOR>j<CLOSER>)</CLOSER> i<OPERATOR>++;</OPERATOR>
						addCell (w<OPERATOR>,</OPERATOR>lineHeight<OPERATOR>,</OPERATOR><OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(j<OPERATOR>,</OPERATOR>i<OPERATOR>-</OPERATOR>j<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>link<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
					<KEYWORD>else</KEYWORD>
					{
						addCell (w<OPERATOR>,</OPERATOR>lineHeight<OPERATOR>,</OPERATOR><OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(j<OPERATOR>,</OPERATOR>sep<OPERATOR>-</OPERATOR>j<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>link<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						i<OPERATOR>=</OPERATOR>sep<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
					sep<OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
					j<OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
					l<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD>(nl<OPERATOR>==</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
					{
						currentX<OPERATOR>=</OPERATOR>leftMargin<OPERATOR>;</OPERATOR>
						w<OPERATOR>=</OPERATOR><OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO><OPERATOR>-</OPERATOR>rightMargin<OPERATOR>-</OPERATOR>currentX<OPERATOR>;</OPERATOR>
						wmax<OPERATOR>=</OPERATOR>(w<OPERATOR>-</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR>currentMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>/</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
					nl<OPERATOR>++;</OPERATOR>
				<CLOSER>}</CLOSER>
				<KEYWORD>else</KEYWORD> i<OPERATOR>++;</OPERATOR>
			<CLOSER>}</CLOSER>
			<KEYWORD>if</KEYWORD> (i<OPERATOR>!=</OPERATOR>j<CLOSER>)</CLOSER> addCell ((l<OPERATOR>*.</OPERATOR><NUMERIC>001</NUMERIC><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>fontSize<OPERATOR>,</OPERATOR>lineHeight<OPERATOR>,</OPERATOR><OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(j<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>link<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Lets you write some text with basic HTML type formatting</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> pHeight </DOCPROPERTY>Line height, lets you specify height between each lines</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> pText </DOCPROPERTY>Text to write, to put a line break just add a \n in the text string</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> pLink </DOCPROPERTY>Any link, like http://www.mylink.com, will open te browser when clicked</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * Only a limited subset of tags are currently supported</DOCCOMMENT>
<DOCCOMMENT>		 *  &lt;b&gt; &lt;/b&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *  &lt;i&gt; &lt;/i&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *  &lt;br /&gt;  used to create a new line</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add some text to the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.writeFlashHtmlText ( 5, "Lorem ipsum &lt;b&gt;dolor&lt;/b&gt; sit amet, consectetuer&lt;br /&gt; adipiscing elit.");</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add some text with a clickable link :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.writeFlashHtmlText ( 5, "Lorem ipsum dolor sit amet, consectetuer adipiscing elit.", "http://www.google.fr");</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> writeFlashHtmlText ( pHeight<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> pText<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> pLink<OPERATOR>:</OPERATOR>ILink<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<COMMENT>//Output text in flowing mode</COMMENT>
			<KEYWORD>var</KEYWORD> cw    <OPERATOR>:</OPERATOR> <TYPE>Object</TYPE>     <OPERATOR>=</OPERATOR> <OBJ>currentFont</OBJ><OPERATOR>.</OPERATOR><OO>charactersWidth</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> w     <OPERATOR>:</OPERATOR> <TYPE>Number</TYPE>     <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO><OPERATOR>-</OPERATOR>rightMargin<OPERATOR>-</OPERATOR>currentX<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> wmax  <OPERATOR>:</OPERATOR> <TYPE>Number</TYPE>     <OPERATOR>=</OPERATOR> (w<OPERATOR>-</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR>currentMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>/</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> s     <OPERATOR>:</OPERATOR> <TYPE>String</TYPE>     <OPERATOR>=</OPERATOR> findAndReplace (<STRING>"<ESC>\r</ESC>"</STRING><OPERATOR>,</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR>pText<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<COMMENT>// Strip all \n's as we don't use them - use &lt;br /&gt; tag for returns</COMMENT>
			s <OPERATOR>=</OPERATOR> findAndReplace(<STRING>"<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR> s<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>  
			
			<KEYWORD>var</KEYWORD> nb      <OPERATOR>:</OPERATOR> <TYPE>int</TYPE><OPERATOR>;</OPERATOR>        <COMMENT>// Count of number of characters in section</COMMENT>
			<KEYWORD>var</KEYWORD> sep     <OPERATOR>:</OPERATOR> <TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>   <COMMENT>// Stores the position of the last seperator</COMMENT>
			<KEYWORD>var</KEYWORD> lenAtSep<OPERATOR>:</OPERATOR> <TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>// Store the length at the last seprator </COMMENT>
			<KEYWORD>var</KEYWORD> i       <OPERATOR>:</OPERATOR> <TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>    <COMMENT>// Counter for looping through each string</COMMENT>
			<KEYWORD>var</KEYWORD> j       <OPERATOR>:</OPERATOR> <TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>    <COMMENT>// Counter which is updated with character count to be actually output (taking auto line breaking into account)</COMMENT>
			<KEYWORD>var</KEYWORD> l       <OPERATOR>:</OPERATOR> <TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>    <COMMENT>// Length of the the current character string</COMMENT>
			<KEYWORD>var</KEYWORD> k       <OPERATOR>:</OPERATOR> <TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>    <COMMENT>// Counter for looping through each item in the parsed XML array  </COMMENT>
			<KEYWORD>var</KEYWORD> ns      <OPERATOR>:</OPERATOR> <TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			
			<COMMENT>//XML whitespace is important for this text parsing - so save prev value so we can restore it.</COMMENT>
			<KEYWORD>var</KEYWORD> prevWhiteSpace    <OPERATOR>:</OPERATOR> <TYPE>Boolean</TYPE> <OPERATOR>=</OPERATOR> <OBJ>XML</OBJ><OPERATOR>.</OPERATOR><OO>ignoreWhitespace</OO><OPERATOR>;</OPERATOR>
			<OBJ>XML</OBJ><OPERATOR>.</OPERATOR><OO>ignoreWhitespace</OO> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> aTaggedString     <OPERATOR>:</OPERATOR> <TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> parseTags ( <KEYWORD>new</KEYWORD> <TYPE>XML</TYPE>( <STRING>"&lt;html&gt;"</STRING><OPERATOR>+</OPERATOR>s<OPERATOR>+</OPERATOR><STRING>"&lt;/html&gt;"</STRING> <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>XML</OBJ><OPERATOR>.</OPERATOR><OO>ignoreWhitespace</OO> <OPERATOR>=</OPERATOR> prevWhiteSpace<OPERATOR>;</OPERATOR>
			
			<COMMENT>//Stores the cell snippets for the current line</COMMENT>
			<KEYWORD>var</KEYWORD> currentLine      <OPERATOR>:</OPERATOR> <TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> 
			<KEYWORD>var</KEYWORD> cellVO           <OPERATOR>:</OPERATOR> CellVO<OPERATOR>;</OPERATOR>
			
			<COMMENT>//Variables to track the state of the current text</COMMENT>
			<KEYWORD>var</KEYWORD> fontBold         <OPERATOR>:</OPERATOR> <TYPE>Boolean</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR> 
			<KEYWORD>var</KEYWORD> fontItalic       <OPERATOR>:</OPERATOR> <TYPE>Boolean</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			fontUnderline     <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> textAlign        <OPERATOR>:</OPERATOR> <TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>  <COMMENT>// '' 'C' or 'R'  ??Does 'J' work??</COMMENT>
			<KEYWORD>var</KEYWORD> attr             <OPERATOR>:</OPERATOR> <TYPE>XML</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> cwAux            <OPERATOR>:</OPERATOR> <TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> fs               <OPERATOR>:</OPERATOR> <TYPE>int</TYPE><OPERATOR>;</OPERATOR>      <COMMENT>// Font size</COMMENT>
			<KEYWORD>var</KEYWORD> fontColor               <OPERATOR>:</OPERATOR> RGBColor<OPERATOR>;</OPERATOR> <COMMENT>// font color;</COMMENT>
			<KEYWORD>var</KEYWORD> cs               <OPERATOR>:</OPERATOR> <TYPE>int</TYPE><OPERATOR>;</OPERATOR>      <COMMENT>// character space ( not implemented yet )</COMMENT>
			
			<COMMENT>// total number of HTML tags</COMMENT>
			<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>aTaggedString</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			
			<COMMENT>//Loop through each item in array</COMMENT>
			<KEYWORD>for</KEYWORD> ( k<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> k <OPERATOR>&lt;</OPERATOR> lng<OPERATOR>;</OPERATOR> k<OPERATOR>++</OPERATOR> <CLOSER>)</CLOSER>
			{            	
				<COMMENT>//Handle any tags and if unknown then handle as text    </COMMENT>
				<KEYWORD>switch</KEYWORD> ( aTaggedString[k<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>tag</OO><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER>
				{	
					<COMMENT>//Process Tags</COMMENT>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;TEXTFORMAT&gt;"</STRING><OPERATOR>:</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;/TEXTFORMAT&gt;"</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;P&gt;"</STRING><OPERATOR>:</OPERATOR>
						
					<KEYWORD>for</KEYWORD> each ( attr <KEYWORD>in</KEYWORD> aTaggedString[k<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>attr</OO> <CLOSER>)</CLOSER>
					{	
						<KEYWORD>switch</KEYWORD> ( <TYPE>String</TYPE> ( <OBJ>attr</OBJ><OPERATOR>.</OPERATOR><OO>name</OO>(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER>
						{	
							<KEYWORD>case</KEYWORD> <STRING>"ALIGN"</STRING><OPERATOR>:</OPERATOR> 
								textAlign <OPERATOR>=</OPERATOR> <TYPE>String</TYPE> ( attr <CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>charAt</OO>(<NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
								<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
							<KEYWORD>default</KEYWORD><OPERATOR>:</OPERATOR>
								<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						<CLOSER>}</CLOSER>
					<CLOSER>}</CLOSER>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;/P&gt;"</STRING><OPERATOR>:</OPERATOR>
						
						renderLine(currentLine<OPERATOR>,</OPERATOR>textAlign<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						currentLine     <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						currentX   		<OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
						textAlign       <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
						ns              <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
						lineBreak ( pHeight <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;FONT&gt;"</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>for</KEYWORD> each ( attr <KEYWORD>in</KEYWORD> aTaggedString[k<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>attr</OO> <CLOSER>)</CLOSER>
						{
							<KEYWORD>switch</KEYWORD> ( <TYPE>String</TYPE> ( <OBJ>attr</OBJ><OPERATOR>.</OPERATOR><OO>name</OO>(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER>
							{	
								<KEYWORD>case</KEYWORD> <STRING>"FACE"</STRING><OPERATOR>:</OPERATOR>
									<COMMENT>// <COMMENT_NOTE>TODO:</COMMENT_NOTE> Add Font Face Support</COMMENT>
									<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
								<KEYWORD>case</KEYWORD> <STRING>"SIZE"</STRING><OPERATOR>:</OPERATOR>
									fs <OPERATOR>=</OPERATOR> <FUNCTION>parseInt</FUNCTION>( <TYPE>String</TYPE> ( attr <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
								<KEYWORD>case</KEYWORD> <STRING>"COLOR"</STRING><OPERATOR>:</OPERATOR>
									fontColor <OPERATOR>=</OPERATOR> <OBJ>RGBColor</OBJ><OPERATOR>.</OPERATOR><OO>hexStringToRGBColor</OO>( <TYPE>String</TYPE> ( attr <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
								<KEYWORD>case</KEYWORD> <STRING>"LETTERSPACING"</STRING><OPERATOR>:</OPERATOR>
									cs <OPERATOR>=</OPERATOR> <FUNCTION>parseInt</FUNCTION>( <TYPE>String</TYPE> ( attr <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
								<KEYWORD>case</KEYWORD> <STRING>"KERNING"</STRING><OPERATOR>:</OPERATOR>
									<COMMENT>// <COMMENT_NOTE>TODO</COMMENT_NOTE></COMMENT>
									<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
								<KEYWORD>default</KEYWORD><OPERATOR>:</OPERATOR>
									<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
							<CLOSER>}</CLOSER>
						<CLOSER>}</CLOSER>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;/FONT&gt;"</STRING><OPERATOR>:</OPERATOR>
						fontColor <OPERATOR>=</OPERATOR> textColor <KEYWORD>as</KEYWORD> RGBColor<OPERATOR>;</OPERATOR>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;B&gt;"</STRING><OPERATOR>:</OPERATOR>
						fontBold <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;/B&gt;"</STRING><OPERATOR>:</OPERATOR>
						fontBold <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;I&gt;"</STRING><OPERATOR>:</OPERATOR>
						fontItalic <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;/I&gt;"</STRING><OPERATOR>:</OPERATOR>
						fontItalic <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;U&gt;"</STRING><OPERATOR>:</OPERATOR>
						fontUnderline <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;/U&gt;"</STRING><OPERATOR>:</OPERATOR>
						fontUnderline <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;BR&gt;"</STRING><OPERATOR>:</OPERATOR>
						<COMMENT>// Both cases will set line break to true.  It is typically entered as &lt;br /&gt; </COMMENT>
						<COMMENT>// but the parser converts this to a start and end tag</COMMENT>
						lineBreak ( pHeight <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>case</KEYWORD> <STRING>"&lt;/BR&gt;"</STRING><OPERATOR>:</OPERATOR>
					<KEYWORD>default</KEYWORD><OPERATOR>:</OPERATOR>
						<COMMENT>//Process text                    </COMMENT>
						
						<COMMENT>//Create a blank CellVO for this part</COMMENT>
						cellVO            <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> CellVO(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
						<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>link</OO>       <OPERATOR>=</OPERATOR> pLink<OPERATOR>;</OPERATOR>
						<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>fontSizePt</OO> <OPERATOR>=</OPERATOR> fontSizePt<OPERATOR>;</OPERATOR>
						<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>color</OO>      <OPERATOR>=</OPERATOR> fontColor<OPERATOR>;</OPERATOR>
						<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>underlined</OO> <OPERATOR>=</OPERATOR> fontUnderline<OPERATOR>;</OPERATOR>
						
						<COMMENT>//Set the font for calculation of character widths</COMMENT>
						<KEYWORD>var</KEYWORD> newFont<OPERATOR>:</OPERATOR>IFont <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> CoreFont ( getFontStyleString(fontBold<OPERATOR>,</OPERATOR>fontItalic<OPERATOR>,</OPERATOR>fontFamily<CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						setFont ( newFont<OPERATOR>,</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>fontSizePt</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>font</OO> <OPERATOR>=</OPERATOR> newFont<OPERATOR>;</OPERATOR>
						
						<COMMENT>//Font character width lookup table</COMMENT>
						cw      <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>currentFont</OO><OPERATOR>.</OPERATOR><OO>charactersWidth</OO><OPERATOR>;</OPERATOR> 
						
						<COMMENT>//Current remaining space per line</COMMENT>
						w       <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO><OPERATOR>-</OPERATOR>rightMargin<OPERATOR>-</OPERATOR>currentX<OPERATOR>;</OPERATOR>
						
						<COMMENT>//Size of a full line of text</COMMENT>
						wmax    <OPERATOR>=</OPERATOR> (w<OPERATOR>-</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR>currentMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>/</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fontSize</OO><OPERATOR>;</OPERATOR>  
						
						<COMMENT>//get text from string</COMMENT>
						s   <OPERATOR>=</OPERATOR> aTaggedString[k<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>value</OO><OPERATOR>;</OPERATOR> 
						
						<COMMENT>//Length of string</COMMENT>
						nb  <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
						
						i   <OPERATOR>=</OPERATOR>  <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
						j   <OPERATOR>=</OPERATOR>  <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
						sep <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
						l   <OPERATOR>=</OPERATOR>  <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
						
						<KEYWORD>while</KEYWORD>( i <OPERATOR>&lt;</OPERATOR> nb <CLOSER>)</CLOSER>
						{
							<COMMENT>//Get next character</COMMENT>
							<KEYWORD>var</KEYWORD> c <OPERATOR>:</OPERATOR> <TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(i<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
							
							<COMMENT>//Found a seperator</COMMENT>
							<KEYWORD>if</KEYWORD> ( c <OPERATOR>==</OPERATOR> <STRING>' '</STRING> <CLOSER>)</CLOSER>
							{ 
								sep      <OPERATOR>=</OPERATOR> i<OPERATOR>;</OPERATOR>    <COMMENT>//Save seperator index</COMMENT>
								lenAtSep <OPERATOR>=</OPERATOR> l<OPERATOR>;</OPERATOR>    <COMMENT>//Save seperator length</COMMENT>
								ns<OPERATOR>++;</OPERATOR>
							<CLOSER>}</CLOSER>
							
							<COMMENT>//Add the character width to the length;</COMMENT>
							l <OPERATOR>+=</OPERATOR> cw[c<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
							
							<COMMENT>//Are we Over the char width limit?</COMMENT>
							<KEYWORD>if</KEYWORD> ( l <OPERATOR>&gt;</OPERATOR> wmax <CLOSER>)</CLOSER>
							{	
								<COMMENT>//Automatic line break</COMMENT>
								<KEYWORD>if</KEYWORD> ( sep <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER>
								{
									<COMMENT>// No seperator to force at character</COMMENT>
									
									<KEYWORD>if</KEYWORD>(currentX<OPERATOR>&gt;</OPERATOR>leftMargin<CLOSER>)</CLOSER>
									{	
										<COMMENT>//Move to next line</COMMENT>
										currentX  <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
										currentY <OPERATOR>+=</OPERATOR> pHeight<OPERATOR>;</OPERATOR>
										
										w    <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO><OPERATOR>-</OPERATOR>rightMargin<OPERATOR>-</OPERATOR>currentX<OPERATOR>;</OPERATOR>
										wmax <OPERATOR>=</OPERATOR> (w<OPERATOR>-</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR>currentMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>/</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
										
										i<OPERATOR>++;</OPERATOR>
										<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
									<CLOSER>}</CLOSER>
									
									<KEYWORD>if</KEYWORD> ( i <OPERATOR>==</OPERATOR> j <CLOSER>)</CLOSER> 
										i<OPERATOR>++;</OPERATOR>
									
									l <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
									
									<COMMENT>//Add the cell to the current line</COMMENT>
									<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>x</OO>     <OPERATOR>=</OPERATOR> currentX<OPERATOR>;</OPERATOR>
									<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>y</OO>     <OPERATOR>=</OPERATOR> currentY<OPERATOR>;</OPERATOR>
									<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>width</OO> <OPERATOR>=</OPERATOR> (l<OPERATOR>*.</OPERATOR><NUMERIC>001</NUMERIC><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
									<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>=</OPERATOR> pHeight<OPERATOR>;</OPERATOR>
									<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>text</OO>  <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(j<OPERATOR>,</OPERATOR>i<OPERATOR>-</OPERATOR>j<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									
									<OBJ>currentLine</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( cellVO <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									
									<COMMENT>//Just done a line break so render the line</COMMENT>
									renderLine ( currentLine<OPERATOR>,</OPERATOR> textAlign <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									currentLine <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									
									<COMMENT>//Update x and y positions            </COMMENT>
									currentX <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
									
								<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> 
								{
									
									<COMMENT>//Split at last seperator</COMMENT>
									
									<COMMENT>//Add the cell to the current line								</COMMENT>
									<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>x</OO>      <OPERATOR>=</OPERATOR> currentX<OPERATOR>;</OPERATOR>
									<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>y</OO>      <OPERATOR>=</OPERATOR> currentY<OPERATOR>;</OPERATOR>
									<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>width</OO>  <OPERATOR>=</OPERATOR> (lenAtSep<OPERATOR>*.</OPERATOR><NUMERIC>001</NUMERIC><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
									<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>height</OO> <OPERATOR>=</OPERATOR> pHeight<OPERATOR>;</OPERATOR>
									<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>text</OO>   <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO> ( j<OPERATOR>,</OPERATOR> sep<OPERATOR>-</OPERATOR>j <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									
									<OBJ>currentLine</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( cellVO <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									
									<KEYWORD>if</KEYWORD> ( textAlign <OPERATOR>==</OPERATOR> <OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>JUSTIFIED</OO> <CLOSER>)</CLOSER>
									{
										ws<OPERATOR>=</OPERATOR>(ns<OPERATOR>&gt;</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> (wmax<OPERATOR>-</OPERATOR>lenAtSep<CLOSER>)</CLOSER><OPERATOR>/</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>*</OPERATOR>fontSize<OPERATOR>/</OPERATOR>(ns<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
										write(sprintf(<STRING>'%.3f Tw'</STRING><OPERATOR>,</OPERATOR>ws<OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
									<CLOSER>}</CLOSER>
									
									<COMMENT>//Just done a line break so render the line</COMMENT>
									renderLine(currentLine<OPERATOR>,</OPERATOR>textAlign<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									currentLine <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
									
									<COMMENT>//Update x and y positions            </COMMENT>
									currentX <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
									
									w <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO> <OPERATOR>-</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>*</OPERATOR> currentMargin<OPERATOR>;</OPERATOR>
									i <OPERATOR>=</OPERATOR> sep <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
								<CLOSER>}</CLOSER>
								
								sep<OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
								j  <OPERATOR>=</OPERATOR> i<OPERATOR>;</OPERATOR>
								l  <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
								ns <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
								
								currentX <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
								
								w   <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO> <OPERATOR>-</OPERATOR> rightMargin <OPERATOR>-</OPERATOR> currentX<OPERATOR>;</OPERATOR>
								wmax<OPERATOR>=</OPERATOR> ( w<OPERATOR>-</OPERATOR><NUMERIC>2</NUMERIC> <OPERATOR>*</OPERATOR> currentMargin <CLOSER>)</CLOSER><OPERATOR>*</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>/</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
								
							<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> 
								i<OPERATOR>++;</OPERATOR>
						<CLOSER>}</CLOSER>
						
						<COMMENT>//Last chunk </COMMENT>
						<KEYWORD>if</KEYWORD> ( i <OPERATOR>!=</OPERATOR> j <CLOSER>)</CLOSER>
						{	
							<COMMENT>//If any remaining chars then print them out                            </COMMENT>
							<COMMENT>//Add the cell to the current line</COMMENT>
							
							<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>=</OPERATOR> currentX<OPERATOR>;</OPERATOR>
							<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>=</OPERATOR> currentY<OPERATOR>;</OPERATOR>
							<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>width</OO> <OPERATOR>=</OPERATOR> (l<OPERATOR>*.</OPERATOR><NUMERIC>001</NUMERIC><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
							<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>height</OO> <OPERATOR>=</OPERATOR> pHeight<OPERATOR>;</OPERATOR>
							<OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>text</OO> <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(j<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
							
							<COMMENT>//Last chunk</COMMENT>
							<KEYWORD>if</KEYWORD> ( ws<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER>
							{
								ws<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
								write(<STRING>'0 Tw'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
							<CLOSER>}</CLOSER>                
							
							<OBJ>currentLine</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( cellVO <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
							
							<COMMENT>//Update X positions</COMMENT>
							currentX <OPERATOR>+=</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>;</OPERATOR>
						<CLOSER>}</CLOSER> 
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>        
				<CLOSER>}</CLOSER>        
				
				<COMMENT>//Is there a finished line     </COMMENT>
				<COMMENT>// or last line and there is something to display</COMMENT>
				
				<KEYWORD>if</KEYWORD> ( k <OPERATOR>==</OPERATOR> <OBJ>aTaggedString</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>currentLine</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER>
				{
					renderLine(currentLine<OPERATOR>,</OPERATOR>textAlign<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
					lineBreak(pHeight<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					currentLine <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>	
			<CLOSER>}</CLOSER>
			
			<COMMENT>//Is there anything left to render before we exit?</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>currentLine</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <CLOSER>)</CLOSER> 
			{	
				renderLine ( currentLine<OPERATOR>,</OPERATOR> textAlign <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				lineBreak ( pHeight <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				currentLine <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>            
			
			<COMMENT>//Set current y off the page to force new page.</COMMENT>
			currentY <OPERATOR>+=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>;</OPERATOR>    
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> lineBreak ( pHeight <OPERATOR>:</OPERATOR> <TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			currentX  <OPERATOR>=</OPERATOR> leftMargin<OPERATOR>;</OPERATOR>
			currentY <OPERATOR>+=</OPERATOR> pHeight<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> getFontStyleString (  bold <OPERATOR>:</OPERATOR> <TYPE>Boolean</TYPE><OPERATOR>,</OPERATOR> italic <OPERATOR>:</OPERATOR> <TYPE>Boolean</TYPE><OPERATOR>,</OPERATOR> family<OPERATOR>:</OPERATOR> <TYPE>String</TYPE> <CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <TYPE>String</TYPE>
		{
			<KEYWORD>var</KEYWORD> font<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> family<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> position<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( (position <OPERATOR>=</OPERATOR> <OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>"-"</STRING><CLOSER>))</CLOSER> <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER>
				font <OPERATOR>=</OPERATOR> <OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> position<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( bold <OPERATOR>&amp;&amp;</OPERATOR> italic <CLOSER>)</CLOSER> 
				font <OPERATOR>+=</OPERATOR> <STRING>"-BoldOblique"</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( bold <CLOSER>)</CLOSER>
				font <OPERATOR>+=</OPERATOR> <STRING>"-Bold"</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( italic <CLOSER>)</CLOSER>
				font <OPERATOR>+=</OPERATOR> <STRING>"-Oblique"</STRING><OPERATOR>;</OPERATOR>
			
			<KEYWORD>return</KEYWORD> font<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> renderLine ( lineArray <OPERATOR>:</OPERATOR> <TYPE>Array</TYPE><OPERATOR>,</OPERATOR> align <OPERATOR>:</OPERATOR> <TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <STRING>''</STRING> <CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>void</KEYWORD>
		{	
			<KEYWORD>var</KEYWORD> cellVO    <OPERATOR>:</OPERATOR> CellVO<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> availWidth<OPERATOR>:</OPERATOR> <TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO> <OPERATOR>-</OPERATOR> leftMargin <OPERATOR>-</OPERATOR> rightMargin<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> lineLength<OPERATOR>:</OPERATOR> <TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> offsetX   <OPERATOR>:</OPERATOR> <TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> 
			<KEYWORD>var</KEYWORD> offsetY   <OPERATOR>:</OPERATOR> <TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> 
			<KEYWORD>var</KEYWORD> i         <OPERATOR>:</OPERATOR> <TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> firstCell <OPERATOR>:</OPERATOR> CellVO <OPERATOR>=</OPERATOR> CellVO(lineArray[<NUMERIC>0</NUMERIC><CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( firstCell <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER>
				<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
			
			<COMMENT>//Check if we need a new page for this line</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>firstCell</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>+</OPERATOR> <OBJ>firstCell</OBJ><OPERATOR>.</OPERATOR><OO>height</OO> <OPERATOR>&gt;</OPERATOR> pageBreakTrigger <CLOSER>)</CLOSER>
			{	
				addPage ( <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<COMMENT>//Use offsetY to push already specified coord for this line back up to top of page</COMMENT>
				offsetY <OPERATOR>=</OPERATOR> currentY <OPERATOR>-</OPERATOR> <OBJ>firstCell</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>;</OPERATOR>                                
			<CLOSER>}</CLOSER>
			<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>lineArray</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			
			<COMMENT>//Calculate offset if we are aligning center or right</COMMENT>
			<KEYWORD>for</KEYWORD>(i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> lng<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
				lineLength <OPERATOR>+=</OPERATOR> (lineArray[i<CLOSER>]</CLOSER> <KEYWORD>as</KEYWORD> CellVO<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>;</OPERATOR>
			
			<COMMENT>//Adjust offset based on alignment</COMMENT>
			<KEYWORD>if</KEYWORD> ( align <OPERATOR>==</OPERATOR> <OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>CENTER</OO> <CLOSER>)</CLOSER> 
				offsetX <OPERATOR>=</OPERATOR> (availWidth <OPERATOR>-</OPERATOR> lineLength<CLOSER>)</CLOSER><OPERATOR>*.</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( align <OPERATOR>==</OPERATOR> <OBJ>Align</OBJ><OPERATOR>.</OPERATOR><OO>RIGHT</OO> <CLOSER>)</CLOSER>
				offsetX <OPERATOR>=</OPERATOR> availWidth <OPERATOR>-</OPERATOR> lineLength<OPERATOR>;</OPERATOR>
			
			<COMMENT>// Loop through the cells in the line and draw</COMMENT>
			<KEYWORD>for</KEYWORD>(i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> lng<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
			{	
				cellVO <OPERATOR>=</OPERATOR> CellVO ( lineArray[<TYPE>int</TYPE>(i<CLOSER>)]</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				currentX <OPERATOR>=</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>+</OPERATOR> offsetX<OPERATOR>;</OPERATOR>
				currentY <OPERATOR>=</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>+</OPERATOR> offsetY<OPERATOR>;</OPERATOR>
				
				setFont ( <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>font</OO><OPERATOR>,</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>fontSizePt</OO><OPERATOR>,</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>underlined</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>color</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> setTextColor ( <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>color</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				colorFlag <OPERATOR>=</OPERATOR> ( fillColor <OPERATOR>!=</OPERATOR> addTextColor <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				addCell ( <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>,</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>text</OO><OPERATOR>,</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>border</OO><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>fill</OO><OPERATOR>,</OPERATOR> <OBJ>cellVO</OBJ><OPERATOR>.</OPERATOR><OO>link</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> parseTags ( myXML<OPERATOR>:</OPERATOR><TYPE>XML</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Array</TYPE>
		{	
			<KEYWORD>var</KEYWORD> aTags<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> children<OPERATOR>:</OPERATOR>XMLList <OPERATOR>=</OPERATOR> <OBJ>myXML</OBJ><OPERATOR>.</OPERATOR><OO>children</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> returnedTags<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>children</OBJ><OPERATOR>.</OPERATOR><OO>length</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> subLng<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD>( <KEYWORD>var</KEYWORD> i <OPERATOR>:</OPERATOR> <TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> lng<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> <CLOSER>)</CLOSER>
			{	
				<KEYWORD>if</KEYWORD> ( children[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>name</OO>(<CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER>
				{	
					<OBJ>aTags</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( <KEYWORD>new</KEYWORD> HTMLTag (<STRING>'&lt;'</STRING><OPERATOR>+</OPERATOR>children[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>name</OO>(<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>'&gt;'</STRING><OPERATOR>,</OPERATOR> children[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>attributes</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <STRING>""</STRING><CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
					returnedTags <OPERATOR>=</OPERATOR> parseTags ( children[i<CLOSER>]</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					subLng <OPERATOR>=</OPERATOR> <OBJ>returnedTags</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
					
					<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> j <OPERATOR>:</OPERATOR> <TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;</OPERATOR> subLng<OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR> <CLOSER>)</CLOSER>
						<OBJ>aTags</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( returnedTags[j<CLOSER>]</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
					<OBJ>aTags</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( <KEYWORD>new</KEYWORD> HTMLTag (<STRING>'&lt;/'</STRING><OPERATOR>+</OPERATOR>children[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>name</OO>(<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>'&gt;'</STRING><OPERATOR>,</OPERATOR> children[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>attributes</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <STRING>""</STRING><CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> 
					
					<OBJ>aTags</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( <KEYWORD>new</KEYWORD> HTMLTag (<STRING>"none"</STRING><OPERATOR>,</OPERATOR> <KEYWORD>new</KEYWORD> XMLList(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> children[i<CLOSER>]</CLOSER> <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>return</KEYWORD> aTags<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF templates API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* importTemplate()</COMMENT>
<COMMENT>		* getTemplate()</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> importTemplate ( template<OPERATOR>:</OPERATOR><TYPE>XML</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<COMMENT>// TBD</COMMENT>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> getTemplate ( template<OPERATOR>:</OPERATOR><TYPE>XML</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>XML</TYPE>
		{
			<COMMENT>// TBD</COMMENT>
			<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF data API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* addGrid()</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addGrid ( grid<OPERATOR>:</OPERATOR>Grid<OPERATOR>,</OPERATOR> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> repeatHeader<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>=</OPERATOR><KEYWORD>true</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			<KEYWORD>if</KEYWORD> ( textColor <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE>(<STRING>"Please call the setFont and textStyle method before adding a Grid."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			currentGrid <OPERATOR>=</OPERATOR> grid<OPERATOR>;</OPERATOR>
			<OBJ>currentGrid</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>=</OPERATOR> x<OPERATOR>;</OPERATOR>
			<OBJ>currentGrid</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>=</OPERATOR> y<OPERATOR>;</OPERATOR>
			columns <OPERATOR>=</OPERATOR> <OBJ>currentGrid</OBJ><OPERATOR>.</OPERATOR><OO>columns</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> buffer<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <OBJ>grid</OBJ><OPERATOR>.</OPERATOR><OO>dataProvider</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> j<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( columns <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER>
			{
				<KEYWORD>var</KEYWORD> firstItem<OPERATOR>:*</OPERATOR> <OPERATOR>=</OPERATOR> buffer[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> fields<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> column<OPERATOR>:</OPERATOR>GridColumn<OPERATOR>;</OPERATOR>
				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> p<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <KEYWORD>in</KEYWORD> firstItem <CLOSER>)</CLOSER>
					<OBJ>fields</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( p <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>fields</OBJ><OPERATOR>.</OPERATOR><OO>sort</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				columns <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> fieldsLng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>fields</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR> fieldsLng<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
					<OBJ>columns</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( <KEYWORD>new</KEYWORD> GridColumn ( fields[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> fields[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> <OBJ>currentGrid</OBJ><OPERATOR>.</OPERATOR><OO>width</OO> <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>var</KEYWORD> row<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
			columnNames <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> lngColumns<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>columns</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>	
			<KEYWORD>var</KEYWORD> item<OPERATOR>:*;</OPERATOR>
			
			<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR> lngColumns<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
				<OBJ>columnNames</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( columns[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>headerText</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> rect<OPERATOR>:</OPERATOR>Rectangle <OPERATOR>=</OPERATOR> getRect ( columnNames <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( checkPageBreak(<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><CLOSER>)</CLOSER> <CLOSER>)</CLOSER>
				addPage(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			beginFill ( <OBJ>grid</OBJ><OPERATOR>.</OPERATOR><OO>headerColor</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			setXY ( x<OPERATOR>+</OPERATOR>getX(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> y<OPERATOR>+</OPERATOR>getY(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			addRow( columnNames<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> rect <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			endFill(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR> lng<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
			{
				item <OPERATOR>=</OPERATOR> buffer[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				row <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>for</KEYWORD> (j <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> j<OPERATOR>&lt;</OPERATOR> lngColumns<OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
				{
					<OBJ>row</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> (item[columns[j<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>dataField</OO><CLOSER>]</CLOSER> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> item[columns[j<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>dataField</OO><CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR> <STRING>""</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					nb <OPERATOR>=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>max</OO>(nb<OPERATOR>,</OPERATOR>nbLines(columns[j<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR>row[j<CLOSER>]))</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				
				rect <OPERATOR>=</OPERATOR> getRect ( row <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				setX ( x <OPERATOR>+</OPERATOR> getX(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( checkPageBreak(<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><CLOSER>)</CLOSER> <CLOSER>)</CLOSER>
				{
					addPage(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					setXY ( x<OPERATOR>+</OPERATOR>getX(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> y<OPERATOR>+</OPERATOR>getY(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD> ( repeatHeader <CLOSER>)</CLOSER> 
					{
						beginFill(<OBJ>grid</OBJ><OPERATOR>.</OPERATOR><OO>headerColor</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						addRow (columnNames<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> getRect (columnNames<CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						endFill(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						setX ( x <OPERATOR>+</OPERATOR> getX(<CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
				<CLOSER>}</CLOSER>
				
				<KEYWORD>if</KEYWORD> ( <OBJ>grid</OBJ><OPERATOR>.</OPERATOR><OO>alternateRowColor</OO> <OPERATOR>&amp;&amp;</OPERATOR> <TYPE>Boolean</TYPE>(isEven <OPERATOR>=</OPERATOR> i<OPERATOR>&amp;</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <CLOSER>)</CLOSER>
				{
					beginFill( <OBJ>grid</OBJ><OPERATOR>.</OPERATOR><OO>backgroundColor</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					addRow( row<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> rect <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					endFill(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> addRow( row<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> rect <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> getRect ( rows<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR>Rectangle
		{
			<KEYWORD>var</KEYWORD> nb<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>rows</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD>(<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>i<OPERATOR>&lt;</OPERATOR>lng<OPERATOR>;</OPERATOR>i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> nb <OPERATOR>=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>max</OO>(nb<OPERATOR>,</OPERATOR>nbLines(columns[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR>rows[i<CLOSER>]))</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> ph<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> h<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> ph<OPERATOR>*</OPERATOR>nb<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> a<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> w<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			
			<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Rectangle(x<OPERATOR>,</OPERATOR>y<OPERATOR>,</OPERATOR>w<OPERATOR>,</OPERATOR>h<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> addRow(data<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>,</OPERATOR> style<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> rect<OPERATOR>:</OPERATOR>Rectangle<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{		    
			<KEYWORD>var</KEYWORD> a<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> w<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> ph<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> h<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>data</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD>(<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>i<OPERATOR>&lt;</OPERATOR>lng<OPERATOR>;</OPERATOR>i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
			{
				a <OPERATOR>=</OPERATOR> style <OPERATOR>?</OPERATOR> columns[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>cellAlign</OO> <OPERATOR>:</OPERATOR> columns[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>headerAlign</OO><OPERATOR>;</OPERATOR>
				<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>=</OPERATOR> x <OPERATOR>=</OPERATOR> getX(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>=</OPERATOR> y <OPERATOR>=</OPERATOR> getY(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>rect</OBJ><OPERATOR>.</OPERATOR><OO>width</OO> <OPERATOR>=</OPERATOR> w <OPERATOR>=</OPERATOR> columns[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>;</OPERATOR>
				drawRect( rect <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				addMultiCell(w<OPERATOR>,</OPERATOR>ph<OPERATOR>,</OPERATOR>data[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>a<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				setXY(x<OPERATOR>+</OPERATOR>w<OPERATOR>,</OPERATOR>y<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			newLine(h<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> checkPageBreak(height<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE>
		{
			<KEYWORD>return</KEYWORD> getY(<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR>height<OPERATOR>&gt;</OPERATOR>pageBreakTrigger<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> nbLines(width<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR>text<OPERATOR>:</OPERATOR><TYPE>String</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>int</TYPE>
		{
			<KEYWORD>var</KEYWORD> cw<OPERATOR>:</OPERATOR><TYPE>Object</TYPE> <OPERATOR>=</OPERATOR> <OBJ>currentFont</OBJ><OPERATOR>.</OPERATOR><OO>charactersWidth</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD>(width<OPERATOR>==</OPERATOR><NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> width <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>w</OO><OPERATOR>-</OPERATOR>rightMargin<OPERATOR>-</OPERATOR>leftMargin<OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> wmax<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> (width<OPERATOR>-</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR>currentMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR><CONSTANT>I1000</CONSTANT><OPERATOR>/</OPERATOR>fontSize<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> s<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> findAndReplace(<STRING>"<ESC>\r</ESC>"</STRING><OPERATOR>,</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR>text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> nb<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD>(nb<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(nb<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>==</OPERATOR><STRING>"<ESC>\n</ESC>"</STRING><CLOSER>)</CLOSER> nb<OPERATOR>--;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> sep<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> j<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> l<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> nl<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			
			<KEYWORD>while</KEYWORD>(i<OPERATOR>&lt;</OPERATOR>nb<CLOSER>)</CLOSER>
			{
				<KEYWORD>var</KEYWORD> c<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(i<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>(c<OPERATOR>==</OPERATOR><STRING>"<ESC>\n</ESC>"</STRING><CLOSER>)</CLOSER>
				{
					i<OPERATOR>++;</OPERATOR>
					sep<OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
					j<OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
					l<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					nl<OPERATOR>++;</OPERATOR>
					<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				<KEYWORD>if</KEYWORD>(c<OPERATOR>==</OPERATOR><STRING>' '</STRING><CLOSER>)</CLOSER> sep<OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
				l<OPERATOR>+=</OPERATOR>cw[c<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>(l<OPERATOR>&gt;</OPERATOR>wmax<CLOSER>)</CLOSER>
				{
					<KEYWORD>if</KEYWORD>(sep<OPERATOR>==-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
					{
						<KEYWORD>if</KEYWORD>(i<OPERATOR>==</OPERATOR>j<CLOSER>)</CLOSER>
							i<OPERATOR>++;</OPERATOR>
					<CLOSER>}</CLOSER>
					<KEYWORD>else</KEYWORD>
						i<OPERATOR>=</OPERATOR>sep<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
					sep<OPERATOR>=-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
					j<OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
					l<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					nl<OPERATOR>++;</OPERATOR>
				<CLOSER>}</CLOSER>
				<KEYWORD>else</KEYWORD>
					i<OPERATOR>++;</OPERATOR>
			<CLOSER>}</CLOSER>
			<KEYWORD>return</KEYWORD> nl<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF saving API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* save()</COMMENT>
<COMMENT>		* textStyle()</COMMENT>
<COMMENT>		* addCell()</COMMENT>
<COMMENT>		* addMultiCell()</COMMENT>
<COMMENT>		* writeText()</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> method </DOCPROPERTY>Can be se to Method.LOCAL, the savePDF will return the PDF ByteArray. When Method.REMOTE is passed, just specify the path to the create.php file</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> url </DOCPROPERTY>The url of the create.php file</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> downloadMethod </DOCPROPERTY>Lets you specify the way the PDF is going to be available. Use Download.INLINE if you want the PDF to be opened in the browser, use Download.ATTACHMENT if you want to make it available with a save-as dialog box</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> fileName </DOCPROPERTY>The name of the PDF, only available when Method.REMOTE is used</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> frame </DOCPROPERTY>The frame where the window whould be opened</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> The ByteArray PDF when Method.LOCAL is used, otherwise the method returns null</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to save the PDF on the desktop with the AIR runtime :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var f:FileStream = new FileStream();</DOCCOMMENT>
<DOCCOMMENT>		 * file = File.desktopDirectory.resolvePath("generate.pdf");</DOCCOMMENT>
<DOCCOMMENT>		 * f.open( file, FileMode.WRITE);</DOCCOMMENT>
<DOCCOMMENT>		 * var bytes:ByteArray = myPDF.save( Method.LOCAL );</DOCCOMMENT>
<DOCCOMMENT>		 * f.writeBytes(bytes);</DOCCOMMENT>
<DOCCOMMENT>		 * f.close(); </DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to save the PDF through a download dialog-box with Flash or Flex :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.save( Method.REMOTE, "http://localhost/save.php", Download.ATTACHMENT );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to view the PDF in the browser with Flash or Flex :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.save( Method.REMOTE, "http://localhost/save.php", Download.INLINE );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to save the PDF through a download dialog-box with Flash or Flex with any server involved (Flash Player 10 required) :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * var file:FileReference = new FileReference();</DOCCOMMENT>
<DOCCOMMENT>		 * var bytes:ByteArray = myPDF.save( Method.LOCAL );</DOCCOMMENT>
<DOCCOMMENT>		 * file.save( bytes, "generated.pdf" );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> save ( method<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> url<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR> downloadMethod<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'inline'</STRING><OPERATOR>,</OPERATOR> fileName<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>'generated.pdf'</STRING><OPERATOR>,</OPERATOR> frame<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>"_blank"</STRING> <CLOSER>)</CLOSER><OPERATOR>:*</OPERATOR>
		{
			<OBJ>dispatcher</OBJ><OPERATOR>.</OPERATOR><OO>dispatchEvent</OO>( <KEYWORD>new</KEYWORD> ProcessingEvent ( <OBJ>ProcessingEvent</OBJ><OPERATOR>.</OPERATOR><OO>STARTED</OO> <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> started<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <FUNCTION>getTimer</FUNCTION>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			finish(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>dispatcher</OBJ><OPERATOR>.</OPERATOR><OO>dispatchEvent</OO> ( <KEYWORD>new</KEYWORD> ProcessingEvent ( <OBJ>ProcessingEvent</OBJ><OPERATOR>.</OPERATOR><OO>COMPLETE</OO><OPERATOR>,</OPERATOR> <FUNCTION>getTimer</FUNCTION>(<CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> started <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> output<OPERATOR>:*</OPERATOR> <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
			
			<KEYWORD>switch</KEYWORD> (method<CLOSER>)</CLOSER>
			{
				<KEYWORD>case</KEYWORD> <OBJ>Method</OBJ><OPERATOR>.</OPERATOR><OO>LOCAL</OO> <OPERATOR>:</OPERATOR> 
					output <OPERATOR>=</OPERATOR> buffer<OPERATOR>;</OPERATOR>
					<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>	
				
				<KEYWORD>case</KEYWORD> <OBJ>Method</OBJ><OPERATOR>.</OPERATOR><OO>BASE_64</OO> <OPERATOR>:</OPERATOR> 
					output <OPERATOR>=</OPERATOR> <OBJ>Base64</OBJ><OPERATOR>.</OPERATOR><OO>encode64</OO> ( buffer <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
				
				<KEYWORD>case</KEYWORD> <OBJ>Method</OBJ><OPERATOR>.</OPERATOR><OO>REMOTE</OO> <OPERATOR>:</OPERATOR>
					<KEYWORD>var</KEYWORD> header<OPERATOR>:</OPERATOR>URLRequestHeader <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> URLRequestHeader (<STRING>"Content-type"</STRING><OPERATOR>,</OPERATOR><STRING>"application/octet-stream"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> myRequest<OPERATOR>:</OPERATOR>URLRequest <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> URLRequest (url<OPERATOR>+</OPERATOR><STRING>'?name='</STRING><OPERATOR>+</OPERATOR>fileName<OPERATOR>+</OPERATOR><STRING>'&amp;method='</STRING><OPERATOR>+</OPERATOR>downloadMethod <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<OBJ>myRequest</OBJ><OPERATOR>.</OPERATOR><OO>requestHeaders</OO><OPERATOR>.</OPERATOR><OO>push</OO> (header<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<OBJ>myRequest</OBJ><OPERATOR>.</OPERATOR><OO>method</OO> <OPERATOR>=</OPERATOR> <OBJ>URLRequestMethod</OBJ><OPERATOR>.</OPERATOR><OO>POST</OO><OPERATOR>;</OPERATOR>
					<OBJ>myRequest</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> buffer<OPERATOR>;</OPERATOR>
					navigateToURL ( myRequest<OPERATOR>,</OPERATOR> frame <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
				
				<KEYWORD>default</KEYWORD><OPERATOR>:</OPERATOR>
					<KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE>(<STRING>"Unknown Method <ESC>\"</ESC>"</STRING> <OPERATOR>+</OPERATOR> method <OPERATOR>+</OPERATOR> <STRING>"<ESC>\"</ESC>"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			<KEYWORD>return</KEYWORD> output<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF SWF API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* addSWF()</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> addSWF ( swf<OPERATOR>:</OPERATOR><TYPE>ByteArray</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<COMMENT>// coming soon</COMMENT>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF JavaScript API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* addJavaScript()</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The addJavaScript allows you to inject JavaScript code to be executed when the PDF document is opened</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> script </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to open the print dialog when the PDF document is opened :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addJavaScript ("print(true);");</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>	 
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addJavaScript ( script<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			js <OPERATOR>=</OPERATOR> script<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* AlivePDF image API</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		* addImage()</COMMENT>
<COMMENT>		* addImageStream()</COMMENT>
<COMMENT>		* textStyle()</COMMENT>
<COMMENT>		* addCell()</COMMENT>
<COMMENT>		* addMultiCell()</COMMENT>
<COMMENT>		* writeText()</COMMENT>
<COMMENT>		*</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The addImage method takes an incoming DisplayObject. A JPG or PNG snapshot is done and included in the PDF document</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> displayObject </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> resizeMode </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> width </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> height </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> keepTransformation </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> imageFormat </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> quality </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> alpha </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> blendMode </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> link </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a 100% compression quality JPG image into the current page at a position of 0,0 with no resizing behavior :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addImage ( displayObject, 0, 0, 0, 0, true, ImageFormat.JPG, 100, .2 );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>	 
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addImage ( displayObject<OPERATOR>:</OPERATOR>DisplayObject<OPERATOR>,</OPERATOR> resizeMode<OPERATOR>:</OPERATOR>Resize<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> width<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> rotation<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> alpha<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> keepTransformation<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>=</OPERATOR><KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR> imageFormat<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>"PNG"</STRING><OPERATOR>,</OPERATOR> quality<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>100</NUMERIC><OPERATOR>,</OPERATOR> blendMode<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>"Normal"</STRING><OPERATOR>,</OPERATOR> link<OPERATOR>:</OPERATOR>ILink<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			
			<KEYWORD>if</KEYWORD> ( streamDictionary[displayObject<CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER>
			{	
				<KEYWORD>var</KEYWORD> bytes<OPERATOR>:</OPERATOR><TYPE>ByteArray</TYPE><OPERATOR>;</OPERATOR>				
				<KEYWORD>var</KEYWORD> bitmapDataBuffer<OPERATOR>:</OPERATOR>BitmapData<OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> transformMatrix<OPERATOR>:</OPERATOR>Matrix<OPERATOR>;</OPERATOR>
				
				displayObjectbounds <OPERATOR>=</OPERATOR> <OBJ>displayObject</OBJ><OPERATOR>.</OPERATOR><OO>getBounds</OO>( displayObject <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( keepTransformation <CLOSER>)</CLOSER>
				{
					bitmapDataBuffer <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> BitmapData ( <OBJ>displayObject</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR> <OBJ>displayObject</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					transformMatrix <OPERATOR>=</OPERATOR> <OBJ>displayObject</OBJ><OPERATOR>.</OPERATOR><OO>transform</OO><OPERATOR>.</OPERATOR><OO>matrix</OO><OPERATOR>;</OPERATOR>
					<OBJ>transformMatrix</OBJ><OPERATOR>.</OPERATOR><OO>tx</OO> <OPERATOR>=</OPERATOR> <OBJ>transformMatrix</OBJ><OPERATOR>.</OPERATOR><OO>ty</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					<OBJ>transformMatrix</OBJ><OPERATOR>.</OPERATOR><OO>translate</OO>( <OPERATOR>-</OPERATOR>(<OBJ>displayObjectbounds</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>*</OPERATOR><OBJ>displayObject</OBJ><OPERATOR>.</OPERATOR><OO>scaleX</OO><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <OPERATOR>-</OPERATOR>(<OBJ>displayObjectbounds</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>*</OPERATOR><OBJ>displayObject</OBJ><OPERATOR>.</OPERATOR><OO>scaleY</OO><CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> 
				{	
					bitmapDataBuffer <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> BitmapData ( <OBJ>displayObject</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR> <OBJ>displayObject</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					transformMatrix <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Matrix(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<OBJ>transformMatrix</OBJ><OPERATOR>.</OPERATOR><OO>translate</OO>( <OPERATOR>-</OPERATOR><OBJ>displayObjectbounds</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR> <OPERATOR>-</OPERATOR><OBJ>displayObjectbounds</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				
				<OBJ>bitmapDataBuffer</OBJ><OPERATOR>.</OPERATOR><OO>draw</OO> ( displayObject<OPERATOR>,</OPERATOR> transformMatrix <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>var</KEYWORD> id<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> getTotalProperties ( streamDictionary <CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( imageFormat <OPERATOR>==</OPERATOR> <OBJ>ImageFormat</OBJ><OPERATOR>.</OPERATOR><OO>JPG</OO> <CLOSER>)</CLOSER> 
				{
					<KEYWORD>var</KEYWORD> encoder<OPERATOR>:</OPERATOR>JPEGEncoder <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> JPEGEncoder ( quality <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					bytes <OPERATOR>=</OPERATOR> <OBJ>encoder</OBJ><OPERATOR>.</OPERATOR><OO>encode</OO> ( bitmapDataBuffer <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					image <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> DoJPEGImage ( bitmapDataBuffer<OPERATOR>,</OPERATOR> bytes<OPERATOR>,</OPERATOR> id <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( imageFormat <OPERATOR>==</OPERATOR> <OBJ>ImageFormat</OBJ><OPERATOR>.</OPERATOR><OO>PNG</OO> <CLOSER>)</CLOSER>
				{
					bytes <OPERATOR>=</OPERATOR> <OBJ>PNGEncoder</OBJ><OPERATOR>.</OPERATOR><OO>encode</OO> ( bitmapDataBuffer<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					image <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> DoPNGImage ( bitmapDataBuffer<OPERATOR>,</OPERATOR> bytes<OPERATOR>,</OPERATOR> id <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD>
				{
					bytes <OPERATOR>=</OPERATOR> <OBJ>TIFFEncoder</OBJ><OPERATOR>.</OPERATOR><OO>encode</OO> ( bitmapDataBuffer <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					image <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> DoTIFFImage ( bitmapDataBuffer<OPERATOR>,</OPERATOR> bytes<OPERATOR>,</OPERATOR> id <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				
				streamDictionary[displayObject<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> image<OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> image <OPERATOR>=</OPERATOR> streamDictionary[displayObject<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			
			placeImage( x<OPERATOR>,</OPERATOR> y<OPERATOR>,</OPERATOR> width<OPERATOR>,</OPERATOR> height<OPERATOR>,</OPERATOR> rotation<OPERATOR>,</OPERATOR> resizeMode<OPERATOR>,</OPERATOR> link <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> addTransparentImage ( displayObject<OPERATOR>:</OPERATOR>DisplayObject <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<COMMENT>// TBD</COMMENT>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The addEPSImage method takes an incoming EPS (.eps) file or Adobe® Illustrator® file (.ai) and render it on the current page.</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> stream </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> resizeMode </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> width </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> height </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> alpha </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> blendMode </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> link </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add an EPS file stream on the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addEPSImage ( myEPSStream );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>	
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addEPSImage( stream<OPERATOR>:</OPERATOR><TYPE>ByteArray</TYPE><OPERATOR>,</OPERATOR> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> w<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> h<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> useBoundingBox<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE><OPERATOR>=</OPERATOR><KEYWORD>true</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<OBJ>stream</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> source<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <OBJ>stream</OBJ><OPERATOR>.</OPERATOR><OO>readUTFBytes</OO>(<OBJ>stream</OBJ><OPERATOR>.</OPERATOR><OO>bytesAvailable</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> regs<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX><DELIMITER>/</DELIMITER>%%Creator:<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\r</ESC><ESC>\n</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> (<OBJ>regs</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
			{
				<KEYWORD>var</KEYWORD> version<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> regs[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OBJ>version</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>"Adobe Illustrator"</STRING><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER>
				{
					<KEYWORD>var</KEYWORD> buffVersion<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <OBJ>version</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>" "</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> numVersion<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>buffVersion</OBJ><OPERATOR>.</OPERATOR><OO>pop</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
					<KEYWORD>if</KEYWORD> ( numVersion <OPERATOR>&gt;</OPERATOR> <NUMERIC>8</NUMERIC> <CLOSER>)</CLOSER>
						<KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE> (<STRING>"Wrong version, only 1.x, 3.x or 8.x AI files are supported for now."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE>(<STRING>"This EPS file was not created with Adobe® Illustrator®"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>var</KEYWORD> start<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>'%!PS-Adobe'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (start <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> source <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(start<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

			regs <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX><DELIMITER>/</DELIMITER>%%BoundingBox:<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\r</ESC><ESC>\n</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> x1<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> y1<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> x2<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> y2<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> (<OBJ>regs</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>
			{
				<KEYWORD>var</KEYWORD> buffer<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> regs[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>substr</OO>(<NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>" "</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				x1 <OPERATOR>=</OPERATOR> buffer[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				y1 <OPERATOR>=</OPERATOR> buffer[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				x2 <OPERATOR>=</OPERATOR> buffer[<NUMERIC>2</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				y2 <OPERATOR>=</OPERATOR> buffer[<NUMERIC>3</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				
				start <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>'%%EndSetup'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( start <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> start <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>'%%EndProlog'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( start <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER> start <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>'%%BoundingBox'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				source <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(start<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>var</KEYWORD> end<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>'%%PageTrailer'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( end <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> end <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>'showpage'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( end <CLOSER>)</CLOSER> source <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> end<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				write(<STRING>'q'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>var</KEYWORD> k<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> k<OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> dx<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> dy<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> (useBoundingBox<CLOSER>)</CLOSER>
				{
					dx <OPERATOR>=</OPERATOR> x<OPERATOR>*</OPERATOR>k<OPERATOR>-</OPERATOR>x1<OPERATOR>;</OPERATOR>
					dy <OPERATOR>=</OPERATOR> y<OPERATOR>*</OPERATOR>k<OPERATOR>-</OPERATOR>y1<OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER><KEYWORD>else</KEYWORD>
				{
					dx <OPERATOR>=</OPERATOR> x<OPERATOR>*</OPERATOR>k<OPERATOR>;</OPERATOR>
					dy <OPERATOR>=</OPERATOR> y<OPERATOR>*</OPERATOR>k<OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				
				write(sprintf(<STRING>'%.3F %.3F %.3F %.3F %.3F %.3F cm'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>dx<OPERATOR>,</OPERATOR>dy<OPERATOR>+</OPERATOR>(<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>hPt</OO> <OPERATOR>-</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR>y<OPERATOR>*</OPERATOR>k <OPERATOR>-</OPERATOR> (y2<OPERATOR>-</OPERATOR>y1<CLOSER>))))</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>var</KEYWORD> scaleX<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> scaleY<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> (w<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>
				{
					scaleX <OPERATOR>=</OPERATOR> w<OPERATOR>/</OPERATOR>((x2<OPERATOR>-</OPERATOR>x1<CLOSER>)</CLOSER><OPERATOR>/</OPERATOR>k<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD> (h<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>
					{
						scaleY <OPERATOR>=</OPERATOR> h<OPERATOR>/</OPERATOR>((y2<OPERATOR>-</OPERATOR>y1<CLOSER>)</CLOSER><OPERATOR>/</OPERATOR>k<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER><KEYWORD>else</KEYWORD>
					{
						scaleY <OPERATOR>=</OPERATOR> scaleX<OPERATOR>;</OPERATOR>
						h <OPERATOR>=</OPERATOR> (y2<OPERATOR>-</OPERATOR>y1<CLOSER>)</CLOSER><OPERATOR>/</OPERATOR>k <OPERATOR>*</OPERATOR> scaleY<OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
				<CLOSER>}</CLOSER><KEYWORD>else</KEYWORD>
				{
					<KEYWORD>if</KEYWORD> (h<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>
					{
						scaleY <OPERATOR>=</OPERATOR> h<OPERATOR>/</OPERATOR>((y2<OPERATOR>-</OPERATOR>y1<CLOSER>)</CLOSER><OPERATOR>/</OPERATOR>k<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						scaleX <OPERATOR>=</OPERATOR> scaleY<OPERATOR>;</OPERATOR>
						w <OPERATOR>=</OPERATOR> (x2<OPERATOR>-</OPERATOR>x1<CLOSER>)</CLOSER><OPERATOR>/</OPERATOR>k <OPERATOR>*</OPERATOR> scaleX<OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER><KEYWORD>else</KEYWORD>
					{
						w <OPERATOR>=</OPERATOR> (x2<OPERATOR>-</OPERATOR>x1<CLOSER>)</CLOSER><OPERATOR>/</OPERATOR>k<OPERATOR>;</OPERATOR>
						h <OPERATOR>=</OPERATOR> (y2<OPERATOR>-</OPERATOR>y1<CLOSER>)</CLOSER><OPERATOR>/</OPERATOR>k<OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
				<CLOSER>}</CLOSER>
				
				<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><FUNCTION>isNaN</FUNCTION>(scaleX<CLOSER>))</CLOSER>
					write(sprintf(<STRING>'%.3F %.3F %.3F %.3F %.3F %.3F cm'</STRING><OPERATOR>,</OPERATOR> scaleX<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> scaleY<OPERATOR>,</OPERATOR> x1<OPERATOR>*</OPERATOR>(<NUMERIC>1</NUMERIC><OPERATOR>-</OPERATOR>scaleX<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> y2<OPERATOR>*</OPERATOR>(<NUMERIC>1</NUMERIC><OPERATOR>-</OPERATOR>scaleY<CLOSER>)))</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>var</KEYWORD> lines<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(<REGEX><DELIMITER>/</DELIMITER><ESC>\r</ESC><ESC>\n</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\r</ESC><ESC>\n</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><DELIMITER>/</DELIMITER></REGEX><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>var</KEYWORD> u<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> cnt<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>lines</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> line<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> length<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> chunks<OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> c<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> m<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> ty<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> tk<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> cmd<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
				
				<KEYWORD>var</KEYWORD> r<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> g<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> b<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
				
				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR>cnt<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
				{
					line <OPERATOR>=</OPERATOR> lines[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD> (line <OPERATOR>==</OPERATOR> <STRING>''</STRING> <OPERATOR>||</OPERATOR> <OBJ>line</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(<NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'%'</STRING><CLOSER>)</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
					length <OPERATOR>=</OPERATOR> <OBJ>line</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
					chunks <OPERATOR>=</OPERATOR> <OBJ>line</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>' '</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					cmd <OPERATOR>=</OPERATOR> <OBJ>chunks</OBJ><OPERATOR>.</OPERATOR><OO>pop</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
					<KEYWORD>if</KEYWORD> (cmd<OPERATOR>==</OPERATOR><STRING>'Xa'</STRING> <OPERATOR>||</OPERATOR> cmd<OPERATOR>==</OPERATOR><STRING>'XA'</STRING><CLOSER>)</CLOSER>
					{
						r <OPERATOR>=</OPERATOR> <OBJ>chunks</OBJ><OPERATOR>.</OPERATOR><OO>pop</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> 
						g <OPERATOR>=</OPERATOR> <OBJ>chunks</OBJ><OPERATOR>.</OPERATOR><OO>pop</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						b <OPERATOR>=</OPERATOR> <OBJ>chunks</OBJ><OPERATOR>.</OPERATOR><OO>pop</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						write(r<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>g<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>b<OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> (cmd <OPERATOR>==</OPERATOR> <STRING>'Xa'</STRING> <OPERATOR>?</OPERATOR> <STRING>'rg'</STRING> <OPERATOR>:</OPERATOR> <STRING>'RG'</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
						<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
					
					<KEYWORD>switch</KEYWORD> (cmd<CLOSER>)</CLOSER>
					{
						<KEYWORD>case</KEYWORD> <STRING>'m'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'l'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'v'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'y'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'c'</STRING><OPERATOR>:</OPERATOR>
							
						<KEYWORD>case</KEYWORD> <STRING>'k'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'K'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'g'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'G'</STRING><OPERATOR>:</OPERATOR>
							
						<KEYWORD>case</KEYWORD> <STRING>'s'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'S'</STRING><OPERATOR>:</OPERATOR>
							
						<KEYWORD>case</KEYWORD> <STRING>'J'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'j'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'w'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'M'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'d'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'n'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'v'</STRING><OPERATOR>:</OPERATOR>
							write(line<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						
						<KEYWORD>case</KEYWORD> <STRING>'x'</STRING><OPERATOR>:</OPERATOR>
							c <OPERATOR>=</OPERATOR> chunks[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
							m <OPERATOR>=</OPERATOR> chunks[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
							ty <OPERATOR>=</OPERATOR> chunks[<NUMERIC>2</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
							tk <OPERATOR>=</OPERATOR> chunks[<NUMERIC>3</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
							write(c<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>m<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>ty<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>tk<OPERATOR>+</OPERATOR><STRING>" k"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						
						<KEYWORD>case</KEYWORD> <STRING>'X'</STRING><OPERATOR>:</OPERATOR>
							c <OPERATOR>=</OPERATOR> chunks[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
							m <OPERATOR>=</OPERATOR> chunks[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
							ty <OPERATOR>=</OPERATOR> chunks[<NUMERIC>2</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
							tk <OPERATOR>=</OPERATOR> chunks[<NUMERIC>3</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
							write(c<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>m<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>ty<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>tk<OPERATOR>+</OPERATOR><STRING>" K"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						
						<KEYWORD>case</KEYWORD> <STRING>'Y'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'N'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'V'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'L'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'C'</STRING><OPERATOR>:</OPERATOR>
							write(<OBJ>line</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						
						<KEYWORD>case</KEYWORD> <STRING>'b'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'B'</STRING><OPERATOR>:</OPERATOR>
							write(cmd <OPERATOR>+</OPERATOR> <STRING>'*'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						
						<KEYWORD>case</KEYWORD> <STRING>'f'</STRING><OPERATOR>:</OPERATOR>
						<KEYWORD>case</KEYWORD> <STRING>'F'</STRING><OPERATOR>:</OPERATOR>
							<KEYWORD>if</KEYWORD> (u<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>
							{
								<KEYWORD>var</KEYWORD> isU<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
								<KEYWORD>var</KEYWORD> max<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> i<OPERATOR>+</OPERATOR><NUMERIC>5</NUMERIC> <OPERATOR>&lt;</OPERATOR> cnt <OPERATOR>?</OPERATOR> i<OPERATOR>+</OPERATOR><NUMERIC>5</NUMERIC> <OPERATOR>:</OPERATOR> cnt<OPERATOR>;</OPERATOR>
								<KEYWORD>var</KEYWORD> j<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> i<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
								<KEYWORD>for</KEYWORD> ( <OPERATOR>;</OPERATOR> j<OPERATOR>&lt;</OPERATOR>max<OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
									isU <OPERATOR>=</OPERATOR> (isU <OPERATOR>||</OPERATOR> (lines[j<CLOSER>]</CLOSER><OPERATOR>==</OPERATOR><STRING>'U'</STRING> <OPERATOR>||</OPERATOR> lines[j<CLOSER>]</CLOSER><OPERATOR>==</OPERATOR><STRING>'*U'</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
								<KEYWORD>if</KEYWORD> (isU<CLOSER>)</CLOSER> write(<STRING>"f*"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
							<CLOSER>}</CLOSER><KEYWORD>else</KEYWORD>
								write(<STRING>"f*"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						
						<KEYWORD>case</KEYWORD> <STRING>'*u'</STRING><OPERATOR>:</OPERATOR>
							u<OPERATOR>++;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						
						<KEYWORD>case</KEYWORD> <STRING>'*U'</STRING><OPERATOR>:</OPERATOR>
							u<OPERATOR>--;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
				<CLOSER>}</CLOSER>
				
				write(<STRING>'Q'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE>(<STRING>"No bounding box found in the current EPS file"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * The addImageStream method takes an incoming image as a ByteArray. This method can be used to embed high-quality images (300 dpi) to the PDF.</DOCCOMMENT>
<DOCCOMMENT>		 * You must specify the image color space, if you don't know, there is a lot of chance the color space will be ColorSpace.DEVICE_RGB.</DOCCOMMENT>
<DOCCOMMENT>		 * </DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> imageBytes </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> colorSpace </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> resizeMode </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> x </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> y </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> width </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> height </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> alpha </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> blendMode </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> keepTransformation </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> link </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@example</DOCTAG><DOCPROPERTY> </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add an RGB image as a ByteArray into the current page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addImageStream( bytes, ColorSpace.DEVICE_RGB );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a CMYK image as a ByteArray into the current page, the image will take the whole page :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * var resize:Resize = new Resize ( Mode.FULL_PAGE, Position.CENTERED ); </DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addImageStream( bytes, ColorSpace.DEVICE_RGB, resize );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * This example shows how to add a CMYK image as a ByteArray into the current page, the image will take the whole page but white margins will be preserved :</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;div class="listing"&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * var resize:Resize = new Resize ( Mode.RESIZE_PAGE, Position.CENTERED ); </DOCCOMMENT>
<DOCCOMMENT>		 * myPDF.addImageStream( bytes, ColorSpace.DEVICE_CMYK, resize );</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/pre&gt;</DOCCOMMENT>
<DOCCOMMENT>		 * &lt;/div&gt;</DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>	 
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addImageStream ( imageBytes<OPERATOR>:</OPERATOR><TYPE>ByteArray</TYPE><OPERATOR>,</OPERATOR> colorSpace<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> resizeMode<OPERATOR>:</OPERATOR>Resize<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> width<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> rotation<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> alpha<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> blendMode<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>=</OPERATOR><STRING>"Normal"</STRING><OPERATOR>,</OPERATOR> link<OPERATOR>:</OPERATOR>ILink<OPERATOR>=</OPERATOR><KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			setAlpha ( alpha<OPERATOR>,</OPERATOR> blendMode <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( streamDictionary[imageBytes<CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER>
			{
				<OBJ>imageBytes</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
				
				<KEYWORD>var</KEYWORD> id<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> getTotalProperties ( streamDictionary <CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( <OBJ>imageBytes</OBJ><OPERATOR>.</OPERATOR><OO>readUnsignedShort</OO>(<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <OBJ>JPEGImage</OBJ><OPERATOR>.</OPERATOR><OO>HEADER</OO> <CLOSER>)</CLOSER> image <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> JPEGImage ( imageBytes<OPERATOR>,</OPERATOR> colorSpace<OPERATOR>,</OPERATOR> id <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>(<OBJ>imageBytes</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>imageBytes</OBJ><OPERATOR>.</OPERATOR><OO>readUnsignedShort</OO>(<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <OBJ>PNGImage</OBJ><OPERATOR>.</OPERATOR><OO>HEADER</OO> <CLOSER>)</CLOSER> image <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> PNGImage ( imageBytes<OPERATOR>,</OPERATOR> colorSpace<OPERATOR>,</OPERATOR> id <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>(<OBJ>imageBytes</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>imageBytes</OBJ><OPERATOR>.</OPERATOR><OO>readUTFBytes</OO>(<NUMERIC>3</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <OBJ>GIFImage</OBJ><OPERATOR>.</OPERATOR><OO>HEADER</OO> <CLOSER>)</CLOSER> 
				{
					<OBJ>imageBytes</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> decoder<OPERATOR>:</OPERATOR>GIFPlayer <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> GIFPlayer(<KEYWORD>false</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> capture<OPERATOR>:</OPERATOR>BitmapData <OPERATOR>=</OPERATOR> <OBJ>decoder</OBJ><OPERATOR>.</OPERATOR><OO>loadBytes</OO>( imageBytes <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> bytes<OPERATOR>:</OPERATOR><TYPE>ByteArray</TYPE> <OPERATOR>=</OPERATOR> <OBJ>PNGEncoder</OBJ><OPERATOR>.</OPERATOR><OO>encode</OO> ( capture<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					image <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> DoPNGImage ( capture<OPERATOR>,</OPERATOR> bytes<OPERATOR>,</OPERATOR> id <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>(<OBJ>imageBytes</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>imageBytes</OBJ><OPERATOR>.</OPERATOR><OO>endian</OO> <OPERATOR>=</OPERATOR> <OBJ>Endian</OBJ><OPERATOR>.</OPERATOR><OO>LITTLE_ENDIAN</OO><CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>imageBytes</OBJ><OPERATOR>.</OPERATOR><OO>readByte</OO>(<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <NUMERIC>73</NUMERIC> <CLOSER>)</CLOSER>
				{
					image <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> TIFFImage ( imageBytes<OPERATOR>,</OPERATOR> colorSpace<OPERATOR>,</OPERATOR> id <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE> (<STRING>"Image format not supported for now."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				streamDictionary[imageBytes<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> image<OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> image <OPERATOR>=</OPERATOR> streamDictionary[imageBytes<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			
			placeImage( x<OPERATOR>,</OPERATOR> y<OPERATOR>,</OPERATOR> width<OPERATOR>,</OPERATOR> height<OPERATOR>,</OPERATOR> rotation<OPERATOR>,</OPERATOR> resizeMode<OPERATOR>,</OPERATOR> link <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> placeImage ( x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> width<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> rotation<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> resizeMode<OPERATOR>:</OPERATOR>Resize<OPERATOR>,</OPERATOR> link<OPERATOR>:</OPERATOR>ILink <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( width <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> height <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER>
			{
				width <OPERATOR>=</OPERATOR> <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>/</OPERATOR>k<OPERATOR>;</OPERATOR>
				height <OPERATOR>=</OPERATOR> <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>/</OPERATOR>k<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>if</KEYWORD> ( width <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> width <OPERATOR>=</OPERATOR> height<OPERATOR>*</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>/</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( height <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> height <OPERATOR>=</OPERATOR> width<OPERATOR>*</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>/</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> realWidth<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>-</OPERATOR>(leftMargin<OPERATOR>+</OPERATOR>rightMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> realHeight<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>-</OPERATOR>(bottomMargin<OPERATOR>+</OPERATOR>topMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> xPos<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> yPos<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( resizeMode <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER>
				resizeMode <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Resize ( <OBJ>Mode</OBJ><OPERATOR>.</OPERATOR><OO>NONE</OO><OPERATOR>,</OPERATOR> <OBJ>Position</OBJ><OPERATOR>.</OPERATOR><OO>LEFT</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( <OBJ>resizeMode</OBJ><OPERATOR>.</OPERATOR><OO>mode</OO> <OPERATOR>==</OPERATOR> <OBJ>Mode</OBJ><OPERATOR>.</OPERATOR><OO>RESIZE_PAGE</OO> <CLOSER>)</CLOSER>
			{
				<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>resize</OO>( <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>+</OPERATOR>(leftMargin<OPERATOR>+</OPERATOR>rightMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>+</OPERATOR>(bottomMargin<OPERATOR>+</OPERATOR>topMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> k <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>resizeMode</OBJ><OPERATOR>.</OPERATOR><OO>mode</OO> <OPERATOR>==</OPERATOR> <OBJ>Mode</OBJ><OPERATOR>.</OPERATOR><OO>FIT_TO_PAGE</OO> <CLOSER>)</CLOSER>
			{			
				<KEYWORD>var</KEYWORD> ratio<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>min</OO> ( realWidth<OPERATOR>/</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR> realHeight<OPERATOR>/</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>height</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( ratio <OPERATOR>&lt;</OPERATOR> <NUMERIC>1</NUMERIC> <CLOSER>)</CLOSER>
				{
					width <OPERATOR>*=</OPERATOR> ratio<OPERATOR>;</OPERATOR>
					height <OPERATOR>*=</OPERATOR> ratio<OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>if</KEYWORD> ( <OBJ>resizeMode</OBJ><OPERATOR>.</OPERATOR><OO>mode</OO> <OPERATOR>!=</OPERATOR> <OBJ>Mode</OBJ><OPERATOR>.</OPERATOR><OO>RESIZE_PAGE</OO> <CLOSER>)</CLOSER>
			{		
				<KEYWORD>if</KEYWORD> ( <OBJ>resizeMode</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>==</OPERATOR> <OBJ>Position</OBJ><OPERATOR>.</OPERATOR><OO>CENTERED</OO> <CLOSER>)</CLOSER>
				{	
					x <OPERATOR>=</OPERATOR> (realWidth <OPERATOR>-</OPERATOR> (width<OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>*.</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>;</OPERATOR>
					y <OPERATOR>=</OPERATOR> (realHeight <OPERATOR>-</OPERATOR> (height<OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>*.</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>;</OPERATOR>
					
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>resizeMode</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>==</OPERATOR> <OBJ>Position</OBJ><OPERATOR>.</OPERATOR><OO>RIGHT</OO> <CLOSER>)</CLOSER>
					x <OPERATOR>=</OPERATOR> (realWidth <OPERATOR>-</OPERATOR> (width<OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			xPos <OPERATOR>=</OPERATOR> x<OPERATOR>+</OPERATOR>leftMargin<OPERATOR>*</OPERATOR>k<OPERATOR>;</OPERATOR>
			yPos <OPERATOR>=</OPERATOR> (<OBJ>resizeMode</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>==</OPERATOR> <OBJ>Position</OBJ><OPERATOR>.</OPERATOR><OO>CENTERED</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>resizeMode</OBJ><OPERATOR>.</OPERATOR><OO>mode</OO> <OPERATOR>!=</OPERATOR> <OBJ>Mode</OBJ><OPERATOR>.</OPERATOR><OO>RESIZE_PAGE</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> y<OPERATOR>+</OPERATOR>(bottomMargin<OPERATOR>+</OPERATOR>topMargin<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k <OPERATOR>:</OPERATOR> ((<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>topMargin<CLOSER>)</CLOSER><OPERATOR>-</OPERATOR>(y<OPERATOR>+</OPERATOR>height<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>;</OPERATOR>

			rotate(rotation<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write (sprintf(<STRING>'q %.2f 0 0 %.2f %.2f %.2f cm'</STRING><OPERATOR>,</OPERATOR> width<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> height<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> xPos<OPERATOR>,</OPERATOR> yPos<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			write (sprintf(<STRING>'/I%d Do Q'</STRING><OPERATOR>,</OPERATOR> <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>resourceId</OO><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( link <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> addLink( xPos<OPERATOR>,</OPERATOR> yPos<OPERATOR>,</OPERATOR> width<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> height<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> link <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> <FUNCTION>toString</FUNCTION> (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>String</TYPE>
		{	
			<KEYWORD>return</KEYWORD> <STRING>"[PDF totalPages="</STRING><OPERATOR>+</OPERATOR>totalPages<OPERATOR>+</OPERATOR><STRING>" nbImages="</STRING><OPERATOR>+</OPERATOR>getTotalProperties(streamDictionary<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>" totalFonts="</STRING><OPERATOR>+</OPERATOR>totalFonts<OPERATOR>+</OPERATOR><STRING>" embeddedFonts="</STRING><OPERATOR>+</OPERATOR>totalEmbeddedFonts<OPERATOR>+</OPERATOR><STRING>" PDFVersion="</STRING><OPERATOR>+</OPERATOR>version<OPERATOR>+</OPERATOR><STRING>" AlivePDFVersion="</STRING><OPERATOR>+</OPERATOR><OBJ>PDF</OBJ><OPERATOR>.</OPERATOR><OO>ALIVEPDF_VERSION</OO><OPERATOR>+</OPERATOR><STRING>"]"</STRING><OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER> 
		
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		<COMMENT>/*</COMMENT>
<COMMENT>		* protected members</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</COMMENT>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> finish(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			close(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> setUnit ( unit<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>String</TYPE>
		{	
			<KEYWORD>if</KEYWORD> ( unit <OPERATOR>==</OPERATOR> <OBJ>Unit</OBJ><OPERATOR>.</OPERATOR><OO>POINT</OO> <CLOSER>)</CLOSER> k <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( unit <OPERATOR>==</OPERATOR> <OBJ>Unit</OBJ><OPERATOR>.</OPERATOR><OO>MM</OO> <CLOSER>)</CLOSER> k <OPERATOR>=</OPERATOR> <NUMERIC>72</NUMERIC><OPERATOR>/</OPERATOR><NUMERIC>25.4</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( unit <OPERATOR>==</OPERATOR> <OBJ>Unit</OBJ><OPERATOR>.</OPERATOR><OO>CM</OO> <CLOSER>)</CLOSER> k <OPERATOR>=</OPERATOR> <NUMERIC>72</NUMERIC><OPERATOR>/</OPERATOR><NUMERIC>2.54</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( unit <OPERATOR>==</OPERATOR> <OBJ>Unit</OBJ><OPERATOR>.</OPERATOR><OO>INCHES</OO> <CLOSER>)</CLOSER> k <OPERATOR>=</OPERATOR> <NUMERIC>72</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>RangeError</TYPE> (<STRING>'Incorrect unit: '</STRING> <OPERATOR>+</OPERATOR> unit<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>return</KEYWORD> unit<OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> acceptPageBreak(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE>
		{
			<KEYWORD>return</KEYWORD> autoPageBreak<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> curve ( x1<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y1<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> x2<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y2<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> x3<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y3<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> h<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>;</OPERATOR>
			write(sprintf(<STRING>'%.2f %.2f %.2f %.2f %.2f %.2f c '</STRING><OPERATOR>,</OPERATOR> x1<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> (h<OPERATOR>-</OPERATOR>y1<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> x2<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> (h<OPERATOR>-</OPERATOR>y2<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> x3<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR> (h<OPERATOR>-</OPERATOR>y3<CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> getStringWidth( content<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Number</TYPE>
		{
			charactersWidth <OPERATOR>=</OPERATOR> <OBJ>currentFont</OBJ><OPERATOR>.</OPERATOR><OO>charactersWidth</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> w<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> l<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>content</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> cwAux<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			
			<KEYWORD>while</KEYWORD> (l<OPERATOR>--</OPERATOR><CLOSER>)</CLOSER> 
			{	
				cwAux <OPERATOR>+=</OPERATOR> charactersWidth[<OBJ>content</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(l<CLOSER>)]</CLOSER> <KEYWORD>as</KEYWORD> <TYPE>int</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( <FUNCTION>isNaN</FUNCTION> ( cwAux <CLOSER>)</CLOSER> <CLOSER>)</CLOSER> cwAux <OPERATOR>=</OPERATOR> <NUMERIC>580</NUMERIC><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			w <OPERATOR>=</OPERATOR> cwAux<OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> w<OPERATOR>*</OPERATOR>fontSize<OPERATOR>*.</OPERATOR><NUMERIC>001</NUMERIC><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> open(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			state <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> close (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD>( <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> 
				addPage(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			inFooter <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			footer(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			inFooter <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			finishPage(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			finishDocument(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> addExtGState( graphicState<OPERATOR>:</OPERATOR><TYPE>Object</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>int</TYPE>
		{
			<OBJ>graphicStates</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> ( graphicState <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <OBJ>graphicStates</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> setExtGState( graphicState<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			write(sprintf(<STRING>'/GS%d gs'</STRING><OPERATOR>,</OPERATOR> graphicState<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> insertExtGState(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>graphicStates</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> lng<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
			{
				newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				graphicStates[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>n</OO> <OPERATOR>=</OPERATOR> n<OPERATOR>;</OPERATOR>
				write(<STRING>'&lt;&lt;/Type /ExtGState'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> k<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <KEYWORD>in</KEYWORD> graphicStates[i<CLOSER>])</CLOSER> write(<STRING>'/'</STRING><OPERATOR>+</OPERATOR>k<OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR>graphicStates[i<CLOSER>]</CLOSER>[k<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> getChannels ( color<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>String</TYPE>
		{
			<KEYWORD>var</KEYWORD> r<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <OPERATOR>&amp;</OPERATOR> <NUMERIC>0xFF0000</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> g<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <OPERATOR>&amp;</OPERATOR> <NUMERIC>0x00FF00</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> b<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> (color <OPERATOR>&amp;</OPERATOR> <NUMERIC>0x0000FF</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> (r <OPERATOR>/</OPERATOR> <NUMERIC>0xFF</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> (g <OPERATOR>/</OPERATOR> <NUMERIC>0xFF</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> (b <OPERATOR>/</OPERATOR> <NUMERIC>0xFF</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> getCurrentDate (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>String</TYPE>
		{
			<KEYWORD>var</KEYWORD> myDate<OPERATOR>:</OPERATOR><TYPE>Date</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Date</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> year<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>myDate</OBJ><OPERATOR>.</OPERATOR><OO>getFullYear</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> month<OPERATOR>:*</OPERATOR> <OPERATOR>=</OPERATOR> <OBJ>myDate</OBJ><OPERATOR>.</OPERATOR><OO>getMonth</OO>(<CLOSER>)</CLOSER> <OPERATOR>&lt;</OPERATOR> <NUMERIC>10</NUMERIC> <OPERATOR>?</OPERATOR> <STRING>"0"</STRING><OPERATOR>+</OPERATOR><TYPE>Number</TYPE>(<OBJ>myDate</OBJ><OPERATOR>.</OPERATOR><OO>getMonth</OO>(<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <OBJ>myDate</OBJ><OPERATOR>.</OPERATOR><OO>getMonth</OO>(<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> day<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <OBJ>myDate</OBJ><OPERATOR>.</OPERATOR><OO>getDate</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> hours<OPERATOR>:*</OPERATOR> <OPERATOR>=</OPERATOR> <OBJ>myDate</OBJ><OPERATOR>.</OPERATOR><OO>getHours</OO>(<CLOSER>)</CLOSER> <OPERATOR>&lt;</OPERATOR> <NUMERIC>10</NUMERIC> <OPERATOR>?</OPERATOR> <STRING>"0"</STRING><OPERATOR>+</OPERATOR><TYPE>Number</TYPE>(<OBJ>myDate</OBJ><OPERATOR>.</OPERATOR><OO>getHours</OO>(<CLOSER>))</CLOSER> <OPERATOR>:</OPERATOR> <OBJ>myDate</OBJ><OPERATOR>.</OPERATOR><OO>getHours</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> currentDate<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <OBJ>myDate</OBJ><OPERATOR>.</OPERATOR><OO>getFullYear</OO>(<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>''</STRING><OPERATOR>+</OPERATOR>month<OPERATOR>+</OPERATOR><STRING>''</STRING><OPERATOR>+</OPERATOR>day<OPERATOR>+</OPERATOR><STRING>''</STRING><OPERATOR>+</OPERATOR>hours<OPERATOR>+</OPERATOR><STRING>''</STRING><OPERATOR>+</OPERATOR><OBJ>myDate</OBJ><OPERATOR>.</OPERATOR><OO>getMinutes</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> currentDate<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> findAndReplace ( search<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> replace<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> source<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>String</TYPE>
		{
			<KEYWORD>return</KEYWORD> <OBJ>source</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(search<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>join</OO>(replace<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> createPageTree(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			compressedPages <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>ByteArray</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			nb <OPERATOR>=</OPERATOR> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD>( aliasNbPages <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER>
				<KEYWORD>for</KEYWORD>( n <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> n<OPERATOR>&lt;</OPERATOR>nb<OPERATOR>;</OPERATOR> n<OPERATOR>++</OPERATOR> <CLOSER>)</CLOSER> 
					arrayPages[n<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>content</OO> <OPERATOR>=</OPERATOR> findAndReplace ( aliasNbPages<OPERATOR>,</OPERATOR> ( nb <KEYWORD>as</KEYWORD> <TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> arrayPages[n<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>content</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			filter <OPERATOR>=</OPERATOR> (compress<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'/Filter /'</STRING><OPERATOR>+</OPERATOR><OBJ>Filter</OBJ><OPERATOR>.</OPERATOR><OO>FLATE_DECODE</OO><OPERATOR>+</OPERATOR><STRING>' '</STRING> <OPERATOR>:</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
			
			offsets[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			write(<STRING>'1 0 obj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&lt;&lt;/Type /Pages'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Kids ['</STRING><OPERATOR>+</OPERATOR><OBJ>pagesReferences</OBJ><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>" "</STRING><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>']'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Count '</STRING><OPERATOR>+</OPERATOR>nb<OPERATOR>+</OPERATOR><STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> p<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD> each ( <KEYWORD>var</KEYWORD> page<OPERATOR>:</OPERATOR>Page <KEYWORD>in</KEYWORD> arrayPages <CLOSER>)</CLOSER>	
			{
				newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'&lt;&lt;/Type /Page'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'/Parent 1 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write (sprintf (<STRING>'/MediaBox [0 0 %.2f %.2f]'</STRING><OPERATOR>,</OPERATOR> <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>,</OPERATOR> <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write (<STRING>'/Resources 2 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>annotations</OO> <OPERATOR>!=</OPERATOR> <STRING>''</STRING> <CLOSER>)</CLOSER> write (<STRING>'/Annots ['</STRING> <OPERATOR>+</OPERATOR> <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>annotations</OO> <OPERATOR>+</OPERATOR> <STRING>']'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write (<STRING>'/Rotate '</STRING> <OPERATOR>+</OPERATOR> <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>rotation</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>advanceTiming</OO> <OPERATOR>!=</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> write (<STRING>'/Dur '</STRING> <OPERATOR>+</OPERATOR> <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>advanceTiming</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>transitions</OO><OPERATOR>.</OPERATOR><OO>length</OO> <CLOSER>)</CLOSER> write ( <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>transitions</OO> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write (<STRING>'/Contents '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write (<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( compress <CLOSER>)</CLOSER> 
				{
					<OBJ>compressedPages</OBJ><OPERATOR>.</OPERATOR><OO>writeMultiByte</OO>( <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>content</OO><OPERATOR>+</OPERATOR><STRING>"<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR> <STRING>"windows-1252"</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<OBJ>compressedPages</OBJ><OPERATOR>.</OPERATOR><OO>compress</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'&lt;&lt;'</STRING><OPERATOR>+</OPERATOR>filter<OPERATOR>+</OPERATOR><STRING>'/Length '</STRING><OPERATOR>+</OPERATOR><OBJ>compressedPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>+</OPERATOR><STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'stream'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>writeBytes</OO>( compressedPages <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>writeUTFBytes</OO>(<STRING>"<ESC>\n</ESC>"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'endstream'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> 
				{
					newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'&lt;&lt;'</STRING><OPERATOR>+</OPERATOR>filter<OPERATOR>+</OPERATOR><STRING>'/Length '</STRING><OPERATOR>+</OPERATOR><OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>content</OO><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>+</OPERATOR><STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					writeStream(<OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>content</OO><OPERATOR>.</OPERATOR><OO>substr</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <OBJ>page</OBJ><OPERATOR>.</OPERATOR><OO>content</OO><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> writeXObjectDictionary(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>for</KEYWORD> each ( <KEYWORD>var</KEYWORD> image<OPERATOR>:</OPERATOR>PDFImage <KEYWORD>in</KEYWORD> streamDictionary <CLOSER>)</CLOSER> 
			write(<STRING>'/I'</STRING><OPERATOR>+</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>resourceId</OO><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>n</OO><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> writeResourcesDictionary(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write(<STRING>'/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Font &lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> each( <KEYWORD>var</KEYWORD> font<OPERATOR>:</OPERATOR>IFont <KEYWORD>in</KEYWORD> fonts <CLOSER>)</CLOSER> 
			write(<STRING>'/F'</STRING><OPERATOR>+</OPERATOR><OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>id</OO><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR><OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>resourceId</OO><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/XObject &lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			writeXObjectDictionary(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/ExtGState &lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> k<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <KEYWORD>in</KEYWORD> graphicStates<CLOSER>)</CLOSER> 
				write(<STRING>'/GS'</STRING><OPERATOR>+</OPERATOR>k<OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR>graphicStates[k<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>n</OO> <OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/ColorSpace &lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> each( <KEYWORD>var</KEYWORD> color<OPERATOR>:</OPERATOR>SpotColor <KEYWORD>in</KEYWORD> spotColors<CLOSER>)</CLOSER>
				write(<STRING>'/CS'</STRING><OPERATOR>+</OPERATOR><OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>i</OO><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR><OBJ>color</OBJ><OPERATOR>.</OPERATOR><OO>n</OO><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Properties &lt;&lt;/OC1 '</STRING><OPERATOR>+</OPERATOR>nOCGPrint<OPERATOR>+</OPERATOR><STRING>' 0 R /OC2 '</STRING><OPERATOR>+</OPERATOR>nOCGView<OPERATOR>+</OPERATOR><STRING>' 0 R&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> insertImages (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> filter<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> (compress<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'/Filter /'</STRING><OPERATOR>+</OPERATOR><OBJ>Filter</OBJ><OPERATOR>.</OPERATOR><OO>FLATE_DECODE</OO><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>:</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> stream<OPERATOR>:</OPERATOR><TYPE>ByteArray</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD> each ( <KEYWORD>var</KEYWORD> image<OPERATOR>:</OPERATOR>PDFImage <KEYWORD>in</KEYWORD> streamDictionary <CLOSER>)</CLOSER>
			{
				newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>n</OO> <OPERATOR>=</OPERATOR> n<OPERATOR>;</OPERATOR>
				write(<STRING>'&lt;&lt;/Type /XObject'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'/Subtype /Image'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'/Width '</STRING><OPERATOR>+</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'/Height '</STRING><OPERATOR>+</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD>( <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>colorSpace</OO> <OPERATOR>==</OPERATOR> <OBJ>ColorSpace</OBJ><OPERATOR>.</OPERATOR><OO>INDEXED</OO> <CLOSER>)</CLOSER> write (<STRING>'/ColorSpace [/'</STRING><OPERATOR>+</OPERATOR><OBJ>ColorSpace</OBJ><OPERATOR>.</OPERATOR><OO>INDEXED</OO><OPERATOR>+</OPERATOR><STRING>' /'</STRING><OPERATOR>+</OPERATOR><OBJ>ColorSpace</OBJ><OPERATOR>.</OPERATOR><OO>DEVICE_RGB</OO><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR>((image <KEYWORD>as</KEYWORD> PNGImage<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>pal</OO><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R]'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>else</KEYWORD>
				{
					write(<STRING>'/ColorSpace /'</STRING><OPERATOR>+</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>colorSpace</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD>( <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>colorSpace</OO> <OPERATOR>==</OPERATOR> <OBJ>ColorSpace</OBJ><OPERATOR>.</OPERATOR><OO>DEVICE_CMYK</OO> <CLOSER>)</CLOSER> write (<STRING>'/Decode [1 0 1 0 1 0 1 0]'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				
				write (<STRING>'/BitsPerComponent '</STRING><OPERATOR>+</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>bitsPerComponent</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> (<OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> write (<STRING>'/Filter /'</STRING><OPERATOR>+</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( image <KEYWORD>is</KEYWORD> PNGImage <OPERATOR>||</OPERATOR> image <KEYWORD>is</KEYWORD> GIFImage <CLOSER>)</CLOSER>
				{
					<KEYWORD>if</KEYWORD> ( <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>parameters</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> write (<OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>parameters</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
					<KEYWORD>if</KEYWORD> ( <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>transparency</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>transparency</OO> <KEYWORD>is</KEYWORD> <TYPE>Array</TYPE> <CLOSER>)</CLOSER>
					{
						<KEYWORD>var</KEYWORD> trns<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
						<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>transparency</OO><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
						<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>i<OPERATOR>&lt;</OPERATOR>lng<OPERATOR>;</OPERATOR>i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> trns <OPERATOR>+=</OPERATOR> <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>transparency</OO>[i<CLOSER>]</CLOSER><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR><OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>transparency</OO>[i<CLOSER>]</CLOSER><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>;</OPERATOR>
						write(<STRING>'/Mask ['</STRING><OPERATOR>+</OPERATOR>trns<OPERATOR>+</OPERATOR><STRING>']'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
					<CLOSER>}</CLOSER>
				<CLOSER>}</CLOSER>
				
				stream <OPERATOR>=</OPERATOR> <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>bytes</OO><OPERATOR>;</OPERATOR>
				write(<STRING>'/Length '</STRING><OPERATOR>+</OPERATOR><OBJ>stream</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>+</OPERATOR><STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'stream'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>writeBytes</OO> (stream<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>writeUTFBytes</OO> (<STRING>"<ESC>\n</ESC>"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>"endstream"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD>( <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>colorSpace</OO> <OPERATOR>==</OPERATOR> <OBJ>ColorSpace</OBJ><OPERATOR>.</OPERATOR><OO>INDEXED</OO> <CLOSER>)</CLOSER>
				{
					newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> pal<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> compress <OPERATOR>?</OPERATOR> (image <KEYWORD>as</KEYWORD> PNGImage<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>pal</OO> <OPERATOR>:</OPERATOR> (image <KEYWORD>as</KEYWORD> PNGImage<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>pal</OO>
					write(<STRING>'&lt;&lt;'</STRING><OPERATOR>+</OPERATOR>filter<OPERATOR>+</OPERATOR><STRING>'/Length '</STRING><OPERATOR>+</OPERATOR><OBJ>pal</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>+</OPERATOR><STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					writeStream(pal<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> insertFonts (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>var</KEYWORD> nf<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> n<OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> diff<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <KEYWORD>in</KEYWORD> differences<CLOSER>)</CLOSER>
			{
				newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'&lt;&lt;/Type /Encoding /BaseEncoding /WinAnsiEncoding /Differences ['</STRING><OPERATOR>+</OPERATOR>diff<OPERATOR>+</OPERATOR><STRING>']&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<KEYWORD>var</KEYWORD> font<OPERATOR>:</OPERATOR>IFont<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> embeddedFont<OPERATOR>:</OPERATOR>EmbeddedFont<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> fontDescription<OPERATOR>:</OPERATOR>FontDescription<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> type<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> name<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> charactersWidth<OPERATOR>:</OPERATOR><TYPE>Object</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> s<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD> each ( font <KEYWORD>in</KEYWORD> fonts <CLOSER>)</CLOSER>
			{
				<KEYWORD>if</KEYWORD> ( font <KEYWORD>is</KEYWORD> EmbeddedFont <CLOSER>)</CLOSER>
				{
					<KEYWORD>if</KEYWORD> ( <OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>==</OPERATOR> <OBJ>FontType</OBJ><OPERATOR>.</OPERATOR><OO>TRUETYPE</OO> <CLOSER>)</CLOSER>
					{
						embeddedFont <OPERATOR>=</OPERATOR> font <KEYWORD>as</KEYWORD> EmbeddedFont<OPERATOR>;</OPERATOR>
						fontDescription <OPERATOR>=</OPERATOR> <OBJ>embeddedFont</OBJ><OPERATOR>.</OPERATOR><OO>description</OO><OPERATOR>;</OPERATOR>
						newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						write (<STRING>'&lt;&lt;/Length '</STRING><OPERATOR>+</OPERATOR><OBJ>embeddedFont</OBJ><OPERATOR>.</OPERATOR><OO>stream</OO><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						write (<STRING>'/Filter /'</STRING><OPERATOR>+</OPERATOR><OBJ>Filter</OBJ><OPERATOR>.</OPERATOR><OO>FLATE_DECODE</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						write (<STRING>'/Length1 '</STRING><OPERATOR>+</OPERATOR><OBJ>embeddedFont</OBJ><OPERATOR>.</OPERATOR><OO>originalSize</OO><OPERATOR>+</OPERATOR><STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						write(<STRING>'stream'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						<OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>writeBytes</OO> (<OBJ>embeddedFont</OBJ><OPERATOR>.</OPERATOR><OO>stream</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						<OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>writeUTFBytes</OO> (<STRING>"<ESC>\n</ESC>"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						write(<STRING>"endstream"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
					<CLOSER>}</CLOSER>			
				<CLOSER>}</CLOSER>
				
				<OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>resourceId</OO> <OPERATOR>=</OPERATOR> n<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
				type <OPERATOR>=</OPERATOR> <OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
				name <OPERATOR>=</OPERATOR> <OBJ>font</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD>( type <OPERATOR>==</OPERATOR> <OBJ>FontType</OBJ><OPERATOR>.</OPERATOR><OO>CORE</OO> <CLOSER>)</CLOSER>
				{
					newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'&lt;&lt;/Type /Font'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/BaseFont /'</STRING><OPERATOR>+</OPERATOR>name<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/Subtype /Type1'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD>( name <OPERATOR>!=</OPERATOR> <OBJ>FontFamily</OBJ><OPERATOR>.</OPERATOR><OO>SYMBOL</OO> <OPERATOR>&amp;&amp;</OPERATOR> name <OPERATOR>!=</OPERATOR> <OBJ>FontFamily</OBJ><OPERATOR>.</OPERATOR><OO>ZAPFDINGBATS</OO> <CLOSER>)</CLOSER> write (<STRING>'/Encoding /WinAnsiEncoding'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD>( type <OPERATOR>==</OPERATOR> <OBJ>FontType</OBJ><OPERATOR>.</OPERATOR><OO>TYPE1</OO> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <OBJ>FontType</OBJ><OPERATOR>.</OPERATOR><OO>TRUETYPE</OO> <CLOSER>)</CLOSER>
				{						
					newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'&lt;&lt;/Type /Font'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/BaseFont /'</STRING><OPERATOR>+</OPERATOR>name<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/Subtype /'</STRING><OPERATOR>+</OPERATOR>type<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/FirstChar 32'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/LastChar 255'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/Widths '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/FontDescriptor '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><NUMERIC>2</NUMERIC><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD>( <OBJ>embeddedFont</OBJ><OPERATOR>.</OPERATOR><OO>encoding</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER>
					{
						<KEYWORD>if</KEYWORD>( <OBJ>embeddedFont</OBJ><OPERATOR>.</OPERATOR><OO>differences</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>write</OO> (<STRING>'/Encoding '</STRING><OPERATOR>+</OPERATOR>(<TYPE>int</TYPE>(nf<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><TYPE>int</TYPE>(<OBJ>embeddedFont</OBJ><OPERATOR>.</OPERATOR><OO>differences</OO><CLOSER>))</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>write</OO> (<STRING>'/Encoding /WinAnsiEncoding'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
					write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					s <OPERATOR>=</OPERATOR> <STRING>'[ '</STRING><OPERATOR>;</OPERATOR>
					<KEYWORD>for</KEYWORD>(<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR><NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> s <OPERATOR>+=</OPERATOR> (<OBJ>embeddedFont</OBJ><OPERATOR>.</OPERATOR><OO>widths</OO>[i<CLOSER>])</CLOSER><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>;</OPERATOR>
					write(s<OPERATOR>+</OPERATOR><STRING>']'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'&lt;&lt;/Type /FontDescriptor'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/FontName /'</STRING><OPERATOR>+</OPERATOR>name<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> 
					write(<STRING>'/FontWeight '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>fontWeight</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/Descent '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>descent</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/Ascent '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>ascent</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/AvgWidth '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>averageWidth</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/Flags '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>flags</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/FontBBox ['</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>boundingBox</OO>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>boundingBox</OO>[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>boundingBox</OO>[<NUMERIC>2</NUMERIC><CLOSER>]</CLOSER><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>boundingBox</OO>[<NUMERIC>3</NUMERIC><CLOSER>]</CLOSER><OPERATOR>+</OPERATOR><STRING>']'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/ItalicAngle '</STRING><OPERATOR>+</OPERATOR> <OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>italicAngle</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/StemV '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>stemV</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/MissingWidth '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>missingWidth</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/CapHeight '</STRING><OPERATOR>+</OPERATOR><OBJ>fontDescription</OBJ><OPERATOR>.</OPERATOR><OO>capHeight</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'/FontFile'</STRING><OPERATOR>+</OPERATOR>(type<OPERATOR>==</OPERATOR><STRING>'Type1'</STRING> <OPERATOR>?</OPERATOR> <STRING>''</STRING> <OPERATOR>:</OPERATOR> <STRING>'2'</STRING><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR>(<OBJ>embeddedFont</OBJ><OPERATOR>.</OPERATOR><OO>resourceId</OO><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE>(<STRING>"Unsupported font type: "</STRING> <OPERATOR>+</OPERATOR> type <OPERATOR>+</OPERATOR> <STRING>"<ESC>\n</ESC>Make sure you used the UnicodePDF class if you used the ArialUnicodeMS font class"</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> insertJS(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			jsResource <OPERATOR>=</OPERATOR> n<OPERATOR>;</OPERATOR>
			write(<STRING>'&lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Names [(EmbeddedJS) '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R]'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/S /JavaScript'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/JS '</STRING><OPERATOR>+</OPERATOR>escapeString(js<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> writeResources(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			insertOCG(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			insertSpotColors(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			insertExtGState(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			insertFonts(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			insertImages(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( js <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> insertJS(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			offsets[<NUMERIC>2</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			write(<STRING>'2 0 obj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			writeResourcesDictionary(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			insertBookmarks(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> insertOCG(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			nOCGPrint <OPERATOR>=</OPERATOR> n<OPERATOR>;</OPERATOR>
			write(<STRING>'&lt;&lt;/Type /OCG /Name '</STRING><OPERATOR>+</OPERATOR>escapeString(<STRING>'print'</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Usage &lt;&lt;/Print &lt;&lt;/PrintState /ON&gt;&gt; /View &lt;&lt;/ViewState /OFF&gt;&gt;&gt;&gt;&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			nOCGView <OPERATOR>=</OPERATOR> n<OPERATOR>;</OPERATOR>
			write(<STRING>'&lt;&lt;/Type /OCG /Name '</STRING><OPERATOR>+</OPERATOR>escapeString(<STRING>'view'</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Usage &lt;&lt;/Print &lt;&lt;/PrintState /OFF&gt;&gt; /View &lt;&lt;/ViewState /ON&gt;&gt;&gt;&gt;&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> insertBookmarks (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			<KEYWORD>var</KEYWORD> nb<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>outlines</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( nb <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> lru<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> level<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> o<OPERATOR>:</OPERATOR>Outline<OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <KEYWORD>in</KEYWORD> outlines <CLOSER>)</CLOSER>
			{
				o <OPERATOR>=</OPERATOR> outlines[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD>(<OBJ>o</OBJ><OPERATOR>.</OPERATOR><OO>level</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>
				{
					<KEYWORD>var</KEYWORD> parent<OPERATOR>:*</OPERATOR> <OPERATOR>=</OPERATOR> lru[<TYPE>int</TYPE>(<OBJ>o</OBJ><OPERATOR>.</OPERATOR><OO>level</OO><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)]</CLOSER><OPERATOR>;</OPERATOR>
					<COMMENT>//Set parent and last pointers</COMMENT>
					outlines[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>parent</OO><OPERATOR>=</OPERATOR>parent<OPERATOR>;</OPERATOR>
					outlines[parent<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>last</OO><OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD>(<OBJ>o</OBJ><OPERATOR>.</OPERATOR><OO>level</OO> <OPERATOR>&gt;</OPERATOR> level<CLOSER>)</CLOSER>
					{
						<COMMENT>//Level increasing: set first pointer</COMMENT>
						outlines[parent<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>first</OO><OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER>
				<CLOSER>}</CLOSER>
				<KEYWORD>else</KEYWORD> outlines[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>parent</OO><OPERATOR>=</OPERATOR>nb<OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>(<OBJ>o</OBJ><OPERATOR>.</OPERATOR><OO>level</OO><OPERATOR>&lt;=</OPERATOR>level <OPERATOR>&amp;&amp;</OPERATOR> <TYPE>int</TYPE>(i<CLOSER>)</CLOSER><OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>
				{
					<COMMENT>//Set prev and next pointers</COMMENT>
					<KEYWORD>var</KEYWORD> prev<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR>lru[<OBJ>o</OBJ><OPERATOR>.</OPERATOR><OO>level</OO><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
					outlines[prev<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
					outlines[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>prev</OO><OPERATOR>=</OPERATOR>prev<OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				lru[<OBJ>o</OBJ><OPERATOR>.</OPERATOR><OO>level</OO><CLOSER>]</CLOSER><OPERATOR>=</OPERATOR>i<OPERATOR>;</OPERATOR>
				level<OPERATOR>=</OPERATOR><OBJ>o</OBJ><OPERATOR>.</OPERATOR><OO>level</OO><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<COMMENT>//Outline items</COMMENT>
			<KEYWORD>var</KEYWORD> n<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> n<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			
			<KEYWORD>for</KEYWORD> each ( <KEYWORD>var</KEYWORD> p<OPERATOR>:</OPERATOR>Outline <KEYWORD>in</KEYWORD> outlines <CLOSER>)</CLOSER>
			{
				newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'&lt;&lt;/Title '</STRING><OPERATOR>+</OPERATOR>escapeString(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>text</OO><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'/Parent '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><TYPE>int</TYPE>(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO><CLOSER>))</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>prev</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> write(<STRING>'/Prev '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><TYPE>int</TYPE>(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>prev</OO><CLOSER>))</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>next</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> write(<STRING>'/Next '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><TYPE>int</TYPE>(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><CLOSER>))</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>first</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> write(<STRING>'/First '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><TYPE>int</TYPE>(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>first</OO><CLOSER>))</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD>(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>last</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> write(<STRING>'/Last '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><TYPE>int</TYPE>(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>last</OO><CLOSER>))</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write (<STRING>'/C ['</STRING><OPERATOR>+</OPERATOR><OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>redMultiplier</OO><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR><OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>greenMultiplier</OO><OPERATOR>+</OPERATOR><STRING>' '</STRING><OPERATOR>+</OPERATOR><OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>blueMultiplier</OO><OPERATOR>+</OPERATOR><STRING>']'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(sprintf(<STRING>'/Dest [%d 0 R /XYZ 0 %.2f null]'</STRING><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>+</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>*</OPERATOR><OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>pages</OO><OPERATOR>,</OPERATOR>(<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR><OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>k<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'/Count 0&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			
			<COMMENT>//Outline root</COMMENT>
			newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			outlineRoot <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>n</OO><OPERATOR>;</OPERATOR>
			write(<STRING>'&lt;&lt;/Type /Outlines /First '</STRING><OPERATOR>+</OPERATOR>n<OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Last '</STRING><OPERATOR>+</OPERATOR>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>n</OO><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> insertInfos(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write (<STRING>'/Producer '</STRING><OPERATOR>+</OPERATOR>escapeString(<STRING>'AlivePDF '</STRING><OPERATOR>+</OPERATOR><OBJ>PDF</OBJ><OPERATOR>.</OPERATOR><OO>ALIVEPDF_VERSION</OO><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ((documentTitle <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>))</CLOSER> write(<STRING>'/Title '</STRING><OPERATOR>+</OPERATOR>escapeString(documentTitle<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ((documentSubject <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>))</CLOSER> write(<STRING>'/Subject '</STRING><OPERATOR>+</OPERATOR>escapeString(documentSubject<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ((documentAuthor <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>))</CLOSER> write(<STRING>'/Author '</STRING><OPERATOR>+</OPERATOR>escapeString(documentAuthor<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ((documentKeywords <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>))</CLOSER> write(<STRING>'/Keywords '</STRING><OPERATOR>+</OPERATOR>escapeString(documentKeywords<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ((documentCreator <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>))</CLOSER> write(<STRING>'/Creator '</STRING><OPERATOR>+</OPERATOR>escapeString(documentCreator<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/CreationDate '</STRING><OPERATOR>+</OPERATOR>escapeString(<STRING>'D:'</STRING><OPERATOR>+</OPERATOR>getCurrentDate(<CLOSER>)))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> createCatalog (<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write(<STRING>'/Type /Catalog'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Pages 1 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( zoomMode <OPERATOR>==</OPERATOR> <OBJ>Display</OBJ><OPERATOR>.</OPERATOR><OO>FULL_PAGE</OO> <CLOSER>)</CLOSER> write(<STRING>'/OpenAction [3 0 R /Fit]'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( zoomMode <OPERATOR>==</OPERATOR> <OBJ>Display</OBJ><OPERATOR>.</OPERATOR><OO>FULL_WIDTH</OO> <CLOSER>)</CLOSER> write(<STRING>'/OpenAction [3 0 R /FitH null]'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( zoomMode <OPERATOR>==</OPERATOR> <OBJ>Display</OBJ><OPERATOR>.</OPERATOR><OO>REAL</OO> <CLOSER>)</CLOSER> write(<STRING>'/OpenAction [3 0 R /XYZ null null '</STRING><OPERATOR>+</OPERATOR>zoomFactor<OPERATOR>+</OPERATOR><STRING>']'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>(zoomMode <KEYWORD>is</KEYWORD> <TYPE>String</TYPE><CLOSER>)</CLOSER> <CLOSER>)</CLOSER> write(<STRING>'/OpenAction [3 0 R /XYZ null null '</STRING><OPERATOR>+</OPERATOR>(zoomMode<OPERATOR>*.</OPERATOR><NUMERIC>01</NUMERIC><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>']'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			write(<STRING>'/PageLayout /'</STRING><OPERATOR>+</OPERATOR>layoutMode<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( <OBJ>viewerPreferences</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <CLOSER>)</CLOSER> write ( <STRING>'/ViewerPreferences '</STRING><OPERATOR>+</OPERATOR> viewerPreferences <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( <OBJ>outlines</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <CLOSER>)</CLOSER>
			{
				write(<STRING>'/Outlines '</STRING><OPERATOR>+</OPERATOR>outlineRoot<OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				write(<STRING>'/PageMode /UseOutlines'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> write(<STRING>'/PageMode /'</STRING><OPERATOR>+</OPERATOR>pageMode<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( js <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER>  write(<STRING>'/Names &lt;&lt;/JavaScript '</STRING><OPERATOR>+</OPERATOR>(jsResource<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>var</KEYWORD> p<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> nOCGPrint<OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> v<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> nOCGView<OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> ast<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <STRING>"&lt;&lt;/Event /Print /OCGs ["</STRING><OPERATOR>+</OPERATOR>p<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>v<OPERATOR>+</OPERATOR><STRING>"] /Category [/Print]&gt;&gt; &lt;&lt;/Event /View /OCGs ["</STRING><OPERATOR>+</OPERATOR>p<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>v<OPERATOR>+</OPERATOR><STRING>"] /Category [/View]&gt;&gt;"</STRING><OPERATOR>;</OPERATOR>
			write(<STRING>"/OCProperties &lt;&lt;/OCGs ["</STRING><OPERATOR>+</OPERATOR>p<OPERATOR>+</OPERATOR><STRING>" "</STRING><OPERATOR>+</OPERATOR>v<OPERATOR>+</OPERATOR><STRING>"] /D &lt;&lt;/ON ["</STRING><OPERATOR>+</OPERATOR>p<OPERATOR>+</OPERATOR><STRING>"] /OFF ["</STRING><OPERATOR>+</OPERATOR>v<OPERATOR>+</OPERATOR><STRING>"] /AS ["</STRING><OPERATOR>+</OPERATOR>ast<OPERATOR>+</OPERATOR><STRING>"]&gt;&gt;&gt;&gt;"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> createHeader(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write(<STRING>'%PDF-'</STRING><OPERATOR>+</OPERATOR>version<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> createTrailer(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write(<STRING>'/Size '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Root '</STRING><OPERATOR>+</OPERATOR>n<OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'/Info '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>' 0 R'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> finishDocument(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{	
			<KEYWORD>if</KEYWORD> ( pageMode <OPERATOR>==</OPERATOR> <OBJ>PageMode</OBJ><OPERATOR>.</OPERATOR><OO>USE_ATTACHMENTS</OO> <CLOSER>)</CLOSER> version <OPERATOR>=</OPERATOR> <STRING>"1.6"</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( layoutMode <OPERATOR>==</OPERATOR> <OBJ>Layout</OBJ><OPERATOR>.</OPERATOR><OO>TWO_PAGE_LEFT</OO> <OPERATOR>||</OPERATOR> layoutMode <OPERATOR>==</OPERATOR> <OBJ>Layout</OBJ><OPERATOR>.</OPERATOR><OO>TWO_PAGE_RIGHT</OO> <OPERATOR>||</OPERATOR> visibility <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> version <OPERATOR>=</OPERATOR> <STRING>"1.5"</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>graphicStates</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&amp;&amp;</OPERATOR> version <OPERATOR>&lt;</OPERATOR> <STRING>"1.4"</STRING> <CLOSER>)</CLOSER> version <OPERATOR>=</OPERATOR> <STRING>"1.4"</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>outlines</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <CLOSER>)</CLOSER> version <OPERATOR>=</OPERATOR> <STRING>"1.4"</STRING><OPERATOR>;</OPERATOR>
			<COMMENT>//Resources</COMMENT>
			createHeader(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> started<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>;</OPERATOR>
			started <OPERATOR>=</OPERATOR> <FUNCTION>getTimer</FUNCTION>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			createPageTree(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>dispatcher</OBJ><OPERATOR>.</OPERATOR><OO>dispatchEvent</OO> ( <KEYWORD>new</KEYWORD> ProcessingEvent ( <OBJ>ProcessingEvent</OBJ><OPERATOR>.</OPERATOR><OO>PAGE_TREE</OO><OPERATOR>,</OPERATOR> <FUNCTION>getTimer</FUNCTION>(<CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> started <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			started <OPERATOR>=</OPERATOR> <FUNCTION>getTimer</FUNCTION>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			writeResources(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>dispatcher</OBJ><OPERATOR>.</OPERATOR><OO>dispatchEvent</OO> ( <KEYWORD>new</KEYWORD> ProcessingEvent ( <OBJ>ProcessingEvent</OBJ><OPERATOR>.</OPERATOR><OO>RESOURCES</OO><OPERATOR>,</OPERATOR> <FUNCTION>getTimer</FUNCTION>(<CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> started <CLOSER>)</CLOSER> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<COMMENT>//Info</COMMENT>
			newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			insertInfos(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<COMMENT>//Catalog</COMMENT>
			newObj(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			createCatalog(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'endobj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<COMMENT>//Cross-ref</COMMENT>
			<KEYWORD>var</KEYWORD> o<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			write(<STRING>'xref'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'0 '</STRING><OPERATOR>+</OPERATOR>(n<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'0000000000 65535 f '</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD>(<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>i<OPERATOR>&lt;=</OPERATOR>n<OPERATOR>;</OPERATOR>i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> write(sprintf(<STRING>'%010d 00000 n '</STRING><OPERATOR>,</OPERATOR>offsets[i<CLOSER>]))</CLOSER><OPERATOR>;</OPERATOR>
			<COMMENT>//Trailer</COMMENT>
			write(<STRING>'trailer'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&lt;&lt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			createTrailer(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'&gt;&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'startxref'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<OBJ>o</OBJ><OPERATOR>.</OPERATOR><OO>toString</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'%%EOF'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			state <OPERATOR>=</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> startPage ( newOrientation<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			nbPages <OPERATOR>=</OPERATOR> <OBJ>arrayPages</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			state <OPERATOR>=</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>

			setXY(leftMargin<OPERATOR>,</OPERATOR> topMargin<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( newOrientation <OPERATOR>==</OPERATOR> <STRING>''</STRING> <CLOSER>)</CLOSER> newOrientation <OPERATOR>=</OPERATOR> defaultOrientation<OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( newOrientation <OPERATOR>!=</OPERATOR> defaultOrientation <CLOSER>)</CLOSER> orientationChanges[nbPages<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			
			pageBreakTrigger <OPERATOR>=</OPERATOR> arrayPages[nbPages<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>bottomMargin<OPERATOR>;</OPERATOR>
			currentOrientation <OPERATOR>=</OPERATOR> newOrientation<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> finishPage(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			setVisible(<OBJ>Visibility</OBJ><OPERATOR>.</OPERATOR><OO>ALL</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			state <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>	
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> newObj(<CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			offsets[<TYPE>int</TYPE>(<OPERATOR>++</OPERATOR>n<CLOSER>)]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			write (n<OPERATOR>+</OPERATOR><STRING>' 0 obj'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> doUnderline( x<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR><TYPE>Number</TYPE><OPERATOR>,</OPERATOR> content<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>String</TYPE>
		{
			underlinePosition <OPERATOR>=</OPERATOR> <OBJ>currentFont</OBJ><OPERATOR>.</OPERATOR><OO>underlinePosition</OO><OPERATOR>;</OPERATOR>
			underlineThickness <OPERATOR>=</OPERATOR> <OBJ>currentFont</OBJ><OPERATOR>.</OPERATOR><OO>underlineThickness</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> w<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> getStringWidth(content<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR>ws<OPERATOR>*</OPERATOR>substrCount(content<OPERATOR>,</OPERATOR><STRING>' '</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> sprintf(<STRING>'%.2f %.2f %.2f %.2f re f'</STRING><OPERATOR>,</OPERATOR>x<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(<OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>h</OO><OPERATOR>-</OPERATOR>(y<OPERATOR>-</OPERATOR>(underlinePosition<OPERATOR>*.</OPERATOR><NUMERIC>001</NUMERIC><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>fontSize<CLOSER>))</CLOSER><OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>w<OPERATOR>*</OPERATOR>k<OPERATOR>,</OPERATOR>(<OPERATOR>-</OPERATOR>underlineThickness<OPERATOR>*.</OPERATOR><NUMERIC>001</NUMERIC><CLOSER>)</CLOSER><OPERATOR>*</OPERATOR>fontSizePt<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> substrCount ( content<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> search<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>int</TYPE>
		{
			<KEYWORD>return</KEYWORD> <OBJ>content</OBJ><OPERATOR>.</OPERATOR><OO>split</OO> (search<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>			
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> getTotalProperties ( object<OPERATOR>:</OPERATOR><TYPE>Object</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>int</TYPE>
		{
			<KEYWORD>var</KEYWORD> num<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> p<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER> num<OPERATOR>++;</OPERATOR>
			<KEYWORD>return</KEYWORD> num<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> escapeString(content<OPERATOR>:</OPERATOR><TYPE>String</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>String</TYPE>
		{
			<KEYWORD>return</KEYWORD> <STRING>'('</STRING><OPERATOR>+</OPERATOR>escapeIt(content<CLOSER>)</CLOSER><OPERATOR>+</OPERATOR><STRING>')'</STRING><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> escapeIt(content<OPERATOR>:</OPERATOR><TYPE>String</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>String</TYPE>
		{
			<KEYWORD>return</KEYWORD> findAndReplace(<STRING>')'</STRING><OPERATOR>,</OPERATOR><STRING>'<ESC>\\</ESC>)'</STRING><OPERATOR>,</OPERATOR>findAndReplace(<STRING>'('</STRING><OPERATOR>,</OPERATOR><STRING>'<ESC>\\</ESC>('</STRING><OPERATOR>,</OPERATOR>findAndReplace(<STRING>'<ESC>\\</ESC>'</STRING><OPERATOR>,</OPERATOR><STRING>'<ESC>\\</ESC><ESC>\\</ESC>'</STRING><OPERATOR>,</OPERATOR>findAndReplace(<STRING>'<ESC>\r</ESC>'</STRING><OPERATOR>,</OPERATOR><STRING>'<ESC>\\</ESC>r'</STRING><OPERATOR>,</OPERATOR>content<CLOSER>))))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> 
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> writeStream(stream<OPERATOR>:</OPERATOR><TYPE>String</TYPE><CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			write(<STRING>'stream'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(stream<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			write(<STRING>'endstream'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>protected</KEYWORD> <KEYWORD>function</KEYWORD> write( content<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<KEYWORD>if</KEYWORD> ( currentPage <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <CLOSER>)</CLOSER> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE> (<STRING>"No pages available, please call the addPage method first."</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( state <OPERATOR>==</OPERATOR> <NUMERIC>2</NUMERIC> <CLOSER>)</CLOSER> <OBJ>currentPage</OBJ><OPERATOR>.</OPERATOR><OO>content</OO> <OPERATOR>+=</OPERATOR> content<OPERATOR>+</OPERATOR><STRING>"<ESC>\n</ESC>"</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> 
			{
				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>isLinux <CLOSER>)</CLOSER> <OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>writeMultiByte</OO>( content<OPERATOR>+</OPERATOR><STRING>"<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR> <STRING>"windows-1252"</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>else</KEYWORD> 
				{
					<KEYWORD>var</KEYWORD> contentTxt<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <OPERATOR>=</OPERATOR> <OBJ>content</OBJ><OPERATOR>.</OPERATOR><OO>toString</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> lng<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>contentTxt</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
					<KEYWORD>for</KEYWORD>(<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR>lng<OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i<CLOSER>)</CLOSER>
						<OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>writeByte</OO>(<OBJ>contentTxt</OBJ><OPERATOR>.</OPERATOR><OO>charCodeAt</OO>(i<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
					<OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>writeByte</OO>(<NUMERIC>0x0A</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		
		<COMMENT>//--</COMMENT>
		<COMMENT>//-- IEventDispatcher</COMMENT>
		<COMMENT>//--</COMMENT>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> addEventListener( type<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> listener<OPERATOR>:</OPERATOR><TYPE>Function</TYPE><OPERATOR>,</OPERATOR> useCapture<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR> priority<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> useWeakReference<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<OBJ>dispatcher</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO>( type<OPERATOR>,</OPERATOR> listener<OPERATOR>,</OPERATOR> useCapture<OPERATOR>,</OPERATOR> priority<OPERATOR>,</OPERATOR> useWeakReference <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> dispatchEvent( event<OPERATOR>:</OPERATOR><TYPE>Event</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE>
		{
			<KEYWORD>return</KEYWORD> <OBJ>dispatcher</OBJ><OPERATOR>.</OPERATOR><OO>dispatchEvent</OO>( event <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> hasEventListener( type<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE>
		{
			<KEYWORD>return</KEYWORD> <OBJ>dispatcher</OBJ><OPERATOR>.</OPERATOR><OO>hasEventListener</OO>( type <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> removeEventListener( type<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> listener<OPERATOR>:</OPERATOR><TYPE>Function</TYPE><OPERATOR>,</OPERATOR> useCapture<OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD>
		{
			<OBJ>dispatcher</OBJ><OPERATOR>.</OPERATOR><OO>removeEventListener</OO>( type<OPERATOR>,</OPERATOR> listener<OPERATOR>,</OPERATOR> useCapture <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> willTrigger( type<OPERATOR>:</OPERATOR><TYPE>String</TYPE> <CLOSER>)</CLOSER><OPERATOR>:</OPERATOR><TYPE>Boolean</TYPE>
		{
			<KEYWORD>return</KEYWORD> <OBJ>dispatcher</OBJ><OPERATOR>.</OPERATOR><OO>willTrigger</OO>( type <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
	<CLOSER>}</CLOSER>	
<CLOSER>}</CLOSER>