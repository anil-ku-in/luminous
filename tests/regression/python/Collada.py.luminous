<COMMENT># -------------------------------------------------------------------------</COMMENT>
<COMMENT># Illusoft Collada 1.4 plugin for Blender version 0.3.89</COMMENT>
<COMMENT># --------------------------------------------------------------------------</COMMENT>
<COMMENT># ***** BEGIN GPL LICENSE BLOCK *****</COMMENT>
<COMMENT>#</COMMENT>
<COMMENT># Copyright (C) 2006: Illusoft - colladablender@illusoft.com</COMMENT>
<COMMENT>#</COMMENT>
<COMMENT># This program is free software; you can redistribute it and/or modify</COMMENT>
<COMMENT># it under the terms of the GNU General Public License as published by</COMMENT>
<COMMENT># the Free Software Foundation; either version 2 of the License,</COMMENT>
<COMMENT># or (at your option) any later version.</COMMENT>
<COMMENT>#</COMMENT>
<COMMENT># This program is distributed in the hope that it will be useful,</COMMENT>
<COMMENT># but WITHOUT ANY WARRANTY; without even the implied warranty of</COMMENT>
<COMMENT># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the</COMMENT>
<COMMENT># GNU General Public License for more details.</COMMENT>
<COMMENT>#</COMMENT>
<COMMENT># You should have received a copy of the GNU General Public License</COMMENT>
<COMMENT># along with this program; if not, write to the Free Software Foundation,</COMMENT>
<COMMENT># Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</COMMENT>
<COMMENT>#</COMMENT>
<COMMENT># ***** END GPL LICENCE BLOCK *****</COMMENT>
<COMMENT># --------------------------------------------------------------------------</COMMENT>

<KEYWORD>from</KEYWORD> <TYPE>xml</TYPE>.<TYPE>dom</TYPE>.<TYPE>minidom</TYPE> <KEYWORD>import</KEYWORD> <OPERATOR>*</OPERATOR>
<KEYWORD>from</KEYWORD> <TYPE>datetime</TYPE> <KEYWORD>import</KEYWORD> <OPERATOR>*</OPERATOR>

<COMMENT># The number of decimals to export floats to</COMMENT>
<CONSTANT>ROUND</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>5</NUMERIC>

<COMMENT>#---Functions----</COMMENT>

angleToRadian <OPERATOR>=</OPERATOR> <NUMERIC>3.1415926</NUMERIC> <OPERATOR>/</OPERATOR> <NUMERIC>180.0</NUMERIC>
radianToAngle <OPERATOR>=</OPERATOR> <NUMERIC>180.0</NUMERIC> <OPERATOR>/</OPERATOR> <NUMERIC>3.1415926</NUMERIC>

<COMMENT># Convert a string to a float if the value exists</COMMENT>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToFloat</USER_FUNCTION>(val):
	<KEYWORD>if</KEYWORD> val <OPERATOR>is</OPERATOR> <TYPE>None</TYPE> <OPERATOR>or</OPERATOR> val <OPERATOR>==</OPERATOR> <STRING>''</STRING>:
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	<KEYWORD>else</KEYWORD>:
		<KEYWORD>return</KEYWORD> <TYPE>float</TYPE>(val)

<COMMENT># Convert a string to a int if the value exists</COMMENT>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToInt</USER_FUNCTION>(val):
	<KEYWORD>if</KEYWORD> val <OPERATOR>is</OPERATOR> <TYPE>None</TYPE> <OPERATOR>or</OPERATOR> val <OPERATOR>==</OPERATOR> <STRING>''</STRING>:
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	<KEYWORD>else</KEYWORD>:
		<KEYWORD>return</KEYWORD> <TYPE>int</TYPE>(val)
	
<COMMENT># Convert a string to a list of 3 floats e.g '1.0 2.0 3.0' -&gt; [1.0, 2.0, 3.0]</COMMENT>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToFloat3</USER_FUNCTION>(stringValue):
	<KEYWORD>if</KEYWORD> stringValue <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	split <OPERATOR>=</OPERATOR> <OBJ>stringValue</OBJ>.<OO>split</OO>( )
	<KEYWORD>return</KEYWORD> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>( split<OPERATOR>[</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>]</OPERATOR> ), <TYPE>float</TYPE>( split<OPERATOR>[</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>]</OPERATOR> ), <TYPE>float</TYPE>( split<OPERATOR>[</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>]</OPERATOR> ) <OPERATOR>]</OPERATOR>

<COMMENT># Convert a string to a list of 2 floats e.g '1.0 2.0' -&gt; [1.0, 2.0]</COMMENT>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToFloat2</USER_FUNCTION>(stringValue, errorText<OPERATOR>=</OPERATOR><STRING>''</STRING>):
	<KEYWORD>if</KEYWORD> stringValue <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	split <OPERATOR>=</OPERATOR> <OBJ>stringValue</OBJ>.<OO>split</OO>( )
	<KEYWORD>try</KEYWORD>:
		<KEYWORD>return</KEYWORD> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>( split<OPERATOR>[</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>]</OPERATOR> ), <TYPE>float</TYPE>( split<OPERATOR>[</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>]</OPERATOR> )<OPERATOR>]</OPERATOR>
	<KEYWORD>except</KEYWORD> IndexError:
		<KEYWORD>print</KEYWORD> <STRING>'Error: '</STRING> <OPERATOR>+</OPERATOR> errorText
		<KEYWORD>raise</KEYWORD>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToList</USER_FUNCTION>(var):
	result <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	<KEYWORD>if</KEYWORD> var <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> result
	
	split <OPERATOR>=</OPERATOR> <OBJ>var</OBJ>.<OO>split</OO>( )
	<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> split:
		<OBJ>result</OBJ>.<OO>append</OO>(i)
	<KEYWORD>return</KEYWORD> result
	
<COMMENT># Convert a string or list to a list of floats</COMMENT>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToFloatList</USER_FUNCTION>(var):
	result <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	<KEYWORD>if</KEYWORD> var <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> result
		
	<KEYWORD>if</KEYWORD> <FUNCTION>type</FUNCTION>(var) <OPERATOR>==</OPERATOR> <TYPE>list</TYPE>:
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> var:
			<OBJ>result</OBJ>.<OO>append</OO>(<TYPE>float</TYPE>(i))
	<KEYWORD>else</KEYWORD>:	 
		split <OPERATOR>=</OPERATOR> <OBJ>var</OBJ>.<OO>split</OO>( )
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> split:
			<OBJ>result</OBJ>.<OO>append</OO>(<TYPE>float</TYPE>(i))
	<KEYWORD>return</KEYWORD> result

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToIntList</USER_FUNCTION>(lst):
	result <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	<KEYWORD>if</KEYWORD> lst <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> result
	<KEYWORD>if</KEYWORD> <FUNCTION>type</FUNCTION>(lst) <OPERATOR>==</OPERATOR> <TYPE>list</TYPE>:
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> lst:
			<OBJ>result</OBJ>.<OO>append</OO>(<TYPE>int</TYPE>(i))
	<KEYWORD>else</KEYWORD>:
		split <OPERATOR>=</OPERATOR> <OBJ>lst</OBJ>.<OO>split</OO>( )		
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> split:
			<OBJ>result</OBJ>.<OO>append</OO>(<TYPE>int</TYPE>(i))
	<KEYWORD>return</KEYWORD> result

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToBoolList</USER_FUNCTION>(lst):
	result <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	<KEYWORD>if</KEYWORD> lst <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> result
	<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> lst:
		<OBJ>result</OBJ>.<OO>append</OO>(bool(i))
	<KEYWORD>return</KEYWORD> result

<COMMENT># Convert a string to a list of 4 floats e.g '1.0 2.0 3.0 4.0' -&gt; [1.0, 2.0, 3.0, 4.0]</COMMENT>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToFloat4</USER_FUNCTION>(stringValue):
	split <OPERATOR>=</OPERATOR> <OBJ>stringValue</OBJ>.<OO>split</OO>( )
	<KEYWORD>return</KEYWORD> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>( split<OPERATOR>[</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>]</OPERATOR> ), <TYPE>float</TYPE>( split<OPERATOR>[</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>]</OPERATOR> ), <TYPE>float</TYPE>( split<OPERATOR>[</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>]</OPERATOR> ) , <TYPE>float</TYPE>( split<OPERATOR>[</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>]</OPERATOR>)<OPERATOR>]</OPERATOR>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToFloat7</USER_FUNCTION>(stringValue):
	data <OPERATOR>=</OPERATOR> <OBJ>stringValue</OBJ>.<OO>split</OO>( )
	<KEYWORD>return</KEYWORD> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>6</NUMERIC><OPERATOR>]</OPERATOR>)<OPERATOR>]</OPERATOR>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>AddVec3</USER_FUNCTION>( vector1, vector2 ):
	<OBJ>vector1</OBJ>.<OO>x</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <OBJ>vector2</OBJ>.<OO>x</OO>
	<OBJ>vector1</OBJ>.<OO>y</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <OBJ>vector2</OBJ>.<OO>y</OO>
	<OBJ>vector1</OBJ>.<OO>z</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <OBJ>vector2</OBJ>.<OO>z</OO>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToMatrix4</USER_FUNCTION>( matrixElement ):
	data <OPERATOR>=</OPERATOR> <OBJ>matrixElement</OBJ>.<OO>split</OO>( )
	
	vec1 <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>8</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>12</NUMERIC><OPERATOR>]</OPERATOR>) <OPERATOR>]</OPERATOR>
	vec2 <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>9</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>13</NUMERIC><OPERATOR>]</OPERATOR>) <OPERATOR>]</OPERATOR>
	vec3 <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>6</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>10</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>14</NUMERIC><OPERATOR>]</OPERATOR>) <OPERATOR>]</OPERATOR>
	vec4 <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>7</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>11</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>15</NUMERIC><OPERATOR>]</OPERATOR>) <OPERATOR>]</OPERATOR>
	
	<KEYWORD>return</KEYWORD> <OPERATOR>[</OPERATOR> vec1, vec2, vec3, vec4 <OPERATOR>]</OPERATOR>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToMatrix3</USER_FUNCTION>(matrixElement):
	data <OPERATOR>=</OPERATOR> <OBJ>matrixElement</OBJ>.<OO>split</OO>( )
	
	vec1 <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>6</NUMERIC><OPERATOR>]</OPERATOR>) <OPERATOR>]</OPERATOR>
	vec2 <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>7</NUMERIC><OPERATOR>]</OPERATOR>)<OPERATOR>]</OPERATOR>
	vec3 <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>]</OPERATOR>), <TYPE>float</TYPE>(data<OPERATOR>[</OPERATOR><NUMERIC>8</NUMERIC><OPERATOR>]</OPERATOR>)<OPERATOR>]</OPERATOR>
	
	<KEYWORD>return</KEYWORD> <OPERATOR>[</OPERATOR> vec1, vec2, vec3 <OPERATOR>]</OPERATOR>
	
<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetVector3</USER_FUNCTION>( element ):
	value <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>( element<OPERATOR>[</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>]</OPERATOR> ), <TYPE>float</TYPE>( element<OPERATOR>[</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>]</OPERATOR> ), <TYPE>float</TYPE>( element<OPERATOR>[</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>]</OPERATOR> ) <OPERATOR>]</OPERATOR>
	<KEYWORD>return</KEYWORD> value

<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetEuler</USER_FUNCTION>( rotateElement ):
	euler <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR> <TYPE>float</TYPE>( rotateElement<OPERATOR>[</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>]</OPERATOR> ) <OPERATOR>*</OPERATOR> <TYPE>float</TYPE>( rotateElement<OPERATOR>[</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>]</OPERATOR> ) <OPERATOR>*</OPERATOR> angleToRadian,
			  <TYPE>float</TYPE>( rotateElement<OPERATOR>[</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>]</OPERATOR> ) <OPERATOR>*</OPERATOR> <TYPE>float</TYPE>( rotateElement<OPERATOR>[</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>]</OPERATOR> ) <OPERATOR>*</OPERATOR> angleToRadian,
			  <TYPE>float</TYPE>( rotateElement<OPERATOR>[</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>]</OPERATOR> ) <OPERATOR>*</OPERATOR> <TYPE>float</TYPE>( rotateElement<OPERATOR>[</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>]</OPERATOR> ) <OPERATOR>*</OPERATOR> angleToRadian <OPERATOR>]</OPERATOR>
	<KEYWORD>return</KEYWORD> euler

<KEYWORD>def</KEYWORD> <USER_FUNCTION>AddEuler</USER_FUNCTION>(euler1, euler2):
	<OBJ>euler1</OBJ>.<OO>x</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <OBJ>euler2</OBJ>.<OO>x</OO>
	<OBJ>euler1</OBJ>.<OO>y</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <OBJ>euler2</OBJ>.<OO>y</OO>
	<OBJ>euler1</OBJ>.<OO>z</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <OBJ>euler2</OBJ>.<OO>z</OO>
	
<KEYWORD>def</KEYWORD> <USER_FUNCTION>MatrixToString</USER_FUNCTION>(mat, nDigits):
	result <OPERATOR>=</OPERATOR> <STRING>''</STRING>
	<KEYWORD>if</KEYWORD> mat <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> result
	
	<KEYWORD>for</KEYWORD> vec <OPERATOR>in</OPERATOR> mat:
		result <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <STRING>'<ESC>\n</ESC><ESC>\t</ESC>'</STRING>
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> vec:
			result <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>str</TYPE>(<FUNCTION>round</FUNCTION>(i, nDigits))<OPERATOR>+</OPERATOR><STRING>' '</STRING>
		
	<KEYWORD>return</KEYWORD> result<OPERATOR>+</OPERATOR><STRING>'<ESC>\n</ESC>'</STRING>
			
<KEYWORD>def</KEYWORD> <USER_FUNCTION>RoundList</USER_FUNCTION>(lst, nDigits):
	result <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> lst:
		<OBJ>result</OBJ>.<OO>append</OO>(<FUNCTION>round</FUNCTION>(i, nDigits))
	<KEYWORD>return</KEYWORD> result
		

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ListToString</USER_FUNCTION>(lst):
	val  <OPERATOR>=</OPERATOR> <STRING>''</STRING>
	<KEYWORD>if</KEYWORD> lst <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> val
	<KEYWORD>else</KEYWORD>:
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> lst:
			<KEYWORD>if</KEYWORD> <FUNCTION>type</FUNCTION>(i) <OPERATOR>==</OPERATOR> <TYPE>list</TYPE>:
				val <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> ListToString(i)<OPERATOR>+</OPERATOR><STRING>'<ESC>\n</ESC>'</STRING>
			<KEYWORD>else</KEYWORD>:
				val <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>str</TYPE>(i)<OPERATOR>+</OPERATOR><STRING>' '</STRING>
		<KEYWORD>return</KEYWORD> val<OPERATOR>[</OPERATOR>:<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>

<COMMENT>#---XML Utils---</COMMENT>

<COMMENT># Returns the first child of the specified type in node</COMMENT>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>FindElementByTagName</USER_FUNCTION>(parentNode, <FUNCTION>type</FUNCTION>):
	child <OPERATOR>=</OPERATOR> <OBJ>parentNode</OBJ>.<OO>firstChild</OO>
	<KEYWORD>while</KEYWORD> child <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>if</KEYWORD> <OBJ>child</OBJ>.<OO>localName</OO> <OPERATOR>==</OPERATOR> <FUNCTION>type</FUNCTION>:
			<KEYWORD>return</KEYWORD> child
		child <OPERATOR>=</OPERATOR> <OBJ>child</OBJ>.<OO>nextSibling</OO>
<COMMENT>##	  childs = parentNode.getElementsByTagName(type)</COMMENT>
<COMMENT>##	  if len(childs) &gt; 0:</COMMENT>
<COMMENT>##		  return childs[0]</COMMENT>
	<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>FindElementsByTagName</USER_FUNCTION>(parentNode, <FUNCTION>type</FUNCTION>):
	result <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	child <OPERATOR>=</OPERATOR> <OBJ>parentNode</OBJ>.<OO>firstChild</OO>
	<KEYWORD>while</KEYWORD> child <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>if</KEYWORD> <OBJ>child</OBJ>.<OO>localName</OO> <OPERATOR>==</OPERATOR> <FUNCTION>type</FUNCTION>:
			<OBJ>result</OBJ>.<OO>append</OO>(child)
		child <OPERATOR>=</OPERATOR> <OBJ>child</OBJ>.<OO>nextSibling</OO>
	<KEYWORD>return</KEYWORD> result

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ReadAttribute</USER_FUNCTION>(node,attributeName):
	<KEYWORD>if</KEYWORD> node <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE> <OPERATOR>and</OPERATOR> attributeName <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
		attribute <OPERATOR>=</OPERATOR> <OBJ>node</OBJ>.<OO>getAttribute</OO>(attributeName)
		<KEYWORD>return</KEYWORD> attribute		
	<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ReadContents</USER_FUNCTION>(node):
	<KEYWORD>if</KEYWORD> node <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
		child <OPERATOR>=</OPERATOR> <OBJ>node</OBJ>.<OO>firstChild</OO>
		<KEYWORD>if</KEYWORD> child <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE> <OPERATOR>and</OPERATOR> <OBJ>child</OBJ>.<OO>nodeType</OO> <OPERATOR>==</OPERATOR> <OBJ>child</OBJ>.<OO>TEXT_NODE</OO>:
			<KEYWORD>return</KEYWORD> <OBJ>child</OBJ>.<OO>nodeValue</OO>
	<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ReadDateTime</USER_FUNCTION>(node):
	<KEYWORD>if</KEYWORD> node <OPERATOR>==</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	<KEYWORD>return</KEYWORD> GetDateTime(ReadContents(node))

<KEYWORD>def</KEYWORD> <USER_FUNCTION>RemoveWhiteSpace</USER_FUNCTION>(parent):	 
	<KEYWORD>for</KEYWORD> child <OPERATOR>in</OPERATOR> <TYPE>list</TYPE>(<OBJ>parent</OBJ>.<OO>childNodes</OO>):
		<KEYWORD>if</KEYWORD> <OBJ>child</OBJ>.<OO>nodeType</OO><OPERATOR>==</OPERATOR><OBJ>child</OBJ>.<OO>TEXT_NODE</OO> <OPERATOR>and</OPERATOR> <OBJ>child</OBJ>.<OBJ>data</OBJ>.<OO>strip</OO>()<OPERATOR>==</OPERATOR><STRING>''</STRING>:
			<OBJ>parent</OBJ>.<OO>removeChild</OO>(child)
		<KEYWORD>else</KEYWORD>:
			RemoveWhiteSpace(child)

<KEYWORD>def</KEYWORD> <USER_FUNCTION>RemoveWhiteSpaceNode</USER_FUNCTION>(parent):
	<KEYWORD>for</KEYWORD> child <OPERATOR>in</OPERATOR> <TYPE>list</TYPE>(<OBJ>parent</OBJ>.<OO>childNodes</OO>):
		<KEYWORD>if</KEYWORD> <OBJ>child</OBJ>.<OO>nodeType</OO> <OPERATOR>==</OPERATOR> <OBJ>child</OBJ>.<OO>TEXT_NODE</OO> <OPERATOR>and</OPERATOR> <OBJ>child</OBJ>.<OBJ>data</OBJ>.<OO>strip</OO>()<OPERATOR>==</OPERATOR><STRING>''</STRING>:
			<OBJ>parent</OBJ>.<OO>removeChild</OO>(child)
	<KEYWORD>return</KEYWORD> parent
			
<COMMENT>##def RemoveWhiteSpace(node):</COMMENT>
<COMMENT>##	  removeList = []</COMMENT>
<COMMENT>##	  for child in node.childNodes:</COMMENT>
<COMMENT>##		  if child.nodeType == child.TEXT_NODE and not child.data.strip():</COMMENT>
<COMMENT>##			  removeList.append(child)</COMMENT>
<COMMENT>##		  elif child.hasChildNodes():</COMMENT>
<COMMENT>##			  RemoveWhiteSpace(child)</COMMENT>
<COMMENT>##	  </COMMENT>
<COMMENT>##	  for node in removeList:</COMMENT>
<COMMENT>##		  node.parentNode.removeChild(node)</COMMENT>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetDateTime</USER_FUNCTION>(xmlvalue):
  <KEYWORD>return</KEYWORD> xmlvalue
	<COMMENT>#vals = xmlvalue.split('T')</COMMENT>
	<COMMENT>#datestr = vals[0]</COMMENT>
	<COMMENT>#timestr =  vals[1]</COMMENT>
	<COMMENT>#date = datestr.split('-')</COMMENT>
	<COMMENT>#time = timestr.split(':')</COMMENT>
	<COMMENT>#time[2]=time[2].rstrip('Z')    </COMMENT>
	<COMMENT>#return datetime(int(date[0]), int(date[1]), int(date[2]),int(time[0]), int(time[1]), int(float(time[2])))</COMMENT>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToDateTime</USER_FUNCTION>(val):
  <KEYWORD>return</KEYWORD> val
	<COMMENT>#return '%s-%s-%sT%s:%s:%sZ'%(val.year,str(val.month).zfill(2),str(val.day).zfill(2), str(val.hour).zfill(2), str(val.minute).zfill(2),str(val.second).zfill(2))</COMMENT>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetStringArrayFromNodes</USER_FUNCTION>(xmlNodes):
	vals <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	<KEYWORD>if</KEYWORD> xmlNodes <OPERATOR>==</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> vals
	<KEYWORD>for</KEYWORD> xmlNode <OPERATOR>in</OPERATOR> xmlNodes:
		stringvals <OPERATOR>=</OPERATOR> ReadContents(xmlNode).<OO>split</OO>( )
		<KEYWORD>for</KEYWORD> string <OPERATOR>in</OPERATOR> stringvals:
			<OBJ>vals</OBJ>.<OO>append</OO>(string) 		   
	<KEYWORD>return</KEYWORD> vals

<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetListFromNodes</USER_FUNCTION>(xmlNodes, cast<OPERATOR>=</OPERATOR><TYPE>None</TYPE>):
	result <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	<KEYWORD>if</KEYWORD> xmlNodes <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> result
	
	<KEYWORD>for</KEYWORD> xmlNode <OPERATOR>in</OPERATOR> xmlNodes:
		val <OPERATOR>=</OPERATOR> ReadContents(xmlNode).<OO>split</OO>( )
		<KEYWORD>if</KEYWORD> cast <OPERATOR>==</OPERATOR> <TYPE>float</TYPE>:
			val <OPERATOR>=</OPERATOR> ToFloatList(val)
		<KEYWORD>elif</KEYWORD> cast <OPERATOR>==</OPERATOR> <TYPE>int</TYPE>:
			val <OPERATOR>=</OPERATOR> ToIntList(val)
		<KEYWORD>elif</KEYWORD> cast <OPERATOR>==</OPERATOR> bool:
			val <OPERATOR>=</OPERATOR> ToBoolList(val)
		<OBJ>result</OBJ>.<OO>append</OO>(val)
	<KEYWORD>return</KEYWORD> result			 
		

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ToXml</USER_FUNCTION>(xmlNode, indent<OPERATOR>=</OPERATOR><STRING>'<ESC>\t</ESC>'</STRING>, newl<OPERATOR>=</OPERATOR><STRING>'<ESC>\n</ESC>'</STRING>):
	<KEYWORD>return</KEYWORD> <STRING>'&lt;?xml version="1.0" encoding="utf-8"?&gt;<ESC>\n</ESC>%s'</STRING><OPERATOR>%</OPERATOR>(__ToXml(xmlNode, indent,newl))
	
<KEYWORD>def</KEYWORD> <USER_FUNCTION>__ToXml</USER_FUNCTION>(xmlNode, indent<OPERATOR>=</OPERATOR><STRING>'<ESC>\t</ESC>'</STRING>,newl<OPERATOR>=</OPERATOR><STRING>'<ESC>\n</ESC>'</STRING>,totalIndent<OPERATOR>=</OPERATOR><STRING>''</STRING>):
	childs <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>childNodes</OO>
	<KEYWORD>if</KEYWORD> <FUNCTION>len</FUNCTION>(childs) <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC>:
		attrs <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		attributes <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>attributes</OO>
		<KEYWORD>if</KEYWORD> attributes <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
			<KEYWORD>for</KEYWORD> attr <OPERATOR>in</OPERATOR> <OBJ>attributes</OBJ>.<OO>keys</OO>():
				val <OPERATOR>=</OPERATOR> attributes<OPERATOR>[</OPERATOR>attr<OPERATOR>]</OPERATOR>.<OO>nodeValue</OO>
				attrs <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <STRING>' %s="%s"'</STRING><OPERATOR>%</OPERATOR>(attr,val)
		result <OPERATOR>=</OPERATOR> <STRING>'%s&lt;%s%s&gt;'</STRING><OPERATOR>%</OPERATOR>(totalIndent,<OBJ>xmlNode</OBJ>.<OO>localName</OO>,attrs)
		tempnewl <OPERATOR>=</OPERATOR> newl
		tempTotIndent <OPERATOR>=</OPERATOR> totalIndent
		<KEYWORD>for</KEYWORD> child <OPERATOR>in</OPERATOR> childs:			
			<KEYWORD>if</KEYWORD> <OBJ>child</OBJ>.<OO>nodeType</OO> <OPERATOR>==</OPERATOR> <OBJ>child</OBJ>.<OO>TEXT_NODE</OO>:
				tempnewl <OPERATOR>=</OPERATOR> <STRING>''</STRING>
				tempTotIndent <OPERATOR>=</OPERATOR> <STRING>''</STRING>
			
			result <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <STRING>'%s%s'</STRING><OPERATOR>%</OPERATOR>(tempnewl,__ToXml(child, indent, newl, totalIndent<OPERATOR>+</OPERATOR>indent))
		result <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <STRING>'%s%s&lt;/%s&gt;'</STRING><OPERATOR>%</OPERATOR>(tempnewl,tempTotIndent,<OBJ>xmlNode</OBJ>.<OO>localName</OO>)
		<KEYWORD>return</KEYWORD> result
	<KEYWORD>else</KEYWORD>:
		<KEYWORD>if</KEYWORD> <OBJ>xmlNode</OBJ>.<OO>nodeType</OO> <OPERATOR>==</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>TEXT_NODE</OO>:
			<KEYWORD>return</KEYWORD> <OBJ>xmlNode</OBJ>.<OO>toxml</OO>().<OO>replace</OO>(<STRING>'<ESC>\n</ESC>'</STRING>,<STRING>'<ESC>\n</ESC>'</STRING><OPERATOR>+</OPERATOR>totalIndent<OPERATOR>[</OPERATOR>:<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>)
		<KEYWORD>else</KEYWORD>:
			<KEYWORD>return</KEYWORD> totalIndent<OPERATOR>+</OPERATOR><OBJ>xmlNode</OBJ>.<OO>toxml</OO>()

<KEYWORD>def</KEYWORD> <USER_FUNCTION>AppendChilds</USER_FUNCTION>(xmlNode, syntax, lst):
	<KEYWORD>if</KEYWORD> lst <OPERATOR>is</OPERATOR> <TYPE>None</TYPE> <OPERATOR>or</OPERATOR> syntax <OPERATOR>is</OPERATOR> <TYPE>None</TYPE> <OPERATOR>or</OPERATOR> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD>
	
	<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> lst:
		el <OPERATOR>=</OPERATOR> Element(syntax)
		text <OPERATOR>=</OPERATOR> Text()
		<OBJ>text</OBJ>.<OO>data</OO> <OPERATOR>=</OPERATOR> ListToString(i)
		<OBJ>el</OBJ>.<OO>appendChild</OO>(text)
		<OBJ>xmlNode</OBJ>.<OO>appendChild</OO>(el)
	
	<KEYWORD>return</KEYWORD> xmlNode		
		
<COMMENT># TODO: Collada API: finish DaeDocument</COMMENT>
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeDocument</USER_FUNCTION>(<FUNCTION>object</FUNCTION>):
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>, debugM <OPERATOR>=</OPERATOR> <TYPE>False</TYPE>):
		<KEYWORD>global</KEYWORD> debugMode
		debugMode <OPERATOR>=</OPERATOR> debugM
		
		<TYPE>self</TYPE>.<OO>colladaVersion</OO> <OPERATOR>=</OPERATOR> <STRING>'1.4.0'</STRING>
		<TYPE>self</TYPE>.<OO>version</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>xmlns</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> DaeAsset()
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
		
		<COMMENT># create all the libraries</COMMENT>
		<TYPE>self</TYPE>.<OO>animationsLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_ANIMATIONS</OO>,DaeAnimation,<OBJ>DaeSyntax</OBJ>.<OO>ANIMATION</OO>)
		<TYPE>self</TYPE>.<OO>animationClipsLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_ANIMATION_CLIPS</OO>,DaeAnimationClip,<OBJ>DaeSyntax</OBJ>.<OO>ANIMATION_CLIP</OO>)
		<TYPE>self</TYPE>.<OO>camerasLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_CAMERAS</OO>,DaeCamera,<OBJ>DaeSyntax</OBJ>.<OO>CAMERA</OO>)
		<TYPE>self</TYPE>.<OO>controllersLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_CONTROLLERS</OO>,DaeController,<OBJ>DaeSyntax</OBJ>.<OO>CONTROLLER</OO>)
		<TYPE>self</TYPE>.<OO>effectsLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_EFFECTS</OO>,DaeFxEffect,<OBJ>DaeFxSyntax</OBJ>.<OO>EFFECT</OO>)
		<TYPE>self</TYPE>.<OO>geometriesLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_GEOMETRIES</OO>,DaeGeometry,<OBJ>DaeSyntax</OBJ>.<OO>GEOMETRY</OO>)
		<TYPE>self</TYPE>.<OO>imagesLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_IMAGES</OO>, DaeImage, <OBJ>DaeSyntax</OBJ>.<OO>IMAGE</OO>)
		<TYPE>self</TYPE>.<OO>lightsLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_LIGHTS</OO>,DaeLight,<OBJ>DaeSyntax</OBJ>.<OO>LIGHT</OO>)
		<TYPE>self</TYPE>.<OO>materialsLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_MATERIALS</OO>,DaeFxMaterial,<OBJ>DaeFxSyntax</OBJ>.<OO>MATERIAL</OO>)
		<TYPE>self</TYPE>.<OO>nodesLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_NODES</OO>, DaeNode, <OBJ>DaeSyntax</OBJ>.<OO>NODE</OO>)
		<TYPE>self</TYPE>.<OO>visualScenesLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_VISUAL_SCENES</OO>,DaeVisualScene,<OBJ>DaeSyntax</OBJ>.<OO>VISUAL_SCENE</OO>)
		
		<COMMENT># Physics Support</COMMENT>
		<TYPE>self</TYPE>.<OO>physicsMaterialsLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_PHYSICS_MATERIALS</OO>, DaePhysicsMaterial, <OBJ>DaePhysicsSyntax</OBJ>.<OO>PHYSICS_MATERIAL</OO>)		 
		<TYPE>self</TYPE>.<OO>physicsScenesLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_PHYSICS_SCENES</OO>, DaePhysicsScene, <OBJ>DaePhysicsSyntax</OBJ>.<OO>PHYSICS_SCENE</OO>)		 
		
		<TYPE>self</TYPE>.<OO>physicsModelsLibrary</OO> <OPERATOR>=</OPERATOR> DaeLibrary(<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_PHYSICS_MODELS</OO>, DaePhysicsModel, <OBJ>DaePhysicsSyntax</OBJ>.<OO>PHYSICS_MODEL</OO>)
				
		<TYPE>self</TYPE>.<OO>scene</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>physicsScene</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadDocumentFromFile</USER_FUNCTION>(<TYPE>self</TYPE>, filename):
		<KEYWORD>global</KEYWORD> debugMode
		<COMMENT># Build DOM tree</COMMENT>
		doc <OPERATOR>=</OPERATOR> parse( filename )
		
		<COMMENT># Get COLLADA element</COMMENT>
		colladaNode <OPERATOR>=</OPERATOR> <OBJ>doc</OBJ>.<OO>documentElement</OO>	 
				
		<COMMENT># Get Attributes		</COMMENT>
		<TYPE>self</TYPE>.<OO>version</OO> <OPERATOR>=</OPERATOR> <OBJ>colladaNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>VERSION</OO>)
		<COMMENT>#if not IsVersionOk(self.version, self.colladaVersion):</COMMENT>
		<COMMENT>#	Debug.Debug('The version of the file (%s) is older then the version supported by this plugin(%s).'%(self.version, self.colladaVersion),'ERROR')</COMMENT>
		<COMMENT>#	doc.unlink()</COMMENT>
		<COMMENT>#	return </COMMENT>
		<TYPE>self</TYPE>.<OO>xmlns</OO> <OPERATOR>=</OPERATOR> <OBJ>colladaNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>XMLNS</OO>)
		
		<COMMENT># get the assets element</COMMENT>
		<TYPE>self</TYPE>.<OBJ>asset</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>,FindElementByTagName(colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>ASSET</OO>))
		
		<COMMENT># get the extra elements</COMMENT>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(<TYPE>self</TYPE>,colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>,DaeExtra)
				
		<COMMENT># parse all the libraries</COMMENT>
		<TYPE>self</TYPE>.<OBJ>imagesLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>,FindElementByTagName(colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_IMAGES</OO>))
		<TYPE>self</TYPE>.<OBJ>animationsLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>, FindElementByTagName(colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_ANIMATIONS</OO>))
		<TYPE>self</TYPE>.<OBJ>animationClipsLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>,FindElementByTagName(colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_ANIMATION_CLIPS</OO>))
		<TYPE>self</TYPE>.<OBJ>camerasLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>,FindElementByTagName(colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_CAMERAS</OO>))
		<TYPE>self</TYPE>.<OBJ>controllersLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>,FindElementByTagName(colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_CONTROLLERS</OO>))
		<TYPE>self</TYPE>.<OBJ>effectsLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>,FindElementByTagName(colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_EFFECTS</OO>))
		<TYPE>self</TYPE>.<OBJ>geometriesLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>,FindElementByTagName(colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_GEOMETRIES</OO>))
		<TYPE>self</TYPE>.<OBJ>lightsLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>, FindElementByTagName(colladaNode, <OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_LIGHTS</OO>))
		<TYPE>self</TYPE>.<OBJ>materialsLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>,FindElementByTagName(colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_MATERIALS</OO>))
		<TYPE>self</TYPE>.<OBJ>nodesLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>,FindElementByTagName(colladaNode,<OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_NODES</OO>))
		<TYPE>self</TYPE>.<OBJ>visualScenesLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>, FindElementByTagName(colladaNode, <OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_VISUAL_SCENES</OO>))
		
		<TYPE>self</TYPE>.<OBJ>physicsMaterialsLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>, FindElementByTagName(colladaNode, <OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_PHYSICS_MATERIALS</OO>))
		<TYPE>self</TYPE>.<OBJ>physicsModelsLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>, FindElementByTagName(colladaNode, <OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_PHYSICS_MODELS</OO>))
		<TYPE>self</TYPE>.<OBJ>physicsScenesLibrary</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>, FindElementByTagName(colladaNode, <OBJ>DaeSyntax</OBJ>.<OO>LIBRARY_PHYSICS_SCENES</OO>))
		
		<COMMENT># Get the sceneNodes</COMMENT>
		sceneNodes <OPERATOR>=</OPERATOR> <OBJ>colladaNode</OBJ>.<OO>getElementsByTagName</OO>(<OBJ>DaeSyntax</OBJ>.<OO>SCENE</OO>)
		
		<COMMENT># Get the scene</COMMENT>
		sceneNode <OPERATOR>=</OPERATOR> FindElementByTagName(colladaNode, <OBJ>DaeSyntax</OBJ>.<OO>SCENE</OO>)
		<KEYWORD>if</KEYWORD> sceneNode <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
			scene <OPERATOR>=</OPERATOR> DaeScene()
			<OBJ>scene</OBJ>.<OO>LoadFromXml</OO>(<TYPE>self</TYPE>, sceneNode)
			<TYPE>self</TYPE>.<OO>scene</OO> <OPERATOR>=</OPERATOR> scene
			
		<OBJ>doc</OBJ>.<OO>unlink</OO>()
		
		<KEYWORD>if</KEYWORD> debugMode:
			<OBJ>Debug</OBJ>.<OO>Debug</OO>(<STRING>'Directly exporting this DaeDocument...'</STRING>,<STRING>'DEBUG'</STRING>)
			<TYPE>self</TYPE>.<OO>SaveDocumentToFile</OO>(filename<OPERATOR>+</OPERATOR><STRING>'_out.dae'</STRING>)
			
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveDocumentToFile</USER_FUNCTION>(<TYPE>self</TYPE>, filename):
		<TYPE>self</TYPE>.<OO>version</OO> <OPERATOR>=</OPERATOR> <STRING>'1.4.0'</STRING>
		<TYPE>self</TYPE>.<OO>xmlns</OO> <OPERATOR>=</OPERATOR> <STRING>'http://www.collada.org/2005/11/COLLADASchema'</STRING>
		colladaNode <OPERATOR>=</OPERATOR> Element(<OBJ>DaeSyntax</OBJ>.<OO>COLLADA</OO>)
		<OBJ>colladaNode</OBJ>.<OO>setAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>VERSION</OO>, <TYPE>self</TYPE>.<OO>version</OO>)
		<OBJ>colladaNode</OBJ>.<OO>setAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>XMLNS</OO>, <TYPE>self</TYPE>.<OO>xmlns</OO>)
		
		<OBJ>colladaNode</OBJ>.<OO>appendChild</OO>(<TYPE>self</TYPE>.<OBJ>asset</OBJ>.<OO>SaveToXml</OO>(<TYPE>self</TYPE>))
		
		<COMMENT># add the labraries</COMMENT>
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>animationsLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>animationClipsLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>camerasLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>controllersLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>effectsLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>geometriesLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>imagesLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>lightsLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>materialsLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>nodesLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>visualScenesLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>physicsMaterialsLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>physicsModelsLibrary</OO>)
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>physicsScenesLibrary</OO>) 	   
		
		AppendChild(<TYPE>self</TYPE>,colladaNode,<TYPE>self</TYPE>.<OO>scene</OO>)
		
		<COMMENT># write xml to the file</COMMENT>
		fileref <OPERATOR>=</OPERATOR> <FUNCTION>open</FUNCTION>(filename, <STRING>'w'</STRING>)
		<OBJ>fileref</OBJ>.<OO>write</OO>(ToXml(colladaNode))
		<OBJ>fileref</OBJ>.<OO>flush</OO>()
		<OBJ>fileref</OBJ>.<OO>close</OO>()
		<OBJ>colladaNode</OBJ>.<OO>unlink</OO>()
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetItemCount</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> (<COMMENT>##self.animationClipsLibrary.GetItemCount()+</COMMENT>
	<COMMENT>##self.animationsLibrary.GetItemCount()+</COMMENT>
	<COMMENT>##self.camerasLibrary.GetItemCount()+</COMMENT>
	<COMMENT>##self.controllersLibrary.GetItemCount()+</COMMENT>
	<COMMENT>##self.effectsLibrary.GetItemCount()+</COMMENT>
	<TYPE>self</TYPE>.<OBJ>geometriesLibrary</OBJ>.<OO>GetItemCount</OO>()<OPERATOR>+</OPERATOR>
	<TYPE>self</TYPE>.<OBJ>lightsLibrary</OBJ>.<OO>GetItemCount</OO>()<OPERATOR>+</OPERATOR>
	<COMMENT>##self.materialsLibrary.GetItemCount()+</COMMENT>
	<TYPE>self</TYPE>.<OBJ>nodesLibrary</OBJ>.<OO>GetItemCount</OO>()<COMMENT>##+</COMMENT>
	<COMMENT>##self.visualScenesLibrary.GetItemCount()</COMMENT>
	)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <STRING>'%s version: %s, xmlns: %s, asset: %s, extras: %s, scene: %s'</STRING><OPERATOR>%</OPERATOR>(<FUNCTION>type</FUNCTION>(<TYPE>self</TYPE>), <TYPE>self</TYPE>.<OO>version</OO>, <TYPE>self</TYPE>.<OO>xmlns</OO>, <TYPE>self</TYPE>.<OO>asset</OO>, <TYPE>self</TYPE>.<OO>extras</OO>, <TYPE>self</TYPE>.<OO>scene</OO>)
		
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeEntity</USER_FUNCTION>(<FUNCTION>object</FUNCTION>):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <STRING>'UNKNOWN'</STRING>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<OBJ>Debug</OBJ>.<OO>Debug</OO>(<STRING>'DaeEntity: Override this method for %s'</STRING><OPERATOR>%</OPERATOR>(<FUNCTION>type</FUNCTION>(<TYPE>self</TYPE>)),<STRING>'WARNING'</STRING>)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> Element(<TYPE>self</TYPE>.<OO>syntax</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetType</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <TYPE>self</TYPE>.<OO>syntax</OO>
		
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeElement</USER_FUNCTION>(DaeEntity):
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeElement,<TYPE>self</TYPE>).<OO>__init__</OO>()
		
		<TYPE>self</TYPE>.<FUNCTION>id</FUNCTION> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>name</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>,daeDocument, xmlNode):
		<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<KEYWORD>return</KEYWORD>
		
		<TYPE>self</TYPE>.<FUNCTION>id</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>ID</OO>)
		<TYPE>self</TYPE>.<OO>name</OO> <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>NAME</OO>)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeElement,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node,<OBJ>DaeSyntax</OBJ>.<OO>ID</OO>,StripString(<TYPE>self</TYPE>.<FUNCTION>id</FUNCTION>))
		SetAttribute(node,<OBJ>DaeSyntax</OBJ>.<OO>NAME</OO>, StripString(<TYPE>self</TYPE>.<OO>name</OO>))
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeElement,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>'id: %s, name: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<FUNCTION>id</FUNCTION>, <TYPE>self</TYPE>.<OO>name</OO>)

<COMMENT># TODO:  Collada API: finish DaeLibrary</COMMENT>
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeLibrary</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>, syntax, objectType, objectSyntax):
		<FUNCTION>super</FUNCTION>(DaeLibrary,<TYPE>self</TYPE>).<OO>__init__</OO>()
		
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>items</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
		<TYPE>self</TYPE>.<OO>__objectSyntax</OO> <OPERATOR>=</OPERATOR> objectSyntax
		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> syntax
		<TYPE>self</TYPE>.<OO>__objectType</OO> <OPERATOR>=</OPERATOR> objectType
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>,daeDocument, xmlNode):
		<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<KEYWORD>return</KEYWORD>
		<FUNCTION>super</FUNCTION>(DaeLibrary,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>ASSET</OO>, DaeAsset)
		<TYPE>self</TYPE>.<OO>items</OO> <OPERATOR>=</OPERATOR>  CreateObjectsFromXml(daeDocument, xmlNode, <TYPE>self</TYPE>.<OO>__objectSyntax</OO>, <TYPE>self</TYPE>.<OO>__objectType</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>,daeDocument):
		<KEYWORD>if</KEYWORD> <FUNCTION>len</FUNCTION>(<TYPE>self</TYPE>.<OO>items</OO>) <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC>:
			node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeLibrary,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			<COMMENT># Add the assets</COMMENT>
			AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>asset</OO>)
			<COMMENT># Add the library_items</COMMENT>
			AppendChilds(daeDocument,node,<TYPE>self</TYPE>.<OO>items</OO>)
			<COMMENT># Add the extra's</COMMENT>
			AppendChilds(<TYPE>self</TYPE>,node,<TYPE>self</TYPE>.<OO>extras</OO>)
			<KEYWORD>return</KEYWORD> node
		<KEYWORD>else</KEYWORD>:
			<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetItemCount</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>len</FUNCTION>(<TYPE>self</TYPE>.<OO>items</OO>)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>FindObject</USER_FUNCTION>(<TYPE>self</TYPE>,url):
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>items</OO>:
			<KEYWORD>if</KEYWORD> <OBJ>i</OBJ>.<FUNCTION>id</FUNCTION> <OPERATOR>==</OPERATOR> url:
				<KEYWORD>return</KEYWORD> i
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>AddItem</USER_FUNCTION>(<TYPE>self</TYPE>,item):
		<TYPE>self</TYPE>.<OBJ>items</OBJ>.<OO>append</OO>(item)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeLibrary,<TYPE>self</TYPE>).<OO>__str__</OO>() <OPERATOR>+</OPERATOR> <STRING>'extras: %s, asset: %s, items: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>extras</OO>, <TYPE>self</TYPE>.<OO>asset</OO>, <TYPE>self</TYPE>.<OO>items</OO>)
		
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeAsset</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeAsset,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>contributors</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>created</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>modified</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>revision</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>title</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>subject</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>keywords</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>unit</OO> <OPERATOR>=</OPERATOR> DaeUnit()
		<TYPE>self</TYPE>.<OO>upAxis</OO> <OPERATOR>=</OPERATOR> <STRING>'Y_UP'</STRING>
		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>ASSET</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<KEYWORD>return</KEYWORD>
		<COMMENT># Get the contributor(s)</COMMENT>
		<TYPE>self</TYPE>.<OO>contributors</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>CONTRIBUTOR</OO>,DaeContributor)
		<COMMENT># Get created</COMMENT>
		<TYPE>self</TYPE>.<OO>created</OO> <OPERATOR>=</OPERATOR> ReadDateTime(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>CREATED</OO>))
		<COMMENT># Get modified</COMMENT>
		<TYPE>self</TYPE>.<OO>modified</OO> <OPERATOR>=</OPERATOR> ReadDateTime(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>MODIFIED</OO>))
		<COMMENT># Get revision</COMMENT>
		<TYPE>self</TYPE>.<OO>revision</OO> <OPERATOR>=</OPERATOR> ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>REVISION</OO>))
		<COMMENT># Get title</COMMENT>
		<TYPE>self</TYPE>.<OO>title</OO> <OPERATOR>=</OPERATOR> ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>TITLE</OO>))
		<COMMENT># Get subject</COMMENT>
		<TYPE>self</TYPE>.<OO>subject</OO> <OPERATOR>=</OPERATOR> ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>SUBJECT</OO>))
		<COMMENT># Get keywords</COMMENT>
		<TYPE>self</TYPE>.<OO>keywords</OO> <OPERATOR>=</OPERATOR> GetStringArrayFromNodes(<OBJ>xmlNode</OBJ>.<OO>getElementsByTagName</OO>(<OBJ>DaeSyntax</OBJ>.<OO>KEYWORDS</OO>))
		<COMMENT># Get Unit</COMMENT>
		<TYPE>self</TYPE>.<OBJ>unit</OBJ>.<OO>LoadFromXml</OO>(daeDocument, FindElementByTagName(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>UNIT</OO>))
		<COMMENT># Get upAxis</COMMENT>
		<TYPE>self</TYPE>.<OO>upAxis</OO> <OPERATOR>=</OPERATOR> ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>UP_AXIS</OO>))
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> Element(<OBJ>DaeSyntax</OBJ>.<OO>ASSET</OO>)
		AppendChilds(daeDocument,node, <TYPE>self</TYPE>.<OO>contributors</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>CREATED</OO>, <TYPE>self</TYPE>.<OO>created</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>MODIFIED</OO>, <TYPE>self</TYPE>.<OO>modified</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>REVISION</OO>, <TYPE>self</TYPE>.<OO>revision</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>TITLE</OO>, <TYPE>self</TYPE>.<OO>title</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>SUBJECT</OO>, <TYPE>self</TYPE>.<OO>subject</OO>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>unit</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>UP_AXIS</OO>, <TYPE>self</TYPE>.<OO>upAxis</OO>)
		
		
		
		<KEYWORD>return</KEYWORD> node
		
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeAsset,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>'contributors: %s, created: %s, modified: %s, revision: %s, title: %s, subject: %s, keywords: %s, unit: %s, upAxis: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>contributors</OO>, <TYPE>self</TYPE>.<OO>created</OO>, <TYPE>self</TYPE>.<OO>modified</OO>, <TYPE>self</TYPE>.<OO>revision</OO>, <TYPE>self</TYPE>.<OO>title</OO>, <TYPE>self</TYPE>.<OO>subject</OO>, <TYPE>self</TYPE>.<OO>keywords</OO>, <TYPE>self</TYPE>.<OO>unit</OO>, <TYPE>self</TYPE>.<OO>upAxis</OO>)
		
<COMMENT># TODO:  Collada API: finish DaeScene</COMMENT>
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeScene</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeScene,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>iVisualScenes</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>iPhysicsScenes</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>

		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>SCENE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<KEYWORD>return</KEYWORD>
		<TYPE>self</TYPE>.<OO>iVisualScenes</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_VISUAL_SCENE</OO>, DaeVisualSceneInstance)
		<TYPE>self</TYPE>.<OO>iPhysicsScenes</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_PHYSICS_SCENE</OO>, DaePhysicsSceneInstance)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeScene,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iVisualScenes</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iPhysicsScenes</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetVisualScenes</USER_FUNCTION>(<TYPE>self</TYPE>):
		result <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>iVisualScenes</OO>:
			<OBJ>result</OBJ>.<OO>append</OO>(<OBJ>i</OBJ>.<FUNCTION>object</FUNCTION>)
		<KEYWORD>return</KEYWORD> result
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetPhysicsScenes</USER_FUNCTION>(<TYPE>self</TYPE>):
		result <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>iPhysicsScenes</OO>:
			<OBJ>result</OBJ>.<OO>append</OO>(<OBJ>i</OBJ>.<FUNCTION>object</FUNCTION>)
		<KEYWORD>return</KEYWORD> result
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeScene,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>'extras: %s, visualScenes: %s, physicsScenes: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>extras</OO>, <TYPE>self</TYPE>.<OO>iVisualScenes</OO>, <TYPE>self</TYPE>.<OO>iPhysicsScenes</OO>)
		

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeUnit</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeUnit,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>name</OO> <OPERATOR>=</OPERATOR> <STRING>'meter'</STRING>
		<TYPE>self</TYPE>.<OO>meter</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1.0</NUMERIC>
		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>UNIT</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<KEYWORD>return</KEYWORD>
		name <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>NAME</OO>)
		<KEYWORD>if</KEYWORD> name <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <STRING>''</STRING>:
			<TYPE>self</TYPE>.<OO>name</OO> <OPERATOR>=</OPERATOR> name
			
		meter <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>METER</OO>)
		<KEYWORD>if</KEYWORD> meter <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <STRING>''</STRING>:
			<TYPE>self</TYPE>.<OO>meter</OO> <OPERATOR>=</OPERATOR> <TYPE>float</TYPE>(meter)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>,daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeUnit, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>METER</OO>, <TYPE>self</TYPE>.<OO>meter</OO>)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>NAME</OO>, <TYPE>self</TYPE>.<OO>name</OO>)
		<KEYWORD>return</KEYWORD> node
				
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeUnit, <TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' name: %s, meter: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>name</OO>, <TYPE>self</TYPE>.<OO>meter</OO>)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeContributor</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeContributor, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>author</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>authoringTool</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>comments</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>copyright</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>sourceData</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>CONTRIBUTOR</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>author</OO> <OPERATOR>=</OPERATOR> ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>AUTHOR</OO>))
		<TYPE>self</TYPE>.<OO>authoringTool</OO> <OPERATOR>=</OPERATOR> ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>AUTHORING_TOOL</OO>))
		<TYPE>self</TYPE>.<OO>comments</OO> <OPERATOR>=</OPERATOR> ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>COMMENTS</OO>))
		<TYPE>self</TYPE>.<OO>copyright</OO> <OPERATOR>=</OPERATOR> ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>COPYRIGHT</OO>))
		<TYPE>self</TYPE>.<OO>sourceData</OO> <OPERATOR>=</OPERATOR> ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>SOURCE_DATA</OO>))
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeContributor, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>AUTHOR</OO>, <TYPE>self</TYPE>.<OO>author</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>AUTHORING_TOOL</OO>, <TYPE>self</TYPE>.<OO>authoringTool</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>COMMENTS</OO>, <TYPE>self</TYPE>.<OO>comments</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>COPYRIGHT</OO>, <TYPE>self</TYPE>.<OO>copyright</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>SOURCE_DATA</OO>, <TYPE>self</TYPE>.<OO>sourceData</OO>)
		<KEYWORD>return</KEYWORD> node
		
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeContributor,<TYPE>self</TYPE>).<OO>__str__</OO>() <OPERATOR>+</OPERATOR> <STRING>'author: %s, authoring_tool: %s, comments: %s, copyright: %s, sourceData: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>author</OO>, <TYPE>self</TYPE>.<OO>authoringTool</OO>, <TYPE>self</TYPE>.<OO>comments</OO>, <TYPE>self</TYPE>.<OO>copyright</OO>, <TYPE>self</TYPE>.<OO>sourceData</OO>)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeAnimation</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeAnimation, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>sources</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>samplers</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>channels</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>ANIMATION</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeAnimation, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>channels</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>CHANNEL</OO>, DaeChannel)
		<TYPE>self</TYPE>.<OO>samplers</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SAMPLER</OO>, DaeSampler)
		<TYPE>self</TYPE>.<OO>sources</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SOURCE</OO>, DaeSource)
			
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeAnimation, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>sources</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>samplers</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>channels</OO>)
		<KEYWORD>return</KEYWORD> node

	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetSource</USER_FUNCTION>(<TYPE>self</TYPE>, sourceId):
		<KEYWORD>for</KEYWORD> source <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>sources</OO>:
			<KEYWORD>if</KEYWORD> <OBJ>source</OBJ>.<FUNCTION>id</FUNCTION> <OPERATOR>==</OPERATOR> sourceId:
				<KEYWORD>return</KEYWORD> source
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeSampler</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>SAMPLER</OO>
		<TYPE>self</TYPE>.<FUNCTION>id</FUNCTION> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>inputs</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<FUNCTION>id</FUNCTION> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>ID</OO>)
		<TYPE>self</TYPE>.<OO>inputs</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INPUT</OO>, DaeInput)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeSampler, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>inputs</OO>)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>ID</OO>, StripString(<TYPE>self</TYPE>.<FUNCTION>id</FUNCTION>))
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetInput</USER_FUNCTION>(<TYPE>self</TYPE>, semantic):
		<KEYWORD>for</KEYWORD> <FUNCTION>input</FUNCTION> <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>inputs</OO>:
			<KEYWORD>if</KEYWORD> <FUNCTION>input</FUNCTION>.<OO>semantic</OO> <OPERATOR>==</OPERATOR> semantic:
				<KEYWORD>return</KEYWORD> <FUNCTION>input</FUNCTION>
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeChannel</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>CHANNEL</OO>
		<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>target</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SOURCE</OO>)
		<TYPE>self</TYPE>.<OO>target</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TARGET</OO>)		
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeChannel, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>SOURCE</OO>, StripString(<STRING>'#'</STRING><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<OBJ>source</OBJ>.<FUNCTION>id</FUNCTION>))
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>TARGET</OO>, <TYPE>self</TYPE>.<OO>target</OO>)
		<KEYWORD>return</KEYWORD> node

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeAnimationClip</USER_FUNCTION>(DaeElement):
	<KEYWORD>pass</KEYWORD>
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeCamera</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeCamera,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>optics</OO> <OPERATOR>=</OPERATOR> DaeOptics()
		<TYPE>self</TYPE>.<OO>imager</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>CAMERA</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeCamera, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>ASSET</OO>, DaeAsset)
		<TYPE>self</TYPE>.<OBJ>optics</OBJ>.<OO>LoadFromXml</OO>(daeDocument, FindElementByTagName(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>OPTICS</OO>))
		<TYPE>self</TYPE>.<OO>imager</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument,xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>IMAGER</OO>,DaeImager)
		
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeCamera, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT># Add the assets</COMMENT>
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>asset</OO>)
		<COMMENT># Add the optics</COMMENT>
		<OBJ>node</OBJ>.<OO>appendChild</OO>(<TYPE>self</TYPE>.<OBJ>optics</OBJ>.<OO>SaveToXml</OO>(daeDocument))
		<COMMENT># Add the imager</COMMENT>
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>imager</OO>)
		<COMMENT># Add the extra's</COMMENT>
		AppendChilds(<TYPE>self</TYPE>,node,<TYPE>self</TYPE>.<OO>extras</OO>)
		<KEYWORD>return</KEYWORD> node
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeCamera,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>'asset: %s, optics: %s, imager: %s, extras: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>asset</OO>, <TYPE>self</TYPE>.<OO>optics</OO>, <TYPE>self</TYPE>.<OO>imager</OO>, <TYPE>self</TYPE>.<OO>extras</OO>)
  
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeController</USER_FUNCTION>(DaeElement):
	<KEYWORD>pass</KEYWORD>
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeImage</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeImage,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<FUNCTION>format</FUNCTION> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>height</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>width</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>depth</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>initFrom</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>IMAGE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeImage, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<FUNCTION>format</FUNCTION> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>FORMAT</OO>)
		<TYPE>self</TYPE>.<OO>height</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>HEIGHT</OO>)
		<TYPE>self</TYPE>.<OO>width</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>WIDTH</OO>)
		<TYPE>self</TYPE>.<OO>depth</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>DEPTH</OO>)
		<TYPE>self</TYPE>.<OO>initFrom</OO> <OPERATOR>=</OPERATOR> ReadContents(FindElementByTagName(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INIT_FROM</OO>))	
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeImage, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>FORMAT</OO>, <TYPE>self</TYPE>.<FUNCTION>format</FUNCTION>)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>HEIGHT</OO>, <TYPE>self</TYPE>.<OO>height</OO>)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>WIDTH</OO>, <TYPE>self</TYPE>.<OO>width</OO>)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>DEPTH</OO>, <TYPE>self</TYPE>.<OO>depth</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>INIT_FROM</OO>,<TYPE>self</TYPE>.<OO>initFrom</OO>, <TYPE>None</TYPE>)
		<KEYWORD>return</KEYWORD> node
	
<COMMENT>##class DaeMaterial(DaeElement):</COMMENT>
<COMMENT>##	  def __init__(self):</COMMENT>
<COMMENT>##		  super(DaeMaterial,self).__init__()</COMMENT>
<COMMENT>##		  self.asset = None</COMMENT>
<COMMENT>##		  self.iEffects = []</COMMENT>
<COMMENT>##		  self.extras = None</COMMENT>
<COMMENT>##		  self.syntax = DaeSyntax.MATERIAL</COMMENT>
<COMMENT>##		  </COMMENT>
<COMMENT>##	  def LoadFromXml(self, daeDocument, xmlNode):</COMMENT>
<COMMENT>##		  super(DaeMaterial, self).LoadFromXml(daeDocument, xmlNode)</COMMENT>
<COMMENT>##		  self.extras = CreateObjectsFromXml(daeDocument, xmlNode, DaeSyntax.EXTRA, DaeExtra)</COMMENT>
<COMMENT>##		  self.asset = CreateObjectFromXml(daeDocument, xmlNode, DaeSyntax.ASSET, DaeAsset)</COMMENT>
<COMMENT>##		  self.iEffects = CreateObjectsFromXml(daeDocument,xmlNode, DaeSyntax.INSTANCE_EFFECT, DaeEffectInstance)</COMMENT>
<COMMENT>##	  </COMMENT>
<COMMENT>##	  def SaveToXml(self, daeDocument):</COMMENT>
<COMMENT>##		  node = super(DaeMaterial, self).SaveToXml(daeDocument)</COMMENT>
<COMMENT>##		  # Add the assets</COMMENT>
<COMMENT>##		  AppendChild(daeDocument,node,self.asset)</COMMENT>
<COMMENT>##		  # Add the effect instances</COMMENT>
<COMMENT>##		  AppendChilds(daeDocument, node, self.iEffects)</COMMENT>
<COMMENT>##		  # Add the extra's</COMMENT>
<COMMENT>##		  AppendChilds(self,node,self.extras)</COMMENT>
<COMMENT>##		  return node</COMMENT>
<COMMENT>##		  </COMMENT>
<COMMENT>##	  def __str__(self):</COMMENT>
<COMMENT>##		  return super(DaeLight,self).__str__()+' assets: %s, data: %s, extras: %s'%(self.asset, self.data, self.extras)</COMMENT>

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeGeometry</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeGeometry,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>GEOMETRY</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeGeometry, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>ASSET</OO>, DaeAsset)
				
		<TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>MESH</OO>, DaeMesh)
		<KEYWORD>if</KEYWORD> <TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>CONVEX_MESH</OO>, DaeConvexMesh)
		<KEYWORD>if</KEYWORD> <TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SPLINE</OO>, DaeSpline)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeGeometry, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT># Add the assets</COMMENT>
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>asset</OO>)
		<COMMENT># Add the data</COMMENT>
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>data</OO>)
		<COMMENT># Add the extra's</COMMENT>
		AppendChilds(<TYPE>self</TYPE>,node,<TYPE>self</TYPE>.<OO>extras</OO>)
		<KEYWORD>return</KEYWORD> node
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeGeometry,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' assets: %s, data: %s, extras: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>asset</OO>, <TYPE>self</TYPE>.<OO>data</OO>, <TYPE>self</TYPE>.<OO>extras</OO>)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeConvexMesh</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeConvexMesh, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>CONVEX_MESH</OO>
		<TYPE>self</TYPE>.<OO>convexHullOf</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>convexHullOf</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>CONVEX_HULL_OF</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeConvexMesh, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>CONVEX_HULL_OF</OO>, StripString(<TYPE>self</TYPE>.<OO>convexHullOf</OO>))
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeMesh</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeMesh, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>sources</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>vertices</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>primitives</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>MESH</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<KEYWORD>return</KEYWORD>
		<TYPE>self</TYPE>.<OO>vertices</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>VERTICES</OO>, DaeVertices)		  
		<TYPE>self</TYPE>.<OO>sources</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SOURCE</OO>, DaeSource)
		
		lines <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>LINES</OO>, DaeLines)
		linestrips <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>LINESTRIPS</OO>, DaeLineStrips)
		polygons <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>POLYGONS</OO>, DaePolygons)
		polylist <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>POLYLIST</OO>, DaePolylist)
		triangles <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TRIANGLES</OO>, DaeTriangles)
		trifans <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TRIFANS</OO>, DaeTriFans)
		tristrips <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TRISTRIPS</OO>, DaeTriStrips)
		<KEYWORD>if</KEYWORD> lines <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>: <TYPE>self</TYPE>.<OO>primitives</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> lines
		<KEYWORD>if</KEYWORD> linestrips <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>: <TYPE>self</TYPE>.<OO>primitives</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> linestrips
		<KEYWORD>if</KEYWORD> polygons <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>: <TYPE>self</TYPE>.<OO>primitives</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> polygons
		<KEYWORD>if</KEYWORD> polylist <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>: <TYPE>self</TYPE>.<OO>primitives</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> polylist
		<KEYWORD>if</KEYWORD> triangles <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>: <TYPE>self</TYPE>.<OO>primitives</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> triangles
		<KEYWORD>if</KEYWORD> trifans <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>: <TYPE>self</TYPE>.<OO>primitives</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> trifans
		<KEYWORD>if</KEYWORD> tristrips <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>: <TYPE>self</TYPE>.<OO>primitives</OO> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> tristrips
		
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>FindSource</USER_FUNCTION>(<TYPE>self</TYPE>,<FUNCTION>input</FUNCTION>):
		<KEYWORD>for</KEYWORD> s <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>sources</OO>:
			<KEYWORD>if</KEYWORD> <OBJ>s</OBJ>.<FUNCTION>id</FUNCTION> <OPERATOR>==</OPERATOR> <FUNCTION>input</FUNCTION>.<OO>source</OO>:
				<KEYWORD>return</KEYWORD> s
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeMesh, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>sources</OO>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>vertices</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>primitives</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>extras</OO>)
		<KEYWORD>return</KEYWORD> node
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeVertices</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeVertices,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>inputs</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>VERTICES</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeVertices,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>inputs</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INPUT</OO>, DaeInput)
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeVertices, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>inputs</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>extras</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>FindInput</USER_FUNCTION>(<TYPE>self</TYPE>, semantic):
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>inputs</OO>:
			<KEYWORD>if</KEYWORD> <OBJ>i</OBJ>.<OO>semantic</OO> <OPERATOR>==</OPERATOR> semantic:
				<KEYWORD>return</KEYWORD> i
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeVertices,<TYPE>self</TYPE>).<OO>__str__</OO>() <OPERATOR>+</OPERATOR> <STRING>' inputs: %s, extras: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>inputs</OO>, <TYPE>self</TYPE>.<OO>extras</OO>)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeInput</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeInput, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>offset</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>semantic</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<TYPE>set</TYPE> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INPUT</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>offset</OO> <OPERATOR>=</OPERATOR> CastAttributeFromXml(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>OFFSET</OO>, <TYPE>int</TYPE>)
		<TYPE>self</TYPE>.<OO>semantic</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SEMANTIC</OO>)
		<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SOURCE</OO>)<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC>:<OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<TYPE>set</TYPE> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SET</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeInput, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node,<OBJ>DaeSyntax</OBJ>.<OO>OFFSET</OO>, <TYPE>self</TYPE>.<OO>offset</OO>)
		SetAttribute(node,<OBJ>DaeSyntax</OBJ>.<OO>SEMANTIC</OO>, <TYPE>self</TYPE>.<OO>semantic</OO>)
		SetAttribute(node,<OBJ>DaeSyntax</OBJ>.<OO>SOURCE</OO>, StripString(<STRING>'#'</STRING><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<OO>source</OO>))
		SetAttribute(node,<OBJ>DaeSyntax</OBJ>.<OO>SET</OO>, <TYPE>self</TYPE>.<TYPE>set</TYPE>)
		<KEYWORD>return</KEYWORD> node

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeSource</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeSource, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> DaeArray()
		<TYPE>self</TYPE>.<OO>vectors</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>techniques</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>SOURCE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeSource,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<KEYWORD>return</KEYWORD>
		bools <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>BOOL_ARRAY</OO>, DaeBoolArray)
		floats <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>FLOAT_ARRAY</OO>, DaeFloatArray)
		ints <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INT_ARRAY</OO>, DaeIntArray)
		names <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>NAME_ARRAY</OO>, DaeNameArray)
		<KEYWORD>if</KEYWORD> bools <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
			<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> bools
		<KEYWORD>elif</KEYWORD> floats <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
			<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> floats
		<KEYWORD>elif</KEYWORD> ints <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
			<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> ints
		<KEYWORD>elif</KEYWORD> names <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
			<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> names
		
		<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>, <OBJ>DaeSource</OBJ>.<OO>DaeTechniqueCommon</OO>)
		<TYPE>self</TYPE>.<OO>techniques</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE</OO>,DaeTechnique)
		<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> (<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>):
			<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> <FUNCTION>range</FUNCTION>(<NUMERIC>0</NUMERIC>,<TYPE>self</TYPE>.<OBJ>techniqueCommon</OBJ>.<OBJ>accessor</OBJ>.<OO>count</OO>):
				vec <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>			
				<KEYWORD>for</KEYWORD> j <OPERATOR>in</OPERATOR> <FUNCTION>range</FUNCTION>(<NUMERIC>0</NUMERIC>,<TYPE>self</TYPE>.<OBJ>techniqueCommon</OBJ>.<OBJ>accessor</OBJ>.<OO>stride</OO>):
					<OBJ>vec</OBJ>.<OO>append</OO>(<TYPE>self</TYPE>.<OBJ>source</OBJ>.<OO>data</OO><OPERATOR>[</OPERATOR>i<OPERATOR>*</OPERATOR><TYPE>self</TYPE>.<OBJ>techniqueCommon</OBJ>.<OBJ>accessor</OBJ>.<OO>stride</OO><OPERATOR>+</OPERATOR>j<OPERATOR>]</OPERATOR>)
				<TYPE>self</TYPE>.<OBJ>vectors</OBJ>.<OO>append</OO>(vec)	
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeSource, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
<COMMENT>##		  if len(self.vectors) &gt; 0:</COMMENT>
<COMMENT>##			  if type(self.vectors[0][0]) == float:</COMMENT>
<COMMENT>##				  self.source = DaeFloatArray()</COMMENT>
<COMMENT>##				  self.source.id = self.id+'-array'</COMMENT>
<COMMENT>##				  </COMMENT>
<COMMENT>##		  for i in range(len(self.vectors)):</COMMENT>
<COMMENT>##			  for j in range(len(self.vectors[i])):</COMMENT>
<COMMENT>##				  self.source.data.append(self.vectors[i][j])</COMMENT>
			
		<COMMENT># Add the source</COMMENT>
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>source</OO>)
		<COMMENT># Add the technique common		 </COMMENT>
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>techniqueCommon</OO>)
		<COMMENT># Add the techniques</COMMENT>
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>techniques</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeSource,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' source: %s, techniqueCommon: %s, techniques: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>source</OO>, <TYPE>self</TYPE>.<OO>techniqueCommon</OO>, <TYPE>self</TYPE>.<OO>techniques</OO>)

	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeTechniqueCommon</USER_FUNCTION>(DaeEntity):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<TYPE>self</TYPE>.<OO>accessor</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<TYPE>self</TYPE>.<OO>accessor</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>ACCESSOR</OO>, DaeAccessor)
			   
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeSource</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			AppendChild(daeDocument,node, <TYPE>self</TYPE>.<OO>accessor</OO>)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeSource</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' accessor: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>accessor</OO>)
		
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeLight</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeLight,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeLight</OBJ>.<OO>DaeTechniqueCommon</OO>()
		<TYPE>self</TYPE>.<OO>techniques</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>LIGHT</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeLight, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>ASSET</OO>, DaeAsset)
		<COMMENT>##self.techniqueCommon.LoadFromXml(daeDocument, FindElementByTagName(xmlNode, DaeSyntax.TECHNIQUE_COMMON))</COMMENT>
		<TYPE>self</TYPE>.<OO>techniques</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE</OO>,DaeTechnique)
		
		lightSourceNode <OPERATOR>=</OPERATOR> RemoveWhiteSpaceNode(FindElementByTagName(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>)).<OO>firstChild</OO>
		lightSourceName <OPERATOR>=</OPERATOR> <OBJ>lightSourceNode</OBJ>.<OO>localName</OO>
		<KEYWORD>if</KEYWORD> lightSourceName <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>DIRECTIONAL</OO>:
			<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeLight</OBJ>.<OO>DaeDirectional</OO>()			
		<KEYWORD>elif</KEYWORD> lightSourceName <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>SPOT</OO>:
			<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeLight</OBJ>.<OO>DaeSpot</OO>()
		<KEYWORD>elif</KEYWORD> lightSourceName <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>AMBIENT</OO>:
			<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeLight</OBJ>.<OO>DaeAmbient</OO>()
		<KEYWORD>elif</KEYWORD> lightSourceName <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>POINT</OO>:
			<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeLight</OBJ>.<OO>DaePoint</OO>()
		<TYPE>self</TYPE>.<OBJ>techniqueCommon</OBJ>.<OO>LoadFromXml</OO>(daeDocument,lightSourceNode)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeLight, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT># Add the assets</COMMENT>
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>asset</OO>)
		<COMMENT># Add the technique common		 </COMMENT>
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>techniqueCommon</OO>)
		<COMMENT># Add the techniques</COMMENT>
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>techniques</OO>)
		<COMMENT># Add the extra's</COMMENT>
		AppendChilds(<TYPE>self</TYPE>,node,<TYPE>self</TYPE>.<OO>extras</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeLight,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' techniqueCommon: %s, techniques: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>techniqueCommon</OO>, <TYPE>self</TYPE>.<OO>techniques</OO>)
		
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeTechniqueCommon</USER_FUNCTION>(DaeEntity):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<TYPE>self</TYPE>.<OO>color</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
			<TYPE>self</TYPE>.<OO>lightSource</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<TYPE>self</TYPE>.<OO>color</OO> <OPERATOR>=</OPERATOR> ToFloat3(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>COLOR</OO>)))
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node <OPERATOR>=</OPERATOR> Element(<OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>)
			child <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			AppendTextChild(child,<OBJ>DaeSyntax</OBJ>.<OO>COLOR</OO>, <TYPE>self</TYPE>.<OO>color</OO>)
			<OBJ>node</OBJ>.<OO>appendChild</OO>(child)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' color: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>color</OO>)
		
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeAmbient</USER_FUNCTION>(DaeTechniqueCommon):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeAmbient</OO>,<TYPE>self</TYPE>).<OO>__init__</OO>()
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>AMBIENT</OO>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeAmbient</OO>,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node  <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeAmbient</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeAmbient</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()
	
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeSpot</USER_FUNCTION>(DaeTechniqueCommon):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeSpot</OO>,<TYPE>self</TYPE>).<OO>__init__</OO>()
			<TYPE>self</TYPE>.<OO>defConstantAttenuation</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>defLinearAttenuation</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>defQuadraticAttenuation</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>defFalloffAngle</OO> <OPERATOR>=</OPERATOR> <NUMERIC>180.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>defFalloffExponent</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			
			<TYPE>self</TYPE>.<OO>constantAttenuation</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>linearAttenuation</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>quadraticAttenuation</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>falloffAngle</OO> <OPERATOR>=</OPERATOR> <NUMERIC>180.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>falloffExponent</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>SPOT</OO>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeSpot</OO>,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
			<TYPE>self</TYPE>.<OO>constantAttenuation</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument,xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>CONSTANT_ATTENUATION</OO>, <TYPE>float</TYPE>, <TYPE>self</TYPE>.<OO>defConstantAttenuation</OO>, <NUMERIC>1.0</NUMERIC>)
			<TYPE>self</TYPE>.<OO>linearAttenuation</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument,xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>LINEAR_ATTENUATION</OO>,<TYPE>float</TYPE>, <TYPE>self</TYPE>.<OO>defLinearAttenuation</OO>, <NUMERIC>0</NUMERIC>)
			<TYPE>self</TYPE>.<OO>quadraticAttenuation</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>QUADRATIC_ATTENUATION</OO>, <TYPE>float</TYPE>, <TYPE>self</TYPE>.<OO>defQuadraticAttenuation</OO>, <NUMERIC>0</NUMERIC>)
			<TYPE>self</TYPE>.<OO>falloffAngle</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>FALLOFF_ANGLE</OO>, <TYPE>float</TYPE>, <TYPE>self</TYPE>.<OO>defFalloffAngle</OO>, <NUMERIC>180.0</NUMERIC>)
			<TYPE>self</TYPE>.<OO>falloffExponent</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>FALLOFF_EXPONENT</OO>, <TYPE>float</TYPE>, <TYPE>self</TYPE>.<OO>defFalloffExponent</OO>, <NUMERIC>0</NUMERIC>)
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeSpot</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>CONSTANT_ATTENUATION</OO>, <TYPE>self</TYPE>.<OO>constantAttenuation</OO>, <TYPE>self</TYPE>.<OO>defConstantAttenuation</OO>)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>LINEAR_ATTENUATION</OO>, <TYPE>self</TYPE>.<OO>linearAttenuation</OO>, <TYPE>self</TYPE>.<OO>defLinearAttenuation</OO>)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>QUADRATIC_ATTENUATION</OO>, <TYPE>self</TYPE>.<OO>quadraticAttenuation</OO>, <TYPE>self</TYPE>.<OO>defQuadraticAttenuation</OO>)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>FALLOFF_ANGLE</OO>, <TYPE>self</TYPE>.<OO>falloffAngle</OO>, <TYPE>self</TYPE>.<OO>defFalloffAngle</OO>)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>FALLOFF_EXPONENT</OO>, <TYPE>self</TYPE>.<OO>falloffExponent</OO>, <TYPE>self</TYPE>.<OO>defFalloffExponent</OO>)
			<KEYWORD>return</KEYWORD> node
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeSpot</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' const.att: %s, lin.att: %s, quad.att: %s, falloffAngle: %s, falloffExponent: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>constantAttenuation</OO>, <TYPE>self</TYPE>.<OO>linearAttenuation</OO>, <TYPE>self</TYPE>.<OO>quadraticAttenuation</OO>, <TYPE>self</TYPE>.<OO>falloffAngle</OO>, <TYPE>self</TYPE>.<OO>falloffExponent</OO>)
			
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeDirectional</USER_FUNCTION>(DaeTechniqueCommon):
		<COMMENT># default direction is [0,0,-1] pointing down the -Z axis.</COMMENT>
		<COMMENT># To change the direction, change the transform of the parent DaeNode</COMMENT>
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeDirectional</OO>,<TYPE>self</TYPE>).<OO>__init__</OO>()
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>DIRECTIONAL</OO>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeDirectional</OO>,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node  <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeDirectional</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaeDirectional</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()
	
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePoint</USER_FUNCTION>(DaeTechniqueCommon):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaePoint</OO>,<TYPE>self</TYPE>).<OO>__init__</OO>()
			<TYPE>self</TYPE>.<OO>constantAttenuation</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>linearAttenuation</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>quadraticAttenuation</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>POINT</OO>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaePoint</OO>,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
			<TYPE>self</TYPE>.<OO>constantAttenuation</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument,xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>CONSTANT_ATTENUATION</OO>, <TYPE>float</TYPE>, <NUMERIC>1</NUMERIC>)
			<TYPE>self</TYPE>.<OO>linearAttenuation</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument,xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>LINEAR_ATTENUATION</OO>,<TYPE>float</TYPE>, <NUMERIC>0</NUMERIC>)
			<TYPE>self</TYPE>.<OO>quadraticAttenuation</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>QUADRATIC_ATTENUATION</OO>, <TYPE>float</TYPE>, <NUMERIC>0</NUMERIC>)
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaePoint</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>CONSTANT_ATTENUATION</OO>, <TYPE>self</TYPE>.<OO>constantAttenuation</OO>)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>LINEAR_ATTENUATION</OO>, <TYPE>self</TYPE>.<OO>linearAttenuation</OO>)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>QUADRATIC_ATTENUATION</OO>, <TYPE>self</TYPE>.<OO>quadraticAttenuation</OO>)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeLight</OBJ>.<OO>DaePoint</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' const.att: %s, lin.att: %s, quad.att: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>constantAttenuation</OO>, <TYPE>self</TYPE>.<OO>linearAttenuation</OO>, <TYPE>self</TYPE>.<OO>quadraticAttenuation</OO>)
			
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeVisualScene</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeVisualScene,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>nodes</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>VISUAL_SCENE</OO>		
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeVisualScene, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>ASSET</OO>, DaeAsset)
		<TYPE>self</TYPE>.<OO>nodes</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>NODE</OO>, DaeNode)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeVisualScene, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT># Add the assets</COMMENT>
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>asset</OO>)
		<COMMENT># Add the nodes</COMMENT>
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>nodes</OO>)
		<COMMENT># Add the extra's</COMMENT>
		AppendChilds(<TYPE>self</TYPE>,node,<TYPE>self</TYPE>.<OO>extras</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>FindNode</USER_FUNCTION>(<TYPE>self</TYPE>, nodeUrl):
		<KEYWORD>for</KEYWORD> n <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>nodes</OO>:
			<KEYWORD>if</KEYWORD> <OBJ>n</OBJ>.<FUNCTION>id</FUNCTION> <OPERATOR>==</OPERATOR> nodeUrl:
				<KEYWORD>return</KEYWORD> n
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
		
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeVisualScene,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' asset: %s, nodes: %s, extras: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>asset</OO>, <TYPE>self</TYPE>.<OO>nodes</OO>, <TYPE>self</TYPE>.<OO>extras</OO>)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeNode</USER_FUNCTION>(DaeElement):
	
	<CONSTANT>NODE</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>2</NUMERIC>
	<CONSTANT>JOINT</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>	 
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeNode,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>sid</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<FUNCTION>type</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>DaeNode</OBJ>.<OO>NODE</OO>
		<TYPE>self</TYPE>.<OO>layer</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>transforms</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>nodes</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
		<TYPE>self</TYPE>.<OO>iAnimations</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>iCameras</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>iControllers</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>iGeometries</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>iLights</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>iNodes</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>iVisualScenes</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>NODE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeNode, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>sid</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SID</OO>)
		<FUNCTION>type</FUNCTION> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TYPE</OO>)
		<KEYWORD>if</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TYPE_JOINT</OO>:
			<TYPE>self</TYPE>.<FUNCTION>type</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>DaeNode</OBJ>.<OO>JOINT</OO>
		<KEYWORD>else</KEYWORD>:
			<TYPE>self</TYPE>.<FUNCTION>type</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>DaeNode</OBJ>.<OO>NODE</OO>			
		<TYPE>self</TYPE>.<OO>layer</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>LAYER</OO>).<OO>split</OO>()
		
		<COMMENT># Get transforms</COMMENT>
		RemoveWhiteSpaceNode(xmlNode)
		child <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>firstChild</OO>
		<KEYWORD>while</KEYWORD> child <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
			name <OPERATOR>=</OPERATOR> <OBJ>child</OBJ>.<OO>localName</OO>
			sid <OPERATOR>=</OPERATOR> ReadAttribute(child, <OBJ>DaeSyntax</OBJ>.<OO>SID</OO>)
			<KEYWORD>if</KEYWORD> name <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TRANSLATE</OO>:
				<TYPE>self</TYPE>.<OBJ>transforms</OBJ>.<OO>append</OO>(<OPERATOR>[</OPERATOR>name,ToFloatList(ReadContents(child)), sid<OPERATOR>]</OPERATOR>)
			<KEYWORD>elif</KEYWORD> name <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>ROTATE</OO>:
				<TYPE>self</TYPE>.<OBJ>transforms</OBJ>.<OO>append</OO>(<OPERATOR>[</OPERATOR>name,ToFloatList(ReadContents(child)), sid<OPERATOR>]</OPERATOR>)
			<KEYWORD>elif</KEYWORD> name <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>SCALE</OO>:
				<TYPE>self</TYPE>.<OBJ>transforms</OBJ>.<OO>append</OO>(<OPERATOR>[</OPERATOR>name,ToFloatList(ReadContents(child)), sid<OPERATOR>]</OPERATOR>)
			<KEYWORD>elif</KEYWORD> name <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>SKEW</OO>:
				<TYPE>self</TYPE>.<OBJ>transforms</OBJ>.<OO>append</OO>(<OPERATOR>[</OPERATOR>name,ToFloatList(ReadContents(child)), sid<OPERATOR>]</OPERATOR>)
			<KEYWORD>elif</KEYWORD> name <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>LOOKAT</OO>:
				<TYPE>self</TYPE>.<OBJ>transforms</OBJ>.<OO>append</OO>(<OPERATOR>[</OPERATOR>name,ToFloatList(ReadContents(child)), sid<OPERATOR>]</OPERATOR>)
			<KEYWORD>elif</KEYWORD> name <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>MATRIX</OO>:
				<TYPE>self</TYPE>.<OBJ>transforms</OBJ>.<OO>append</OO>(<OPERATOR>[</OPERATOR>name,ToMatrix4(ReadContents(child)), sid<OPERATOR>]</OPERATOR>)
				
			child <OPERATOR>=</OPERATOR> <OBJ>child</OBJ>.<OO>nextSibling</OO>
			
		<COMMENT># Get the instances</COMMENT>
		<TYPE>self</TYPE>.<OO>iAnimations</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_ANIMATION</OO>, DaeAnimationInstance)
		<TYPE>self</TYPE>.<OO>iCameras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_CAMERA</OO>, DaeCameraInstance)
		<TYPE>self</TYPE>.<OO>iControllers</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_CONTROLLER</OO>, DaeControllerInstance)
		<TYPE>self</TYPE>.<OO>iGeometries</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_GEOMETRY</OO>, DaeGeometryInstance)
		<TYPE>self</TYPE>.<OO>iLights</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_LIGHT</OO>, DaeLightInstance)
		<TYPE>self</TYPE>.<OO>iNodes</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_NODE</OO>, DaeNodeInstance)
		<TYPE>self</TYPE>.<OO>iVisualScenes</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_VISUAL_SCENE</OO>, DaeVisualSceneInstance)

		<COMMENT># Get childs nodes</COMMENT>
		<TYPE>self</TYPE>.<OO>nodes</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>NODE</OO>, DaeNode)

	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeNode, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>SID</OO>, <TYPE>self</TYPE>.<OO>sid</OO>)
		<KEYWORD>if</KEYWORD> <TYPE>self</TYPE>.<FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TYPE_JOINT</OO>:
			SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>TYPE</OO>, <OBJ>DaeNode</OBJ>.<OO>GetType</OO>(<TYPE>self</TYPE>.<FUNCTION>type</FUNCTION>))
		
		<COMMENT># Add the layers</COMMENT>
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>LAYER</OO>, ListToString(<TYPE>self</TYPE>.<OO>layer</OO>))
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>transforms</OO>:
			writeTransform <OPERATOR>=</OPERATOR> <TYPE>False</TYPE>
			el <OPERATOR>=</OPERATOR> Element(i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>)
			val <OPERATOR>=</OPERATOR> i<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>
			<KEYWORD>if</KEYWORD> i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>MATRIX</OO>:
				val <OPERATOR>=</OPERATOR> MatrixToString(val,<CONSTANT>ROUND</CONSTANT>)
				AppendTextChild(node,i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>,val)
			<KEYWORD>else</KEYWORD>:
				orgval <OPERATOR>=</OPERATOR> val
				val <OPERATOR>=</OPERATOR> ListToString(RoundList(val, <NUMERIC>5</NUMERIC>))
				<KEYWORD>if</KEYWORD> i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>SCALE</OO>:
					<COMMENT>##AppendTextChild(node,i[0],val,"1.0 1.0 1.0")</COMMENT>
					SetAttribute(AppendTextChild(node,i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>,val,<TYPE>None</TYPE>), <OBJ>DaeSyntax</OBJ>.<OO>SID</OO>, <OBJ>DaeSyntax</OBJ>.<OO>SCALE</OO>)
				<KEYWORD>elif</KEYWORD> i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TRANSLATE</OO>:
					<COMMENT>##AppendTextChild(node,i[0],val,"0.0 0.0 0.0")</COMMENT>
					SetAttribute(AppendTextChild(node,i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>,val,<TYPE>None</TYPE>), <OBJ>DaeSyntax</OBJ>.<OO>SID</OO>, <OBJ>DaeSyntax</OBJ>.<OO>TRANSLATE</OO>)
				<KEYWORD>elif</KEYWORD> i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>ROTATE</OO>:
					<COMMENT>##AppendTextChild(node,i[0],val,"0.0 0.0 0.0 0.0")</COMMENT>
					axis <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
					<KEYWORD>if</KEYWORD> orgval<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>and</OPERATOR> orgval<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>and</OPERATOR> orgval<OPERATOR>[</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>:
						axis <OPERATOR>=</OPERATOR> <STRING>"X"</STRING>
					<KEYWORD>elif</KEYWORD> orgval<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>and</OPERATOR> orgval<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>and</OPERATOR> orgval<OPERATOR>[</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>:
						axis <OPERATOR>=</OPERATOR> <STRING>"Y"</STRING>
					<KEYWORD>elif</KEYWORD> orgval<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>and</OPERATOR> orgval<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>and</OPERATOR> orgval<OPERATOR>[</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC>:
						axis <OPERATOR>=</OPERATOR> <STRING>"Z"</STRING>
					no <OPERATOR>=</OPERATOR> AppendTextChild(node,i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>,val,<TYPE>None</TYPE>)
					<KEYWORD>if</KEYWORD> axis <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
						SetAttribute(no, <OBJ>DaeSyntax</OBJ>.<OO>SID</OO>, <OBJ>DaeSyntax</OBJ>.<OO>ROTATE</OO><OPERATOR>+</OPERATOR>axis)
						
				<KEYWORD>elif</KEYWORD> i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>SKEW</OO>:
					AppendTextChild(node,i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>,val)
				<KEYWORD>elif</KEYWORD> i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>MATRIX</OO> <OPERATOR>or</OPERATOR> i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>LOOKAT</OO>:
					AppendTextChild(node,i<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>,val)
		
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>nodes</OO>) 		   
	
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iAnimations</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iCameras</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iControllers</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iGeometries</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iLights</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iNodes</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iVisualScenes</OO>)
		
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>IsJoint</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <TYPE>self</TYPE>.<FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeNode</OBJ>.<OO>JOINT</OO>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetType</USER_FUNCTION>(<FUNCTION>type</FUNCTION>):
		<KEYWORD>if</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeNode</OBJ>.<OO>JOINT</OO>:
			<KEYWORD>return</KEYWORD> <OBJ>DaeSyntax</OBJ>.<OO>TYPE_JOINT</OO>
		<KEYWORD>else</KEYWORD>:
			<KEYWORD>return</KEYWORD> <OBJ>DaeSyntax</OBJ>.<OO>TYPE_NODE</OO>
	GetType <OPERATOR>=</OPERATOR> <FUNCTION>staticmethod</FUNCTION>(GetType)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetInstances</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<OO>iAnimations</OO><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<OO>iCameras</OO><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<OO>iControllers</OO><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<OO>iGeometries</OO><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<OO>iLights</OO><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<OO>iNodes</OO>
	
	
	
<COMMENT># TODO:  Collada API: finish DaeTechnique </COMMENT>
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeTechnique</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeTechnique,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>profile</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>xmlns</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>profile</OO> <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>PROFILE</OO>)
		<TYPE>self</TYPE>.<OO>xmlns</OO> <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>XMLNS</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeTechnique,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<OBJ>node</OBJ>.<OO>setAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>PROFILE</OO>, <TYPE>self</TYPE>.<OO>profile</OO>)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>XMLNS</OO>, <TYPE>self</TYPE>.<OO>xmlns</OO>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeOptics</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeOptics,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeOptics</OBJ>.<OO>DaeTechniqueCommon</OO>()
		<TYPE>self</TYPE>.<OO>techniques</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>OPTICS</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		<COMMENT>#self.techniqueCommon.LoadFromXml(daeDocument, FindElementByTagName(xmlNode, DaeSyntax.TECHNIQUE_COMMON))</COMMENT>
		<TYPE>self</TYPE>.<OO>techniques</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE</OO>,DaeTechnique)
		
		opticsSourceNode <OPERATOR>=</OPERATOR> RemoveWhiteSpaceNode(FindElementByTagName(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>)).<OO>firstChild</OO>
		opticsSourceName <OPERATOR>=</OPERATOR> <OBJ>opticsSourceNode</OBJ>.<OO>localName</OO>
		<KEYWORD>if</KEYWORD> opticsSourceName <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>PERSPECTIVE</OO>:
			<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeOptics</OBJ>.<OO>DaePerspective</OO>()
		<KEYWORD>elif</KEYWORD> opticsSourceName <OPERATOR>==</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>ORTHOGRAPHIC</OO>:
			<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeOptics</OBJ>.<OO>DaeOrthoGraphic</OO>()
		<TYPE>self</TYPE>.<OBJ>techniqueCommon</OBJ>.<OO>LoadFromXml</OO>(daeDocument,opticsSourceNode)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeOptics, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT># Add the technique common		 </COMMENT>
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>techniqueCommon</OO>)
		<COMMENT># Add the techniques</COMMENT>
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>techniques</OO>)
		<COMMENT># Add the extra's</COMMENT>
		AppendChilds(<TYPE>self</TYPE>,node,<TYPE>self</TYPE>.<OO>extras</OO>)
		<KEYWORD>return</KEYWORD> node
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeOptics,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' extras: %s, techniqueCommon: %s, techniques: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>extras</OO>, <TYPE>self</TYPE>.<OO>techniqueCommon</OO>, <TYPE>self</TYPE>.<OO>techniques</OO>)
	
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeTechniqueCommon</USER_FUNCTION>(DaeEntity):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<TYPE>self</TYPE>.<OO>znear</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>zfar</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>
			<TYPE>self</TYPE>.<OO>aspectRatio</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<TYPE>self</TYPE>.<OO>znear</OO> <OPERATOR>=</OPERATOR> ToFloat(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>ZNEAR</OO>)))
			<TYPE>self</TYPE>.<OO>zfar</OO> <OPERATOR>=</OPERATOR> ToFloat(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>ZFAR</OO>)))
			<TYPE>self</TYPE>.<OO>aspectRatio</OO> <OPERATOR>=</OPERATOR> ToFloat(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>ASPECT_RATIO</OO>)))
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node <OPERATOR>=</OPERATOR> Element(<OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>)
			child <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
<COMMENT>##			  AppendTextChild(child,DaeSyntax.ZNEAR, self.znear)</COMMENT>
<COMMENT>##			  AppendTextChild(child,DaeSyntax.ZFAR, self.zfar)</COMMENT>
<COMMENT>##			  AppendTextChild(child,DaeSyntax.ASPECT_RATIO, self.aspectRatio)			 </COMMENT>
			<OBJ>node</OBJ>.<OO>appendChild</OO>(child)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SavePropertiesToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, node):			 
			AppendTextChild(node,<OBJ>DaeSyntax</OBJ>.<OO>ZNEAR</OO>, <TYPE>self</TYPE>.<OO>znear</OO>)
			AppendTextChild(node,<OBJ>DaeSyntax</OBJ>.<OO>ZFAR</OO>, <TYPE>self</TYPE>.<OO>zfar</OO>)
			AppendTextChild(node,<OBJ>DaeSyntax</OBJ>.<OO>ASPECT_RATIO</OO>, <TYPE>self</TYPE>.<OO>aspectRatio</OO>)
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' znear: %s, zfar: %s, aspectRatio: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>znear</OO>, <TYPE>self</TYPE>.<OO>zfar</OO>, <TYPE>self</TYPE>.<OO>aspectRatio</OO>)
		
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePerspective</USER_FUNCTION>(DaeTechniqueCommon):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaePerspective</OO>,<TYPE>self</TYPE>).<OO>__init__</OO>()
			<TYPE>self</TYPE>.<OO>xfov</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<TYPE>self</TYPE>.<OO>yfov</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>PERSPECTIVE</OO>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaePerspective</OO>,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
			<TYPE>self</TYPE>.<OO>xfov</OO> <OPERATOR>=</OPERATOR> ToFloat(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>XFOV</OO>)))
			<TYPE>self</TYPE>.<OO>yfov</OO> <OPERATOR>=</OPERATOR> ToFloat(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>YFOV</OO>)))
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node  <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaePerspective</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>XFOV</OO>, <TYPE>self</TYPE>.<OO>xfov</OO>)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>YFOV</OO>, <TYPE>self</TYPE>.<OO>yfov</OO>)
			<FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaePerspective</OO>,<TYPE>self</TYPE>).<OO>SavePropertiesToXml</OO>(daeDocument, <OBJ>node</OBJ>.<OO>firstChild</OO>)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaePerspective</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' xfov: %s, yfov: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>xfov</OO>, <TYPE>self</TYPE>.<OO>yfov</OO>)
			
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeOrthoGraphic</USER_FUNCTION>(DaeTechniqueCommon):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaeOrthoGraphic</OO>,<TYPE>self</TYPE>).<OO>__init__</OO>()
			<TYPE>self</TYPE>.<OO>xmag</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<TYPE>self</TYPE>.<OO>ymag</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>ORTHOGRAPHIC</OO>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaeOrthoGraphic</OO>,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
			<TYPE>self</TYPE>.<OO>xmag</OO> <OPERATOR>=</OPERATOR> ToFloat(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>XMAG</OO>)))
			<TYPE>self</TYPE>.<OO>ymag</OO> <OPERATOR>=</OPERATOR> ToFloat(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>YMAG</OO>)))
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node  <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaeOrthoGraphic</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>XMAG</OO>, <TYPE>self</TYPE>.<OO>xmag</OO>)
			AppendTextChild(<OBJ>node</OBJ>.<OO>firstChild</OO>,<OBJ>DaeSyntax</OBJ>.<OO>YMAG</OO>, <TYPE>self</TYPE>.<OO>ymag</OO>)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeOptics</OBJ>.<OO>DaeOrthoGraphic</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR> <STRING>'xmag: %s, ymag: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>xmag</OO>, <TYPE>self</TYPE>.<OO>ymag</OO>)

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeImager</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeImager,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>techniques</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>IMAGER</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeImager, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		<TYPE>self</TYPE>.<OO>techniques</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE</OO>,DaeTechnique)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeOptics, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT># Add the techniques</COMMENT>
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>techniques</OO>)
		<COMMENT># Add the extra's</COMMENT>
		AppendChilds(<TYPE>self</TYPE>,node,<TYPE>self</TYPE>.<OO>extras</OO>)
		<KEYWORD>return</KEYWORD> node
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeImager,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' extras: %s, techniques: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>techniqueCommon</OO>, <TYPE>self</TYPE>.<OO>techniques</OO>)
	
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeExtra</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeExtra,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<FUNCTION>type</FUNCTION> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>techniques</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<FUNCTION>type</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>TYPE</OO>)
		<TYPE>self</TYPE>.<OO>techniques</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE</OO>,DaeTechnique)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeExtra,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>techniques</OO>)
		<KEYWORD>return</KEYWORD> node
		
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeExtra,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>'techniques: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>techniques</OO>)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeAccessor</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeAccessor,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>count</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>
		<TYPE>self</TYPE>.<OO>offset</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>__stride</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
<COMMENT>##		self.stride = property(self.GetStride)</COMMENT>
		<TYPE>self</TYPE>.<OO>params</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>ACCESSOR</OO>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>,daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>count</OO> <OPERATOR>=</OPERATOR> CastAttributeFromXml(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>COUNT</OO>,<TYPE>int</TYPE>,<NUMERIC>0</NUMERIC>)
		<TYPE>self</TYPE>.<OO>offset</OO> <OPERATOR>=</OPERATOR> CastAttributeFromXml(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>OFFSET</OO>,<TYPE>int</TYPE>)
		<TYPE>self</TYPE>.<OO>source</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SOURCE</OO>)
		<TYPE>self</TYPE>.<OO>stride</OO> <OPERATOR>=</OPERATOR> CastAttributeFromXml(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>STRIDE</OO>,<TYPE>int</TYPE>)
		<TYPE>self</TYPE>.<OO>params</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>PARAM</OO>, DaeParam)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeAccessor,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<OBJ>node</OBJ>.<OO>setAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>COUNT</OO>, <TYPE>str</TYPE>(<TYPE>self</TYPE>.<OO>count</OO>))
		SetAttribute(node,<OBJ>DaeSyntax</OBJ>.<OO>OFFSET</OO>, <TYPE>self</TYPE>.<OO>offset</OO>)
		<OBJ>node</OBJ>.<OO>setAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>SOURCE</OO>, StripString(<STRING>'#'</STRING><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<OO>source</OO>))
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>STRIDE</OO>, <TYPE>self</TYPE>.<OO>stride</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>params</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>AddParam</USER_FUNCTION>(<TYPE>self</TYPE>, name, <FUNCTION>type</FUNCTION>):
		param <OPERATOR>=</OPERATOR> DaeParam()
		<OBJ>param</OBJ>.<OO>name</OO> <OPERATOR>=</OPERATOR> name
		<OBJ>param</OBJ>.<FUNCTION>type</FUNCTION> <OPERATOR>=</OPERATOR> <FUNCTION>type</FUNCTION>
		<TYPE>self</TYPE>.<OBJ>params</OBJ>.<OO>append</OO>(param)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetStride</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>if</KEYWORD> <TYPE>self</TYPE>.<OO>__stride</OO> <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<KEYWORD>return</KEYWORD> <FUNCTION>len</FUNCTION>(<TYPE>self</TYPE>.<OO>params</OO>)
		<KEYWORD>else</KEYWORD>:
			<KEYWORD>return</KEYWORD> <TYPE>self</TYPE>.<OO>__stride</OO>

	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SetStride</USER_FUNCTION>(<TYPE>self</TYPE>, val):
		<TYPE>self</TYPE>.<OO>__stride</OO> <OPERATOR>=</OPERATOR> val
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>HasParam</USER_FUNCTION>(<TYPE>self</TYPE>, paramName):
		<KEYWORD>return</KEYWORD> paramName <OPERATOR>in</OPERATOR> <OPERATOR>[</OPERATOR><OBJ>param</OBJ>.<OO>name</OO> <KEYWORD>for</KEYWORD> param <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>params</OO><OPERATOR>]</OPERATOR>


	stride <OPERATOR>=</OPERATOR> <FUNCTION>property</FUNCTION>(GetStride, SetStride)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeParam</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeParam,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>name</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>semantic</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>sid</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE> 
		<TYPE>self</TYPE>.<FUNCTION>type</FUNCTION> <OPERATOR>=</OPERATOR> <STRING>''</STRING>	 
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>PARAM</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>semantic</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SEMANTIC</OO>)
		<TYPE>self</TYPE>.<OO>sid</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SID</OO>)
		<TYPE>self</TYPE>.<OO>name</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>NAME</OO>)
		<TYPE>self</TYPE>.<FUNCTION>type</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>TYPE</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeParam,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>SEMANTIC</OO>, <TYPE>self</TYPE>.<OO>semantic</OO>)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>SID</OO>, <TYPE>self</TYPE>.<OO>sid</OO>)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>NAME</OO>, <TYPE>self</TYPE>.<OO>name</OO>)
		<OBJ>node</OBJ>.<OO>setAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>TYPE</OO>, <TYPE>self</TYPE>.<FUNCTION>type</FUNCTION>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeArray</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeArray, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>count</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>
		<TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeArray, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>count</OO> <OPERATOR>=</OPERATOR> ToInt(ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>COUNT</OO>))
		<TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>=</OPERATOR> ToList(ReadContents(xmlNode))
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeArray,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>COUNT</OO>, <FUNCTION>len</FUNCTION>(<TYPE>self</TYPE>.<OO>data</OO>))
		AppendTextInChild(node, <TYPE>self</TYPE>.<OO>data</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeArray,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' count: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>count</OO>)
		
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFloatArray</USER_FUNCTION>(DaeArray):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFloatArray, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>FLOAT_ARRAY</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeFloatArray, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>=</OPERATOR> ToFloatList(<TYPE>self</TYPE>.<OO>data</OO>)
		
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeIntArray</USER_FUNCTION>(DaeArray):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeIntArray, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INT_ARRAY</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeIntArray, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>=</OPERATOR> ToIntList(<TYPE>self</TYPE>.<OO>data</OO>)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeBoolArray</USER_FUNCTION>(DaeArray):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeBoolArray, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>BOOL_ARRAY</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeBoolArray, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>data</OO> <OPERATOR>=</OPERATOR> ToBoolList(<TYPE>self</TYPE>.<OO>data</OO>)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeNameArray</USER_FUNCTION>(DaeArray):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeNameArray, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>NAME_ARRAY</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeNameArray, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<COMMENT>##self.data = ToFloatList(self.data)</COMMENT>
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeIDREFArray</USER_FUNCTION>(DaeArray):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeIDREFArray, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>IDREF_ARRAY</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeIDREFArray, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<COMMENT>##self.data = ToFloatList(self.data)</COMMENT>


<COMMENT>#---Primitive Classes---</COMMENT>
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePrimitive</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaePrimitive, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>name</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>count</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>
		<TYPE>self</TYPE>.<OO>material</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>		  
		<TYPE>self</TYPE>.<OO>inputs</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>name</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>NAME</OO>)
		<TYPE>self</TYPE>.<OO>count</OO> <OPERATOR>=</OPERATOR> <TYPE>int</TYPE>(ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>COUNT</OO>))
		<TYPE>self</TYPE>.<OO>material</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>MATERIAL</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaePrimitive, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>NAME</OO>, <TYPE>self</TYPE>.<OO>name</OO>)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>MATERIAL</OO>, StripString(<TYPE>self</TYPE>.<OO>material</OO>))
		<OBJ>node</OBJ>.<OO>setAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>COUNT</OO>, <TYPE>str</TYPE>(<TYPE>self</TYPE>.<OO>count</OO>))
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetMaxOffset</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>if</KEYWORD> <TYPE>self</TYPE>.<OO>inputs</OO> <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>:
			<KEYWORD>return</KEYWORD> <FUNCTION>max</FUNCTION>(<OPERATOR>[</OPERATOR><OBJ>i</OBJ>.<OO>offset</OO> <KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>inputs</OO><OPERATOR>]</OPERATOR>)
		<KEYWORD>else</KEYWORD>:
			<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>FindInput</USER_FUNCTION>(<TYPE>self</TYPE>, semantic):
		<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>inputs</OO>:
			<KEYWORD>if</KEYWORD> <OBJ>i</OBJ>.<OO>semantic</OO> <OPERATOR>==</OPERATOR> semantic:
				<KEYWORD>return</KEYWORD> i
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
		
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeLines</USER_FUNCTION>(DaePrimitive):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeLines, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>LINES</OO>
		<TYPE>self</TYPE>.<OO>lines</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeLines,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>LINES</OO>
		<TYPE>self</TYPE>.<OO>inputs</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INPUT</OO>, DaeInput)
		<TYPE>self</TYPE>.<OO>lines</OO> <OPERATOR>=</OPERATOR> ToIntList(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>P</OO>)))
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeLines,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>inputs</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>P</OO>, <TYPE>self</TYPE>.<OO>lines</OO>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeLineStrips</USER_FUNCTION>(DaePrimitive):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeLineStrips, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>LINESTRIPS</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeLineStrips,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		
		

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePolygons</USER_FUNCTION>(DaePrimitive):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaePolygons, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>POLYGONS</OO>
		<TYPE>self</TYPE>.<OO>polygons</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>holedPolygons</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaePolygons,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>polygons</OO> <OPERATOR>=</OPERATOR> GetListFromNodes(<OBJ>xmlNode</OBJ>.<OO>getElementsByTagName</OO>(<OBJ>DaeSyntax</OBJ>.<OO>P</OO>), <TYPE>int</TYPE>)
		<TYPE>self</TYPE>.<OO>inputs</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INPUT</OO>, DaeInput)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaePolygons,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>inputs</OO>)
		AppendChilds(node, <OBJ>DaeSyntax</OBJ>.<OO>P</OO>, <TYPE>self</TYPE>.<OO>polygons</OO>)
		<KEYWORD>return</KEYWORD> node 	   
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePolylist</USER_FUNCTION>(DaePrimitive):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaePolylist, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>POLYLIST</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaePolylist,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeTriangles</USER_FUNCTION>(DaePrimitive):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeTriangles, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>triangles</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TRIANGLES</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeTriangles,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>triangles</OO> <OPERATOR>=</OPERATOR> ToIntList(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaeSyntax</OBJ>.<OO>P</OO>)))
		<TYPE>self</TYPE>.<OO>inputs</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INPUT</OO>, DaeInput)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeTriangles,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>inputs</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>P</OO>, <TYPE>self</TYPE>.<OO>triangles</OO>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeTriFans</USER_FUNCTION>(DaePrimitive):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeTriFans, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TRIFANS</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeTriFans,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeTriStrips</USER_FUNCTION>(DaePrimitive):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeTriStrips, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TRISTRIPS</OO>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeTriStrips,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
<COMMENT>#---instance Classes---</COMMENT>
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeInstance</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>url</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>		
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>url</OO> <OPERATOR>=</OPERATOR> ReadNodeUrl(xmlNode)
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>extras</OO>)
		WriteNodeUrl(node, <TYPE>self</TYPE>.<FUNCTION>object</FUNCTION>.<FUNCTION>id</FUNCTION>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeAnimationInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeAnimationInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_ANIMATION</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeAnimationInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>animationsLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeAnimationInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeCameraInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeCameraInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()		 
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_CAMERA</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeCameraInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>camerasLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeCameraInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeControllerInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeControllerInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()		 
		<TYPE>self</TYPE>.<OO>skeletons</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>bindMaterials</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_CONTROLLER</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeControllerInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>skeletons</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>SKELETON</OO>, DaeSkeleton)
		<TYPE>self</TYPE>.<OO>bindMaterials</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>BIND_MATERIAL</OO>, DaeFxBindMaterial)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>controllersLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeControllerInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>skeletons</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>bindMaterials</OO>)
		<KEYWORD>return</KEYWORD> node
	
<COMMENT># TODO:  Collada API: finish DaeEffectInstance</COMMENT>
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeEffectInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeEffectInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()		 
		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_EFFECT</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeEffectInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>effectsLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeEffectInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeGeometryInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeGeometryInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>bindMaterials</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_GEOMETRY</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeGeometryInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>bindMaterials</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>BIND_MATERIAL</OO>, DaeFxBindMaterial)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>geometriesLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeGeometryInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>bindMaterials</OO>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeLightInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeLightInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()		   
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_LIGHT</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeLightInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>lightsLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeLightInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeNodeInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeNodeInstance, <TYPE>self</TYPE>).<OO>__init__</OO>() 	   
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_NODE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeNodeInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>nodesLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeNodeInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>return</KEYWORD> node

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeVisualSceneInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeVisualSceneInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()		  
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_VISUAL_SCENE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeVisualSceneInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>visualScenesLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeVisualSceneInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>return</KEYWORD> node
		
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeSkeleton</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeSkeleton,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>iControllers</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>iControllers</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_CONTROLLER</OO>, DaeControllerInstance)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeSkeleton, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iControllers</OO>)
		<KEYWORD>return</KEYWORD> node


<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeSyntax</USER_FUNCTION>(<FUNCTION>object</FUNCTION>):
	
	<COMMENT>#---collada---</COMMENT>
	<CONSTANT>COLLADA</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'COLLADA'</STRING>
	<CONSTANT>VERSION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'version'</STRING>
	<CONSTANT>XMLNS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'xmlns'</STRING>
	
	<CONSTANT>BODY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'body'</STRING>
	<CONSTANT>TARGET</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'target'</STRING>
	
	<CONSTANT>ASSET</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'asset'</STRING>
	
	<CONSTANT>ID</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'id'</STRING>
	<CONSTANT>NAME</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'name'</STRING>
	<CONSTANT>URL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'url'</STRING>
	
	<CONSTANT>COUNT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'count'</STRING>
	<CONSTANT>OFFSET</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'offset'</STRING>
	<CONSTANT>STRIDE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'stride'</STRING>
	
	<CONSTANT>METER</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'meter'</STRING>
	<CONSTANT>SID</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'sid'</STRING>
	<CONSTANT>SEMANTIC</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'semantic'</STRING>
	<CONSTANT>PARAM</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'param'</STRING>
	
	<CONSTANT>PROFILE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'profile'</STRING>
	<CONSTANT>TECHNIQUE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'technique'</STRING>
	<CONSTANT>TECHNIQUE_COMMON</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'technique_common'</STRING>
	
	<COMMENT>##BIND_MATERIAL = 'bind_material'</COMMENT>
	<CONSTANT>SKELETON</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'skeleton'</STRING>
	
	P <OPERATOR>=</OPERATOR> <STRING>'p'</STRING>
	<CONSTANT>PH</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'ph'</STRING>
	H <OPERATOR>=</OPERATOR> <STRING>'h'</STRING>
	
	
	<CONSTANT>INPUT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'input'</STRING>
	<CONSTANT>SET</CONSTANT>  <OPERATOR>=</OPERATOR> <STRING>'set'</STRING>
	
	<COMMENT>#---light---</COMMENT>
	<CONSTANT>COLOR</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'color'</STRING>
	<CONSTANT>AMBIENT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'ambient'</STRING>
	<CONSTANT>SPOT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'spot'</STRING>
	<CONSTANT>DIRECTIONAL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'directional'</STRING>
	<CONSTANT>POINT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'point'</STRING>
	
	<CONSTANT>CONSTANT_ATTENUATION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'constant_attenuation'</STRING>
	<CONSTANT>LINEAR_ATTENUATION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'linear_attenuation'</STRING>
	<CONSTANT>QUADRATIC_ATTENUATION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'quadratic_attenuation'</STRING>
	
	<CONSTANT>FALLOFF_ANGLE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'falloff_angle'</STRING>
	<CONSTANT>FALLOFF_EXPONENT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'falloff_exponent'</STRING>
	
	<COMMENT>#---camera--</COMMENT>
	<CONSTANT>OPTICS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'optics'</STRING>
	<CONSTANT>PERSPECTIVE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'perspective'</STRING>
	<CONSTANT>ORTHOGRAPHIC</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'orthographic'</STRING>
	<CONSTANT>IMAGER</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'imager'</STRING>
	<CONSTANT>ZNEAR</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'znear'</STRING>
	<CONSTANT>ZFAR</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'zfar'</STRING>
	<CONSTANT>XFOV</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'xfov'</STRING>
	<CONSTANT>YFOV</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'yfov'</STRING>
	<CONSTANT>XMAG</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'xmag'</STRING>
	<CONSTANT>YMAG</CONSTANT> <OPERATOR>=</OPERATOR><STRING>'ymag'</STRING>
	<CONSTANT>ASPECT_RATIO</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'aspect_ratio'</STRING>

	<COMMENT>#---geometry---</COMMENT>
	<CONSTANT>MESH</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'mesh'</STRING>
	<CONSTANT>CONVEX_MESH</CONSTANT> <OPERATOR>=</OPERATOR><STRING>'convex_mesh'</STRING>
	<CONSTANT>SPLINE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'spline'</STRING>
	<CONSTANT>SOURCE</CONSTANT>	<OPERATOR>=</OPERATOR><STRING>'source'</STRING>
	<CONSTANT>VERTICES</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'vertices'</STRING>
	<CONSTANT>ACCESSOR</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'accessor'</STRING>
	
	<CONSTANT>CONVEX_HULL_OF</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'convex_hull_of'</STRING>

	<COMMENT>#---primitives---</COMMENT>
	<CONSTANT>LINES</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'lines'</STRING>
	<CONSTANT>LINESTRIPS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'linestrips'</STRING>
	<CONSTANT>POLYGONS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'polygons'</STRING>
	<CONSTANT>POLYLIST</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'polylist'</STRING>
	<CONSTANT>TRIANGLES</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'triangles'</STRING>
	<CONSTANT>TRIFANS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'trifans'</STRING>
	<CONSTANT>TRISTRIPS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'tristrips'</STRING>
	
	<COMMENT>#---libraries---</COMMENT>
	<CONSTANT>LIBRARY_ANIMATIONS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_animations'</STRING>
	<CONSTANT>LIBRARY_ANIMATION_CLIPS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_animation_clips'</STRING>
	<CONSTANT>LIBRARY_CAMERAS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_cameras'</STRING>
	<CONSTANT>LIBRARY_CONTROLLERS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_controllers'</STRING>
	<CONSTANT>LIBRARY_EFFECTS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_effects'</STRING>
	<CONSTANT>LIBRARY_FORCE_FIELDS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_force_fields'</STRING>
	<CONSTANT>LIBRARY_GEOMETRIES</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_geometries'</STRING>
	<CONSTANT>LIBRARY_IMAGES</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_images'</STRING>
	<CONSTANT>LIBRARY_LIGHTS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_lights'</STRING>
	<CONSTANT>LIBRARY_MATERIALS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_materials'</STRING>
	<CONSTANT>LIBRARY_NODES</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_NODES'</STRING>
	<CONSTANT>LIBRARY_PHYSICS_MATERIALS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_physics_materials'</STRING>
	<CONSTANT>LIBRARY_PHYSICS_MODELS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_physics_models'</STRING>
	<CONSTANT>LIBRARY_PHYSICS_SCENES</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_physics_scenes'</STRING>
	<CONSTANT>LIBRARY_VISUAL_SCENES</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'library_visual_scenes'</STRING>
	
	<CONSTANT>SCENE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'scene'</STRING>
	<CONSTANT>EXTRA</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'extra'</STRING>
	<CONSTANT>TYPE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'type'</STRING>
	<CONSTANT>LIGHT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'light'</STRING>
	<CONSTANT>CAMERA</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'camera'</STRING>
	<CONSTANT>ANIMATION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'animation'</STRING>
	<CONSTANT>ANIMATION_CLIP</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'animation_clip'</STRING>
	<CONSTANT>GEOMETRY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'geometry'</STRING>
	<CONSTANT>IMAGE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'image'</STRING>
	<COMMENT>##EFFECT = 'effect'</COMMENT>
	<CONSTANT>VISUAL_SCENE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'visual_scene'</STRING>
	<CONSTANT>CONTROLLER</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'controller'</STRING>
	<CONSTANT>MATERIAL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'material'</STRING>
	
	<COMMENT>#---asset---</COMMENT>
	<CONSTANT>CONTRIBUTOR</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'contributor'</STRING>
	<CONSTANT>CREATED</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'created'</STRING>
	<CONSTANT>MODIFIED</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'modified'</STRING>
	<CONSTANT>REVISION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'revision'</STRING>
	<CONSTANT>TITLE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'title'</STRING>
	<CONSTANT>SUBJECT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'subject'</STRING>
	<CONSTANT>KEYWORDS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'keywords'</STRING>
	<CONSTANT>UNIT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'unit'</STRING>
	<CONSTANT>UP_AXIS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'up_axis'</STRING>
	
	<CONSTANT>Y_UP</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'Y_UP'</STRING>
	<CONSTANT>Z_UP</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'Z_UP'</STRING>
	
	<COMMENT>#---contributor---</COMMENT>
	<CONSTANT>AUTHOR</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'author'</STRING>
	<CONSTANT>AUTHORING_TOOL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'authoring_tool'</STRING>
	<CONSTANT>COMMENTS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'comments'</STRING>
	<CONSTANT>COPYRIGHT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'copyright'</STRING>
	<CONSTANT>SOURCE_DATA</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'source_data'</STRING>
	
	<COMMENT>#---array---</COMMENT>
	<CONSTANT>FLOAT_ARRAY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'float_array'</STRING>
	<CONSTANT>NAME_ARRAY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'Name_array'</STRING>
	<CONSTANT>BOOL_ARRAY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'bool_array'</STRING>
	<CONSTANT>INT_ARRAY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'int_array'</STRING>
	<CONSTANT>IDREF_ARRAY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'IDREF_array'</STRING>
	
	<COMMENT>#---node---</COMMENT>
	<CONSTANT>NODE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'node'</STRING>
	<CONSTANT>TYPE_JOINT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'JOINT'</STRING>
	<CONSTANT>TYPE_NODE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'NODE'</STRING>
	<CONSTANT>LAYER</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'layer'</STRING>
	
	<COMMENT>#---transforms---</COMMENT>
	<CONSTANT>TRANSLATE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'translate'</STRING>
	<CONSTANT>ROTATE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'rotate'</STRING>
	<CONSTANT>SCALE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'scale'</STRING>
	<CONSTANT>SKEW</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'skew'</STRING>
	<CONSTANT>MATRIX</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'matrix'</STRING>
	<CONSTANT>LOOKAT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'lookat'</STRING>
	
	<COMMENT>#---instances---</COMMENT>
	<CONSTANT>INSTANCE_ANIMATION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_animation'</STRING>
	<CONSTANT>INSTANCE_CAMERA</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_camera'</STRING>
	<CONSTANT>INSTANCE_CONTROLLER</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_controller'</STRING>
	<COMMENT>##INSTANCE_EFFECT = 'instance_effect'</COMMENT>
	<CONSTANT>INSTANCE_GEOMETRY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_geometry'</STRING>
	<CONSTANT>INSTANCE_LIGHT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_light'</STRING>
	<CONSTANT>INSTANCE_NODE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_node'</STRING>
	<CONSTANT>INSTANCE_VISUAL_SCENE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_visual_scene'</STRING>
	<CONSTANT>INSTANCE_PHYSICS_SCENE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_physics_scene'</STRING>
	
	<COMMENT>#---image---</COMMENT>
	<CONSTANT>FORMAT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'format'</STRING>
	<CONSTANT>DEPTH</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'depth'</STRING>
	<CONSTANT>HEIGHT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'height'</STRING>
	<CONSTANT>WIDTH</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'width'</STRING>
	<CONSTANT>INIT_FROM</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'init_from'</STRING>
	
	<COMMENT>#---animation---</COMMENT>
	<CONSTANT>SAMPLER</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'sampler'</STRING>
	<CONSTANT>CHANNEL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'channel'</STRING>

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxBindMaterial</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxBindMaterial, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>BIND_MATERIAL</OO>
		<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxBindMaterial</OBJ>.<OO>DaeFxTechniqueCommon</OO>() 	   
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>, <OBJ>DaeFxBindMaterial</OBJ>.<OO>DaeFxTechniqueCommon</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxBindMaterial,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>techniqueCommon</OO>)
		<KEYWORD>return</KEYWORD> node
		
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxTechniqueCommon</USER_FUNCTION>(DaeEntity):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>): 		   
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>
			<TYPE>self</TYPE>.<OO>iMaterials</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<TYPE>self</TYPE>.<OO>iMaterials</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>INSTANCE_MATERIAL</OO>, DaeFxMaterialInstance)
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeFxBindMaterial</OBJ>.<OO>DaeFxTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iMaterials</OO>)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeFxBindMaterial</OBJ>.<OO>DaeFxTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()

		
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxMaterialInstance</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxMaterialInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>target</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>symbol</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>INSTANCE_MATERIAL</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>target</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>TARGET</OO>)<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC>:<OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>symbol</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>SYMBOL</OO>)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>materialsLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>target</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxMaterialInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeFxSyntax</OBJ>.<OO>TARGET</OO>, StripString(<STRING>'#'</STRING><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<FUNCTION>object</FUNCTION>.<FUNCTION>id</FUNCTION>))
		SetAttribute(node, <OBJ>DaeFxSyntax</OBJ>.<OO>SYMBOL</OO>, StripString(<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION>.<FUNCTION>id</FUNCTION>))
		<KEYWORD>return</KEYWORD> node

	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeFxMaterialInstance,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' target: %s, symbol: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>target</OO>, <TYPE>self</TYPE>.<OO>symbol</OO>)
		
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxMaterial</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxMaterial, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>iEffects</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>MATERIAL</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeFxMaterial, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>ASSET</OO>, DaeAsset)
		<TYPE>self</TYPE>.<OO>iEffects</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument,xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>INSTANCE_EFFECT</OO>, DaeFxEffectInstance)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxMaterial,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT># Add the assets</COMMENT>
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>asset</OO>)
		<COMMENT># Add the effect instances</COMMENT>
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iEffects</OO>)
		<COMMENT># Add the extra's</COMMENT>
		AppendChilds(<TYPE>self</TYPE>,node,<TYPE>self</TYPE>.<OO>extras</OO>)
		<KEYWORD>return</KEYWORD> node
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeFxMaterial,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' assets: %s, iEffects: %s, extras: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>asset</OO>, <TYPE>self</TYPE>.<OO>iEffects</OO>, <TYPE>self</TYPE>.<OO>extras</OO>)

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxEffectInstance</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxEffectInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>url</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>INSTANCE_EFFECT</OO>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>url</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>URL</OO>)<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC>:<OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>effectsLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxEffectInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeFxSyntax</OBJ>.<OO>URL</OO>, StripString(<STRING>'#'</STRING><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<FUNCTION>object</FUNCTION>.<FUNCTION>id</FUNCTION>))
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxEffect</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxEffect, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>profileCommon</OO> <OPERATOR>=</OPERATOR> DaeFxProfileCommon()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>EFFECT</OO>
		
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeFxEffect, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>profileCommon</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>PROFILE_COMMON</OO>, DaeFxProfileCommon)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxEffect,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>profileCommon</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeFxEffect, <TYPE>self</TYPE>).<OO>__str__</OO>() <OPERATOR>+</OPERATOR> <STRING>', profileCommon: %s'</STRING> <OPERATOR>%</OPERATOR> (<TYPE>self</TYPE>.<OO>profileCommon</OO>)
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>AddShader</USER_FUNCTION>(<TYPE>self</TYPE>, daeShader):
		<TYPE>self</TYPE>.<OBJ>profileCommon</OBJ>.<OBJ>technique</OBJ>.<OO>shader</OO> <OPERATOR>=</OPERATOR> daeShader
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxProfileCommon</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxProfileCommon, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>technique</OO> <OPERATOR>=</OPERATOR> DaeFxTechnique()
		<TYPE>self</TYPE>.<OO>images</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>newParams</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>PROFILE_COMMON</OO>
		
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>images</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>IMAGE</OO>, DaeFxImage)
		<TYPE>self</TYPE>.<OO>newParams</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>NEWPARAM</OO>, DaeFxNewParam)
		<TYPE>self</TYPE>.<OO>technique</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>TECHNIQUE</OO>, DaeFxTechnique)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxProfileCommon,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>images</OO>)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>newParams</OO>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>technique</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeFxProfileCommon, <TYPE>self</TYPE>).<OO>__str__</OO>() <OPERATOR>+</OPERATOR> <STRING>', technique: %s, images: %s, newParams: %s'</STRING> <OPERATOR>%</OPERATOR> (<TYPE>self</TYPE>.<OO>technique</OO>, <TYPE>self</TYPE>.<OO>images</OO>, <TYPE>self</TYPE>.<OO>newParams</OO>)

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxImage</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxImage, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>IMAGE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeFxImage, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxImage,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxNewParam</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxNewParam, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>NEWPARAM</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeFxNewParam, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxNewParam,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxTechnique</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxTechnique, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>TECHNIQUE</OO>
		<TYPE>self</TYPE>.<OO>shader</OO> <OPERATOR>=</OPERATOR> DaeFxShadeConstant()
		<TYPE>self</TYPE>.<OO>sid</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<COMMENT># TODO:  Collada API: add asset and extra?</COMMENT>
		<TYPE>self</TYPE>.<OO>sid</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>SID</OO>)
		lightSourceNode <OPERATOR>=</OPERATOR> FindElementByTagName(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>CONSTANT</OO>)
		<KEYWORD>if</KEYWORD> lightSourceNode:
			<TYPE>self</TYPE>.<OO>shader</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>CONSTANT</OO>, DaeFxShadeConstant)			 
		<KEYWORD>else</KEYWORD>:
			lightSourceNode <OPERATOR>=</OPERATOR> FindElementByTagName(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>LAMBERT</OO>)
			<KEYWORD>if</KEYWORD> lightSourceNode:
				<TYPE>self</TYPE>.<OO>shader</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>LAMBERT</OO>, DaeFxShadeLambert)
			<KEYWORD>else</KEYWORD>:
				lightSourceNode <OPERATOR>=</OPERATOR> FindElementByTagName(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>BLINN</OO>)
				<KEYWORD>if</KEYWORD> lightSourceNode:
					<TYPE>self</TYPE>.<OO>shader</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>BLINN</OO>, DaeFxShadeBlinn)
				<KEYWORD>else</KEYWORD>:
					lightSourceNode <OPERATOR>=</OPERATOR> FindElementByTagName(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>PHONG</OO>)
					<TYPE>self</TYPE>.<OO>shader</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>PHONG</OO>, DaeFxShadePhong)
		
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxTechnique,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<OBJ>node</OBJ>.<OO>setAttribute</OO>(<OBJ>DaeFxSyntax</OBJ>.<OO>SID</OO>, <TYPE>self</TYPE>.<OO>sid</OO>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>shader</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaeFxTechnique,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' shader: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>shader</OO>)


<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxShadeConstant</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxShadeConstant, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>emission</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>reflective</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>reflectivity</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>transparent</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>transparency</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>indexOfRefraction</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>CONSTANT</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>emission</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>EMISSION</OO>, DaeFxCommonColorAndTextureContainer, <TYPE>True</TYPE>)
		<TYPE>self</TYPE>.<OO>reflective</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>REFLECTIVE</OO>, DaeFxCommonColorAndTextureContainer, <TYPE>True</TYPE>)
		<TYPE>self</TYPE>.<OO>reflectivity</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>REFLECTIVITY</OO>, DaeFxCommonFloatAndParamContainer, <TYPE>True</TYPE>)
		<TYPE>self</TYPE>.<OO>transparent</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>TRANSPARENT</OO>, DaeFxCommonColorAndTextureContainer, <TYPE>True</TYPE>)
		<TYPE>self</TYPE>.<OO>transparency</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>TRANSPARENCY</OO>, DaeFxCommonFloatAndParamContainer, <TYPE>True</TYPE>)
		<TYPE>self</TYPE>.<OO>indexOfRefraction</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>INDEXOFREFRACTION</OO>, DaeFxCommonFloatAndParamContainer, <TYPE>True</TYPE>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxShadeConstant,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>emission</OO>)
		<KEYWORD>if</KEYWORD> <FUNCTION>isinstance</FUNCTION>(<TYPE>self</TYPE>, DaeFxShadeLambert):
			AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>ambient</OO>)
			AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>diffuse</OO>)
			<KEYWORD>if</KEYWORD> <FUNCTION>isinstance</FUNCTION>(<TYPE>self</TYPE>,DaeFxShadeBlinn):
				AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>specular</OO>)
				AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>shininess</OO>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>reflective</OO>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>reflectivity</OO>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>transparent</OO>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>transparency</OO>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>indexOfRefraction</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>AddValue</USER_FUNCTION>(<TYPE>self</TYPE>, <FUNCTION>type</FUNCTION>, val):
		col <OPERATOR>=</OPERATOR> DaeFxColor()
		<OBJ>col</OBJ>.<OO>rgba</OO> <OPERATOR>=</OPERATOR> val
		<KEYWORD>if</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>EMISSION</OO>:
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> <TYPE>self</TYPE>.<OO>emission</OO>:
				<TYPE>self</TYPE>.<OO>emission</OO> <OPERATOR>=</OPERATOR> DaeFxCommonColorAndTextureContainer(<FUNCTION>type</FUNCTION>)
			<TYPE>self</TYPE>.<OBJ>emission</OBJ>.<OO>color</OO> <OPERATOR>=</OPERATOR> col
		<KEYWORD>elif</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>REFLECTIVE</OO>:
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> <TYPE>self</TYPE>.<OO>reflective</OO>:
				<TYPE>self</TYPE>.<OO>reflective</OO> <OPERATOR>=</OPERATOR> DaeFxCommonColorAndTextureContainer(<FUNCTION>type</FUNCTION>)
			<TYPE>self</TYPE>.<OBJ>reflective</OBJ>.<OO>color</OO> <OPERATOR>=</OPERATOR> col
		<KEYWORD>elif</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>REFLECTIVITY</OO>:
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> <TYPE>self</TYPE>.<OO>reflectivity</OO>:
				<TYPE>self</TYPE>.<OO>reflectivity</OO> <OPERATOR>=</OPERATOR> DaeFxCommonFloatAndParamContainer(<FUNCTION>type</FUNCTION>)
			<TYPE>self</TYPE>.<OBJ>reflectivity</OBJ>.<TYPE>float</TYPE> <OPERATOR>=</OPERATOR> val
		<KEYWORD>elif</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>TRANSPARENT</OO>:
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> <TYPE>self</TYPE>.<OO>transparent</OO>:
				<TYPE>self</TYPE>.<OO>transparent</OO> <OPERATOR>=</OPERATOR> DaeFxCommonColorAndTextureContainer(<FUNCTION>type</FUNCTION>)
			<TYPE>self</TYPE>.<OBJ>transparent</OBJ>.<OO>color</OO> <OPERATOR>=</OPERATOR> col
		<KEYWORD>elif</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>TRANSPARENCY</OO>:
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> <TYPE>self</TYPE>.<OO>transparency</OO>:
				<TYPE>self</TYPE>.<OO>transparency</OO> <OPERATOR>=</OPERATOR> DaeFxCommonFloatAndParamContainer(<FUNCTION>type</FUNCTION>)
			<TYPE>self</TYPE>.<OBJ>transparency</OBJ>.<TYPE>float</TYPE> <OPERATOR>=</OPERATOR> val
		<KEYWORD>elif</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>INDEXOFREFRACTION</OO>:
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> <TYPE>self</TYPE>.<OO>indexOfRefraction</OO>:
				<TYPE>self</TYPE>.<OO>indexOfRefraction</OO> <OPERATOR>=</OPERATOR> DaeFxCommonFloatAndParamContainer(<FUNCTION>type</FUNCTION>)
			<TYPE>self</TYPE>.<OBJ>indexOfRefraction</OBJ>.<TYPE>float</TYPE> <OPERATOR>=</OPERATOR> val
		<KEYWORD>else</KEYWORD>:
			<OBJ>Debug</OBJ>.<OO>Debug</OO>(<STRING>'DaeFxShadeConstant: type: %s not recognised'</STRING><OPERATOR>%</OPERATOR>(<FUNCTION>type</FUNCTION>),<STRING>'ERROR'</STRING>)

		
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxShadeLambert</USER_FUNCTION>(DaeFxShadeConstant):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxShadeLambert, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>ambient</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>diffuse</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>LAMBERT</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeFxShadeLambert, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>ambient</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>AMBIENT</OO>, DaeFxCommonColorAndTextureContainer, <TYPE>True</TYPE>)
		<TYPE>self</TYPE>.<OO>diffuse</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>DIFFUSE</OO>, DaeFxCommonColorAndTextureContainer, <TYPE>True</TYPE>)
		
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxShadeLambert,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT>#AppendChild(daeDocument, node, self.ambient)</COMMENT>
		<COMMENT>#AppendChild(daeDocument, node, self.diffuse)</COMMENT>
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>AddValue</USER_FUNCTION>(<TYPE>self</TYPE>, <FUNCTION>type</FUNCTION>, val):
		col <OPERATOR>=</OPERATOR> DaeFxColor()
		<OBJ>col</OBJ>.<OO>rgba</OO> <OPERATOR>=</OPERATOR> val
		<KEYWORD>if</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>DIFFUSE</OO>:
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> <TYPE>self</TYPE>.<OO>diffuse</OO>:
				<TYPE>self</TYPE>.<OO>diffuse</OO> <OPERATOR>=</OPERATOR> DaeFxCommonColorAndTextureContainer(<FUNCTION>type</FUNCTION>)
			<KEYWORD>if</KEYWORD> <FUNCTION>isinstance</FUNCTION>(val, DaeFxTexture): <COMMENT># its a texture</COMMENT>
				<TYPE>self</TYPE>.<OBJ>diffuse</OBJ>.<OO>texture</OO> <OPERATOR>=</OPERATOR> val
			<KEYWORD>else</KEYWORD>: <COMMENT># it's a color</COMMENT>
				<TYPE>self</TYPE>.<OBJ>diffuse</OBJ>.<OO>color</OO> <OPERATOR>=</OPERATOR> col
		<KEYWORD>elif</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>AMBIENT</OO>:
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> <TYPE>self</TYPE>.<OO>ambient</OO>:
				<TYPE>self</TYPE>.<OO>ambient</OO> <OPERATOR>=</OPERATOR> DaeFxCommonColorAndTextureContainer(<FUNCTION>type</FUNCTION>)
			<TYPE>self</TYPE>.<OBJ>ambient</OBJ>.<OO>color</OO> <OPERATOR>=</OPERATOR> col
		<KEYWORD>else</KEYWORD>:
			<FUNCTION>super</FUNCTION>(DaeFxShadeLambert,<TYPE>self</TYPE>).<OO>AddValue</OO>(<FUNCTION>type</FUNCTION>, val)
			
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxShadeBlinn</USER_FUNCTION>(DaeFxShadeLambert):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxShadeBlinn, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>specular</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>shininess</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>BLINN</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeFxShadeBlinn, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>specular</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>SPECULAR</OO>, DaeFxCommonColorAndTextureContainer, <TYPE>True</TYPE>)
		<TYPE>self</TYPE>.<OO>shininess</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>SHININESS</OO>, DaeFxCommonFloatAndParamContainer, <TYPE>True</TYPE>)
		
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxShadeBlinn,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT>#AppendChild(daeDocument, node, self.specular)</COMMENT>
		<COMMENT>#AppendChild(daeDocument, node, self.shininess)</COMMENT>
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>AddValue</USER_FUNCTION>(<TYPE>self</TYPE>, <FUNCTION>type</FUNCTION>, val):
		col <OPERATOR>=</OPERATOR> DaeFxColor()
		<OBJ>col</OBJ>.<OO>rgba</OO> <OPERATOR>=</OPERATOR> val
		<KEYWORD>if</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>SPECULAR</OO>:
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> <TYPE>self</TYPE>.<OO>specular</OO>:
				<TYPE>self</TYPE>.<OO>specular</OO> <OPERATOR>=</OPERATOR> DaeFxCommonColorAndTextureContainer(<FUNCTION>type</FUNCTION>)
			<TYPE>self</TYPE>.<OBJ>specular</OBJ>.<OO>color</OO> <OPERATOR>=</OPERATOR> col
		<KEYWORD>elif</KEYWORD> <FUNCTION>type</FUNCTION> <OPERATOR>==</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>SHININESS</OO>:
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> <TYPE>self</TYPE>.<OO>shininess</OO>:
				<TYPE>self</TYPE>.<OO>shininess</OO> <OPERATOR>=</OPERATOR> DaeFxCommonFloatAndParamContainer(<FUNCTION>type</FUNCTION>)
			<TYPE>self</TYPE>.<OBJ>shininess</OBJ>.<TYPE>float</TYPE> <OPERATOR>=</OPERATOR> val
		<KEYWORD>else</KEYWORD>:
			<FUNCTION>super</FUNCTION>(DaeFxShadeBlinn,<TYPE>self</TYPE>).<OO>AddValue</OO>(<FUNCTION>type</FUNCTION>, val)
			
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxShadePhong</USER_FUNCTION>(DaeFxShadeBlinn):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxShadePhong, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>PHONG</OO>
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxCommonColorAndTextureContainer</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>, syntax<OPERATOR>=</OPERATOR><STRING>'UNKNOWN'</STRING>):
		<FUNCTION>super</FUNCTION>(DaeFxCommonColorAndTextureContainer, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>color</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>texture</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> syntax
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>color</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>COLOR</OO>, DaeFxColor)
		<TYPE>self</TYPE>.<OO>texture</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>TEXTURE</OO>, DaeFxTexture)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxCommonColorAndTextureContainer,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>color</OO>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>texture</OO>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxCommonFloatAndParamContainer</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>, syntax <OPERATOR>=</OPERATOR> <STRING>'UNKNOWN'</STRING>):
		<FUNCTION>super</FUNCTION>(DaeFxCommonFloatAndParamContainer, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<TYPE>float</TYPE> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>param</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> syntax
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<TYPE>float</TYPE> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>FLOAT</OO>, <TYPE>float</TYPE>)
		<COMMENT>##self.param = CreateObjectFromXml(daeDocument, xmlNode, DaeFxSyntax.PARAM, DaeFxParam)</COMMENT>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxCommonFloatAndParamContainer,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendTextChild(node, <OBJ>DaeFxSyntax</OBJ>.<OO>FLOAT</OO>, <TYPE>self</TYPE>.<TYPE>float</TYPE>)
		AppendChild(daeDocument, node, <TYPE>self</TYPE>.<OO>param</OO>)
		<KEYWORD>return</KEYWORD> node

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxColor</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxColor, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>sid</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>rgba</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>COLOR</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>sid</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>SID</OO>)
		<TYPE>self</TYPE>.<OO>rgba</OO> <OPERATOR>=</OPERATOR> ToFloatList(ReadContents(xmlNode))
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxColor,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeFxSyntax</OBJ>.<OO>SID</OO>, <TYPE>self</TYPE>.<OO>sid</OO>)
		AppendTextInChild(node, <TYPE>self</TYPE>.<OO>rgba</OO>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxTexture</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeFxTexture, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>texture</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>textCoord</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeFxSyntax</OBJ>.<OO>TEXTURE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>texture</OO> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>imagesLibrary</OBJ>.<OO>FindObject</OO>(ReadAttribute(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>TEXTURE</OO>))
		<TYPE>self</TYPE>.<OO>textCoord</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeFxSyntax</OBJ>.<OO>TEXCOORD</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeFxTexture,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeFxSyntax</OBJ>.<OO>TEXTURE</OO>, StripString(<TYPE>self</TYPE>.<OO>texture</OO>))
		SetAttribute(node, <OBJ>DaeFxSyntax</OBJ>.<OO>TEXCOORD</OO>, <TYPE>self</TYPE>.<OO>textCoord</OO>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeFxSyntax</USER_FUNCTION>(<FUNCTION>object</FUNCTION>):
	<CONSTANT>COLOR</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'color'</STRING>  
	<CONSTANT>INSTANCE_MATERIAL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_material'</STRING>
	<CONSTANT>INSTANCE_EFFECT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_effect'</STRING>
	<CONSTANT>TECHNIQUE_COMMON</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'technique_common'</STRING>
	<CONSTANT>SID</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'sid'</STRING>
	<CONSTANT>EMISSION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'emission'</STRING>
	<CONSTANT>REFLECTIVE</CONSTANT> <OPERATOR>=</OPERATOR><STRING>'reflective'</STRING>
	<CONSTANT>REFLECTIVITY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'reflectivity'</STRING>	 
	<CONSTANT>TRANSPARENT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'transparent'</STRING>
	<CONSTANT>TRANSPARENCY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'transparency'</STRING>
	<CONSTANT>INDEXOFREFRACTION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'index_of_refraction'</STRING>
	<CONSTANT>TEXTURE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'texture'</STRING>
	<CONSTANT>TEXCOORD</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'texcoord'</STRING>
	<CONSTANT>AMBIENT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'ambient'</STRING>
	<CONSTANT>DIFFUSE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'diffuse'</STRING>    
	
	<CONSTANT>BIND_MATERIAL</CONSTANT> <OPERATOR>=</OPERATOR><STRING>'bind_material'</STRING>
	<CONSTANT>PROFILE_COMMON</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'profile_COMMON'</STRING>
	<CONSTANT>SYMBOL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'symbol'</STRING>
	<CONSTANT>MATERIAL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'material'</STRING>
	<CONSTANT>EFFECT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'effect'</STRING>
	
	<CONSTANT>TARGET</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'target'</STRING>
	<CONSTANT>URL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'url'</STRING>
	<CONSTANT>SYMBOL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'symbol'</STRING>
	
	<CONSTANT>BLINN</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'blinn'</STRING>
	<CONSTANT>SHININESS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'shininess'</STRING>
	<CONSTANT>SPECULAR</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'specular'</STRING>
	<CONSTANT>PHONG</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'phong'</STRING>
	
	<CONSTANT>IMAGE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'image'</STRING>
	<CONSTANT>NEWPARAM</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'newparam'</STRING>
	<CONSTANT>TECHNIQUE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'technique'</STRING>
	
	<CONSTANT>CONSTANT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'constant'</STRING>
	<CONSTANT>LAMBERT</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'lambert'</STRING>
	
	<CONSTANT>FLOAT</CONSTANT> <OPERATOR>=</OPERATOR><STRING>'float'</STRING>
<COMMENT>#---COLLADA PHYSICS---</COMMENT>
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePhysicsScene</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaePhysicsScene,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>iPhysicsModels</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>PHYSICS_SCENE</OO>	   
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaePhysicsScene, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>extras</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>EXTRA</OO>, DaeExtra)
		<TYPE>self</TYPE>.<OO>asset</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>ASSET</OO>, DaeAsset)
		<TYPE>self</TYPE>.<OO>iPhysicsModels</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>INSTANCE_PHYSICS_MODEL</OO>, DaePhysicsModelInstance)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaePhysicsScene, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT># Add the assets</COMMENT>
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>asset</OO>)
		<COMMENT># Add the phyics models</COMMENT>
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iPhysicsModels</OO>)
		<COMMENT># Add the extra's</COMMENT>
		AppendChilds(<TYPE>self</TYPE>,node,<TYPE>self</TYPE>.<OO>extras</OO>)
		<KEYWORD>return</KEYWORD> node
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(DaePhysicsScene,<TYPE>self</TYPE>).<OO>__str__</OO>()<OPERATOR>+</OPERATOR><STRING>' asset: %s, iPhysicsModels: %s, extras: %s'</STRING><OPERATOR>%</OPERATOR>(<TYPE>self</TYPE>.<OO>asset</OO>, <TYPE>self</TYPE>.<OO>iPhysicsModels</OO>, <TYPE>self</TYPE>.<OO>extras</OO>)
 
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePhysicsModelInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaePhysicsModelInstance, <TYPE>self</TYPE>).<OO>__init__</OO>() 	   
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>INSTANCE_PHYSICS_MODEL</OO>
		<TYPE>self</TYPE>.<OO>iRigidBodies</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaePhysicsModelInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>physicsModelsLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		<TYPE>self</TYPE>.<OO>iRigidBodies</OO> <OPERATOR>=</OPERATOR> <TYPE>self</TYPE>.<OO>CreateInstanceRigidBodies</OO>(daeDocument, xmlNode, <TYPE>self</TYPE>.<FUNCTION>object</FUNCTION>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaePhysicsModelInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>iRigidBodies</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>CreateInstanceRigidBodies</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode, physicsModel):
		objects <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>INSTANCE_RIGID_BODY</OO>, DaeRigidBodyInstance)
		nodes <OPERATOR>=</OPERATOR> FindElementsByTagName(xmlNode,<OBJ>DaePhysicsSyntax</OBJ>.<OO>INSTANCE_RIGID_BODY</OO>)
		<KEYWORD>for</KEYWORD> node <OPERATOR>in</OPERATOR> nodes:
			<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> DaeRigidBodyInstance()
			<FUNCTION>object</FUNCTION>.<OO>LoadFromXml</OO>(daeDocument, node)
			<FUNCTION>object</FUNCTION>.<OO>body</OO> <OPERATOR>=</OPERATOR> <OBJ>physicsModel</OBJ>.<OO>FindRigidBody</OO>(<FUNCTION>object</FUNCTION>.<OO>bodyString</OO>)
			n <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<KEYWORD>for</KEYWORD> visualScene <OPERATOR>in</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>visualScenesLibrary</OBJ>.<OO>items</OO>:
				n <OPERATOR>=</OPERATOR> <OBJ>visualScene</OBJ>.<OO>FindNode</OO>(<FUNCTION>object</FUNCTION>.<OO>targetString</OO>)
				<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> (n <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>):
					<KEYWORD>break</KEYWORD>
			<FUNCTION>object</FUNCTION>.<OO>target</OO> <OPERATOR>=</OPERATOR> n
			<OBJ>objects</OBJ>.<OO>append</OO>(<FUNCTION>object</FUNCTION>)
		<KEYWORD>return</KEYWORD> objects
		
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePhysicsSceneInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaePhysicsSceneInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_PHYSICS_SCENE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaePhysicsSceneInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>physicsScenesLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaePhysicsSceneInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePhysicsMaterialInstance</USER_FUNCTION>(DaeInstance):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaePhysicsMaterialInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()		  
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>INSTANCE_PHYSICS_MATERIAL</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):		
		<FUNCTION>super</FUNCTION>(DaePhysicsMaterialInstance,<TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <OBJ>daeDocument</OBJ>.<OBJ>physicsMaterialsLibrary</OBJ>.<OO>FindObject</OO>(<TYPE>self</TYPE>.<OO>url</OO>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaePhysicsMaterialInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeRigidBodyInstance</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeRigidBodyInstance, <TYPE>self</TYPE>).<OO>__init__</OO>()		
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>INSTANCE_RIGID_BODY</OO>
		<TYPE>self</TYPE>.<OO>body</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>target</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>bodyString</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>targetString</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):		
		<TYPE>self</TYPE>.<OO>bodyString</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>BODY</OO>)
		<TYPE>self</TYPE>.<OO>targetString</OO> <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TARGET</OO>)<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC>:<OPERATOR>]</OPERATOR>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeRigidBodyInstance,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>BODY</OO>, <TYPE>self</TYPE>.<OBJ>body</OBJ>.<OO>sid</OO>)
		SetAttribute(node, <OBJ>DaeSyntax</OBJ>.<OO>TARGET</OO>, StripString(<STRING>'#'</STRING><OPERATOR>+</OPERATOR><TYPE>self</TYPE>.<OBJ>target</OBJ>.<FUNCTION>id</FUNCTION>))		 
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePhysicsModel</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaePhysicsModel,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>PHYSICS_MODEL</OO>
		<TYPE>self</TYPE>.<OO>rigidBodies</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaePhysicsModel, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>rigidBodies</OO> <OPERATOR>=</OPERATOR> CreateObjectsFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RIGID_BODY</OO>, DaeRigidBody)		
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaePhysicsModel, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		<COMMENT># Add the rigid bodies</COMMENT>
		AppendChilds(daeDocument, node, <TYPE>self</TYPE>.<OO>rigidBodies</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>FindRigidBody</USER_FUNCTION>(<TYPE>self</TYPE>, url):
		<KEYWORD>for</KEYWORD> rigidBody <OPERATOR>in</OPERATOR> <TYPE>self</TYPE>.<OO>rigidBodies</OO>:
			<KEYWORD>if</KEYWORD> <OBJ>rigidBody</OBJ>.<OO>sid</OO> <OPERATOR>==</OPERATOR> url:
				<KEYWORD>return</KEYWORD> rigidBody
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePhysicsMaterial</USER_FUNCTION>(DaeElement):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaePhysicsMaterial,<TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>PHYSICS_MATERIAL</OO>
		<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsMaterial</OBJ>.<OO>DaeTechniqueCommon</OO>()
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaePhysicsMaterial, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>, <OBJ>DaePhysicsMaterial</OBJ>.<OO>DaeTechniqueCommon</OO>) 	   
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaePhysicsMaterial, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>techniqueCommon</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeTechniqueCommon</USER_FUNCTION>(DaeEntity):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<FUNCTION>super</FUNCTION>(<OBJ>DaePhysicsMaterial</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>__init__</OO>()
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>
			<TYPE>self</TYPE>.<OO>dynamicFriction</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>
			<TYPE>self</TYPE>.<OO>restitution</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>
			<TYPE>self</TYPE>.<OO>staticFriction</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<TYPE>self</TYPE>.<OO>dynamicFriction</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>DYNAMIC_FRICTION</OO>, <TYPE>float</TYPE>, <NUMERIC>0</NUMERIC>)
			<TYPE>self</TYPE>.<OO>restitution</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RESTITUTION</OO>,	<TYPE>float</TYPE>, <NUMERIC>0</NUMERIC>)
			<TYPE>self</TYPE>.<OO>staticFriction</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>STATIC_FRICTION</OO>, <TYPE>float</TYPE>, <NUMERIC>0</NUMERIC>)
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaePhysicsMaterial</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>DYNAMIC_FRICTION</OO>, <TYPE>self</TYPE>.<OO>dynamicFriction</OO>, <TYPE>None</TYPE>)
			AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RESTITUTION</OO>, <TYPE>self</TYPE>.<OO>restitution</OO>, <TYPE>None</TYPE>)
			AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>STATIC_FRICTION</OO>, <TYPE>self</TYPE>.<OO>staticFriction</OO>, <TYPE>None</TYPE>)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaePhysicsMaterial</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeRigidBody</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeRigidBody, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>RIGID_BODY</OO>
		<TYPE>self</TYPE>.<OO>name</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>sid</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING>
		<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeRigidBody</OBJ>.<OO>DaeTechniqueCommon</OO>()
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>name</OO> <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>NAME</OO>)
		<TYPE>self</TYPE>.<OO>sid</OO> <OPERATOR>=</OPERATOR> <OBJ>xmlNode</OBJ>.<OO>getAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>SID</OO>)
		<TYPE>self</TYPE>.<OO>techniqueCommon</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>, <OBJ>DaeRigidBody</OBJ>.<OO>DaeTechniqueCommon</OO>)		 
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeRigidBody, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		SetAttribute(node,<OBJ>DaeSyntax</OBJ>.<OO>NAME</OO>, StripString(<TYPE>self</TYPE>.<OO>name</OO>))
		SetAttribute(node,<OBJ>DaeSyntax</OBJ>.<OO>SID</OO>, StripString(<TYPE>self</TYPE>.<OO>sid</OO>))
		AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>techniqueCommon</OO>)
		<KEYWORD>return</KEYWORD> node
	
	<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeTechniqueCommon</USER_FUNCTION>(DaeEntity):
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<FUNCTION>super</FUNCTION>(<OBJ>DaeRigidBody</OBJ>.<OO>DaeTechniqueCommon</OO>, <TYPE>self</TYPE>).<OO>__init__</OO>()
			<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaeSyntax</OBJ>.<OO>TECHNIQUE_COMMON</OO>
			<TYPE>self</TYPE>.<OO>iPhysicsMaterial</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<TYPE>self</TYPE>.<OO>physicsMaterial</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<TYPE>self</TYPE>.<OO>dynamic</OO> <OPERATOR>=</OPERATOR> <TYPE>True</TYPE> 
			<TYPE>self</TYPE>.<OO>mass</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<TYPE>self</TYPE>.<OO>inertia</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
			<TYPE>self</TYPE>.<OO>shapes</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
			
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
			<TYPE>self</TYPE>.<OO>iPhysicsMaterial</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>INSTANCE_PHYSICS_MATERIAL</OO>, DaePhysicsMaterialInstance)		 
			<TYPE>self</TYPE>.<OO>physicsMaterial</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>PHYSICS_MATERIAL</OO>, DaePhysicsMaterial) 	   
			<TYPE>self</TYPE>.<OO>dynamic</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>DYNAMIC</OO>,bool,<TYPE>True</TYPE>)
			<TYPE>self</TYPE>.<OO>mass</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>MASS</OO>, <TYPE>float</TYPE>, <NUMERIC>1</NUMERIC>)
			<TYPE>self</TYPE>.<OO>inertia</OO> <OPERATOR>=</OPERATOR> ToFloat3(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaePhysicsSyntax</OBJ>.<OO>INERTIA</OO>)))
			
			shapeNodes <OPERATOR>=</OPERATOR> FindElementsByTagName(xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>SHAPE</OO>)
			<KEYWORD>for</KEYWORD> shapeNode <OPERATOR>in</OPERATOR> shapeNodes:
				s <OPERATOR>=</OPERATOR> FindElementByTagName(shapeNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>BOX</OO>)
				b <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
				<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> (s <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>):
					b <OPERATOR>=</OPERATOR> DaeBoxShape()
				<KEYWORD>else</KEYWORD>:
					s <OPERATOR>=</OPERATOR> FindElementByTagName(shapeNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>SPHERE</OO>)
					<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> (s <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>):
						b <OPERATOR>=</OPERATOR> DaeSphereShape()
					<KEYWORD>else</KEYWORD>:
						s <OPERATOR>=</OPERATOR> FindElementByTagName(shapeNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>PLANE</OO>)
						<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> (s <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>):
							b <OPERATOR>=</OPERATOR> DaePlaneShape()
						<KEYWORD>else</KEYWORD>:
							s <OPERATOR>=</OPERATOR> FindElementByTagName(shapeNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_GEOMETRY</OO>)
							<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> (s <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>):
								b <OPERATOR>=</OPERATOR> DaeGeometryShape()
							<KEYWORD>else</KEYWORD>:
								s <OPERATOR>=</OPERATOR> FindElementByTagName(shapeNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>CYLINDER</OO>)
								<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> (s <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>):
									b <OPERATOR>=</OPERATOR> DaeCylinderShape()
								<KEYWORD>else</KEYWORD>:
									s <OPERATOR>=</OPERATOR> FindElementByTagName(shapeNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>TAPERED_CYLINDER</OO>)
									<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> (s <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>):
										b <OPERATOR>=</OPERATOR> DaeTaperedCylinderShape()
									<KEYWORD>else</KEYWORD>:
										s <OPERATOR>=</OPERATOR> FindElementByTagName(shapeNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>CAPSULE</OO>)
										<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> (s <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>):
											b <OPERATOR>=</OPERATOR> DaeCapsule()
										<KEYWORD>else</KEYWORD>: <COMMENT># TAPERED_CAPSULE</COMMENT>
											b <OPERATOR>=</OPERATOR> DaeTaperedCapsuleShape()
				<OBJ>b</OBJ>.<OO>LoadFromXml</OO>(daeDocument, s)
				<TYPE>self</TYPE>.<OBJ>shapes</OBJ>.<OO>append</OO>(b)
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
			node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(<OBJ>DaeRigidBody</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
			AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>iPhysicsMaterial</OO>)
			AppendChild(daeDocument,node,<TYPE>self</TYPE>.<OO>physicsMaterial</OO>)
			shapes <OPERATOR>=</OPERATOR> Element(<OBJ>DaePhysicsSyntax</OBJ>.<OO>SHAPE</OO>)
			AppendChilds(daeDocument, shapes, <TYPE>self</TYPE>.<OO>shapes</OO>)
			<OBJ>node</OBJ>.<OO>appendChild</OO>(shapes)
			AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>DYNAMIC</OO>, <TYPE>self</TYPE>.<OO>dynamic</OO>, <TYPE>None</TYPE>)
			AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>MASS</OO>, <TYPE>self</TYPE>.<OO>mass</OO>, <TYPE>None</TYPE>)
			AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>INERTIA</OO>, <TYPE>self</TYPE>.<OO>inertia</OO>, <TYPE>None</TYPE>)
			<KEYWORD>return</KEYWORD> node
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>GetPhysicsMaterial</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>if</KEYWORD> <OPERATOR>not</OPERATOR> (<TYPE>self</TYPE>.<OO>physicsMaterial</OO> <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>):
				<KEYWORD>return</KEYWORD> <TYPE>self</TYPE>.<OO>physicsMaterial</OO>
			<KEYWORD>else</KEYWORD>:
				<KEYWORD>return</KEYWORD> <TYPE>self</TYPE>.<OBJ>iPhysicsMaterial</OBJ>.<FUNCTION>object</FUNCTION>
		
		<KEYWORD>def</KEYWORD> <USER_FUNCTION>__str__</USER_FUNCTION>(<TYPE>self</TYPE>):
			<KEYWORD>return</KEYWORD> <FUNCTION>super</FUNCTION>(<OBJ>DaeRigidBody</OBJ>.<OO>DaeTechniqueCommon</OO>,<TYPE>self</TYPE>).<OO>__str__</OO>()
		
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeShape</USER_FUNCTION>(DaeEntity):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeShape, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>mass</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>density</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>SHAPE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<TYPE>self</TYPE>.<OO>iGeometry</OO> <OPERATOR>=</OPERATOR> CreateObjectFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>INSTANCE_GEOMETRY</OO>,DaeGeometryInstance)
		<TYPE>self</TYPE>.<OO>mass</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>MASS</OO>, <TYPE>float</TYPE>, <TYPE>None</TYPE>)
		<TYPE>self</TYPE>.<OO>density</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>DENSITY</OO>, <TYPE>float</TYPE>, <TYPE>None</TYPE>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeShape, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>MASS</OO>, <TYPE>self</TYPE>.<OO>mass</OO>, <TYPE>None</TYPE>)
		AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>DENSITY</OO>, <TYPE>self</TYPE>.<OO>density</OO>, <TYPE>None</TYPE>)
		<KEYWORD>return</KEYWORD> node

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeBoxShape</USER_FUNCTION>(DaeShape):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeBoxShape, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>halfExtents</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>BOX</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeBoxShape, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>halfExtents</OO> <OPERATOR>=</OPERATOR> ToFloat3(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaePhysicsSyntax</OBJ>.<OO>HALF_EXTENTS</OO>)))
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeBoxShape, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>HALF_EXTENTS</OO>, <TYPE>self</TYPE>.<OO>halfExtents</OO>)
		<KEYWORD>return</KEYWORD> node

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeSphereShape</USER_FUNCTION>(DaeShape):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeSphereShape, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>radius</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>SPHERE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeSphereShape, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>radius</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RADIUS</OO>, <TYPE>float</TYPE>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeSphereShape, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RADIUS</OO>, <TYPE>self</TYPE>.<OO>radius</OO>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeCylinderShape</USER_FUNCTION>(DaeShape):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeCylinderShape, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>radius</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC> , <NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>height</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>CYLINDER</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeCylinderShape, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>radius</OO> <OPERATOR>=</OPERATOR> ToFloat2(ReadContents(FindElementByTagName(xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RADIUS</OO>)),<STRING>'Not a valid radius found. Must consist of 2 floats'</STRING>)
		<TYPE>self</TYPE>.<OO>height</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>HEIGHT</OO>, <TYPE>float</TYPE>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeCylinderShape, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RADIUS</OO>, <TYPE>self</TYPE>.<OO>radius</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>HEIGHT</OO>, <TYPE>self</TYPE>.<OO>height</OO>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeTaperedCylinderShape</USER_FUNCTION>(DaeShape):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeTaperedCylinderShape, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>radius1</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC> , <NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>radius2</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC> , <NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>height</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>TAPERED_CYLINDER</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeTaperedCylinderShape, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>radius1</OO> <OPERATOR>=</OPERATOR> ToFloat2(ReadContents(FindElementByTagName(xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RADIUS1</OO>)),<STRING>'Not a valid radius found. Must consist of 2 floats'</STRING>)
		<TYPE>self</TYPE>.<OO>radius2</OO> <OPERATOR>=</OPERATOR> ToFloat2(ReadContents(FindElementByTagName(xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RADIUS2</OO>)), <STRING>'Not a valid radius found. Must consist of 2 floats'</STRING>)
		<TYPE>self</TYPE>.<OO>height</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>HEIGHT</OO>, <TYPE>float</TYPE>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeTaperedCylinderShape, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RADIUS1</OO>, <TYPE>self</TYPE>.<OO>radius1</OO>)
		AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RADIUS2</OO>, <TYPE>self</TYPE>.<OO>radius2</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>HEIGHT</OO>, <TYPE>self</TYPE>.<OO>height</OO>)
		<KEYWORD>return</KEYWORD> node
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePlaneShape</USER_FUNCTION>(DaeShape):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaePlaneShape, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>equation</OO> <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>PLANE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaePlaneShape, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>equation</OO> <OPERATOR>=</OPERATOR> ToFloat4(ReadContents(FindElementByTagName(xmlNode,<OBJ>DaePhysicsSyntax</OBJ>.<OO>EQUATION</OO>)))
	
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaePlaneShape, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>EQUATION</OO>, <TYPE>self</TYPE>.<OO>equation</OO>)
		<KEYWORD>return</KEYWORD> node

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeCapsuleShape</USER_FUNCTION>(DaeShape):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeCapsuleShape, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>radius</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>height</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		<TYPE>self</TYPE>.<OO>syntax</OO> <OPERATOR>=</OPERATOR> <OBJ>DaePhysicsSyntax</OBJ>.<OO>CAPSULE</OO>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeCapsuleShape, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>radius</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RADIUS</OO>, <TYPE>float</TYPE>)
		<TYPE>self</TYPE>.<OO>height</OO> <OPERATOR>=</OPERATOR> CastFromXml(daeDocument, xmlNode, <OBJ>DaeSyntax</OBJ>.<OO>HEIGHT</OO>, <TYPE>float</TYPE>)
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		node <OPERATOR>=</OPERATOR> <FUNCTION>super</FUNCTION>(DaeCapsuleShape, <TYPE>self</TYPE>).<OO>SaveToXml</OO>(daeDocument)
		AppendTextChild(node, <OBJ>DaePhysicsSyntax</OBJ>.<OO>RADIUS</OO>, <TYPE>self</TYPE>.<OO>radius</OO>)
		AppendTextChild(node, <OBJ>DaeSyntax</OBJ>.<OO>HEIGHT</OO>, <TYPE>self</TYPE>.<OO>height</OO>)
		<KEYWORD>return</KEYWORD> node

<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaeGeometryShape</USER_FUNCTION>(DaeShape):
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>__init__</USER_FUNCTION>(<TYPE>self</TYPE>):
		<FUNCTION>super</FUNCTION>(DaeGeometryShape, <TYPE>self</TYPE>).<OO>__init__</OO>()
		<TYPE>self</TYPE>.<OO>iGeometry</OO> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>LoadFromXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument, xmlNode):
		<FUNCTION>super</FUNCTION>(DaeGeometryShape, <TYPE>self</TYPE>).<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<TYPE>self</TYPE>.<OO>iGeometry</OO> <OPERATOR>=</OPERATOR> DaeGeometryInstance()
		<TYPE>self</TYPE>.<OBJ>iGeometry</OBJ>.<OO>LoadFromXml</OO>(daeDocument, xmlNode)
		<COMMENT>#self.iGeometry = CreateObjectFromXml(daeDocument, xmlNode, DaeSyntax.INSTANCE_GEOMETRY, DaeGeometryInstance)</COMMENT>
		<COMMENT>#print self.iGeometry</COMMENT>
		<COMMENT>#print xmlNode.toxml()</COMMENT>
		
	<KEYWORD>def</KEYWORD> <USER_FUNCTION>SaveToXml</USER_FUNCTION>(<TYPE>self</TYPE>, daeDocument):
		<COMMENT>#node = super(DaeGeometryShape, self).SaveToXml(daeDocument)</COMMENT>
		<COMMENT>#AppendChild(daeDocument, node, self.iGeometry)</COMMENT>
		<KEYWORD>return</KEYWORD> <TYPE>self</TYPE>.<OBJ>iGeometry</OBJ>.<OO>SaveToXml</OO>(daeDocument)
	
<KEYWORD>class</KEYWORD> <USER_FUNCTION>DaePhysicsSyntax</USER_FUNCTION>(<FUNCTION>object</FUNCTION>):
	<CONSTANT>PHYSICS_SCENE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'physics_scene'</STRING>
	<CONSTANT>PHYSICS_MODEL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'physics_model'</STRING>
	<CONSTANT>PHYSICS_MATERIAL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'physics_material'</STRING>
	
	<CONSTANT>RIGID_BODY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'rigid_body'</STRING>
	
	<CONSTANT>INSTANCE_PHYSICS_MODEL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_physics_model'</STRING>
	<CONSTANT>INSTANCE_PHYSICS_MATERIAL</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_physics_material'</STRING>
	<CONSTANT>INSTANCE_RIGID_BODY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'instance_rigid_body'</STRING>
	
	<CONSTANT>RESTITUTION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'restitution'</STRING>
	<CONSTANT>STATIC_FRICTION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'static_friction'</STRING>
	<CONSTANT>DYNAMIC_FRICTION</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'dynamic_friction'</STRING>
	
	<CONSTANT>DYNAMIC</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'dynamic'</STRING>
	<CONSTANT>MASS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'mass'</STRING>
	<CONSTANT>INERTIA</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'inertia'</STRING>
	<CONSTANT>SHAPE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'shape'</STRING>
	<CONSTANT>DENSITY</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'density'</STRING>
	<CONSTANT>RADIUS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'radius'</STRING>
	<CONSTANT>RADIUS1</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'radius1'</STRING>
	<CONSTANT>RADIUS2</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'radius2'</STRING>
	
	
	<CONSTANT>BOX</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'box'</STRING>
	<CONSTANT>PLANE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'plane'</STRING>
	<CONSTANT>CYLINDER</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'cylinder'</STRING>
	<CONSTANT>SPHERE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'sphere'</STRING>
	<CONSTANT>CAPSULE</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'capsule'</STRING>
	<CONSTANT>TAPERED_CAPSULE</CONSTANT> <OPERATOR>=</OPERATOR><STRING>'tapered_capsule'</STRING>
	<CONSTANT>TAPERED_CYLINDER</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'tapered_cylinder'</STRING>
	
	<CONSTANT>HALF_EXTENTS</CONSTANT> <OPERATOR>=</OPERATOR> <STRING>'half_extents'</STRING>

<COMMENT>#---Functions---</COMMENT>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>CreateObjectsFromXml</USER_FUNCTION>(colladaDocument, xmlNode, nodeType, objectType):
	<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	objects <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>
	nodes <OPERATOR>=</OPERATOR> FindElementsByTagName(xmlNode,nodeType)
	<KEYWORD>for</KEYWORD> node <OPERATOR>in</OPERATOR> nodes:
		<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> objectType()
		<FUNCTION>object</FUNCTION>.<OO>LoadFromXml</OO>(colladaDocument, node)
		<OBJ>objects</OBJ>.<OO>append</OO>(<FUNCTION>object</FUNCTION>)
	<KEYWORD>return</KEYWORD> objects

<KEYWORD>def</KEYWORD> <USER_FUNCTION>CreateObjectFromXml</USER_FUNCTION>(colladaDocument, xmlNode, nodeType, objectType, setSyntax <OPERATOR>=</OPERATOR> <TYPE>False</TYPE>):
	<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	node <OPERATOR>=</OPERATOR> FindElementByTagName(xmlNode, nodeType)   
	<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>
	<KEYWORD>if</KEYWORD> setSyntax:
		<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> objectType(nodeType)
	<KEYWORD>else</KEYWORD>:
		<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> objectType()
	<KEYWORD>if</KEYWORD> node <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
		<FUNCTION>object</FUNCTION>.<OO>LoadFromXml</OO>(colladaDocument, node)
		<KEYWORD>return</KEYWORD> <FUNCTION>object</FUNCTION>
	<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>CastFromXml</USER_FUNCTION>(colladaDocument, xmlNode, nodeType, cast, default<OPERATOR>=</OPERATOR><TYPE>None</TYPE>):
	<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> default
	node <OPERATOR>=</OPERATOR> FindElementByTagName(xmlNode, nodeType)
	<KEYWORD>if</KEYWORD> node <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE>:
		textValue <OPERATOR>=</OPERATOR> ReadContents(node)
		<KEYWORD>if</KEYWORD> cast <OPERATOR>==</OPERATOR> bool:
			<KEYWORD>if</KEYWORD> <OBJ>textValue</OBJ>.<OO>lower</OO>() <OPERATOR>==</OPERATOR> <STRING>'false'</STRING>:
				<KEYWORD>return</KEYWORD> <TYPE>False</TYPE>
			<KEYWORD>else</KEYWORD>:
				<KEYWORD>return</KEYWORD> <TYPE>True</TYPE>
		<KEYWORD>return</KEYWORD> cast(textValue)
	<KEYWORD>return</KEYWORD> default
		
<KEYWORD>def</KEYWORD> <USER_FUNCTION>CastAttributeFromXml</USER_FUNCTION>(xmlNode, nodeType, cast, default<OPERATOR>=</OPERATOR><TYPE>None</TYPE>):
	<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD> default
	val <OPERATOR>=</OPERATOR> ReadAttribute(xmlNode, nodeType)
	<KEYWORD>if</KEYWORD> val <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE> <OPERATOR>and</OPERATOR> val <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <STRING>''</STRING>:
		<KEYWORD>return</KEYWORD> cast(val)
	<KEYWORD>return</KEYWORD> default
	
<KEYWORD>def</KEYWORD> <USER_FUNCTION>AppendChild</USER_FUNCTION>(daeDocument, xmlNode, daeEntity):
	<KEYWORD>if</KEYWORD> daeEntity <OPERATOR>is</OPERATOR> <TYPE>None</TYPE> <OPERATOR>or</OPERATOR> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD>
	<KEYWORD>else</KEYWORD>:
		child <OPERATOR>=</OPERATOR> <OBJ>daeEntity</OBJ>.<OO>SaveToXml</OO>(daeDocument)
		<KEYWORD>if</KEYWORD> child <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
			<KEYWORD>return</KEYWORD>
		<KEYWORD>else</KEYWORD> :
			<OBJ>xmlNode</OBJ>.<OO>appendChild</OO>(child)
		
<KEYWORD>def</KEYWORD> <USER_FUNCTION>AppendChilds</USER_FUNCTION>(daeDocument, xmlNode, daeEntities):
	<KEYWORD>if</KEYWORD> daeEntities <OPERATOR>is</OPERATOR> <TYPE>None</TYPE> <OPERATOR>or</OPERATOR> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD>
	
	<KEYWORD>else</KEYWORD>:
		<KEYWORD>for</KEYWORD> daeEntity <OPERATOR>in</OPERATOR> daeEntities:
			AppendChild(daeDocument, xmlNode, daeEntity)
			
<KEYWORD>def</KEYWORD> <USER_FUNCTION>AppendTextChild</USER_FUNCTION>(xmlNode,syntax, <FUNCTION>object</FUNCTION>, default <OPERATOR>=</OPERATOR> <TYPE>None</TYPE>):
	<KEYWORD>if</KEYWORD> <FUNCTION>object</FUNCTION> <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD>
	<KEYWORD>if</KEYWORD> default <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>None</TYPE> <OPERATOR>and</OPERATOR> <FUNCTION>object</FUNCTION> <OPERATOR>==</OPERATOR> default:
		<KEYWORD>return</KEYWORD>
	node <OPERATOR>=</OPERATOR> Element(syntax)
	<OBJ>xmlNode</OBJ>.<OO>appendChild</OO>(node)
	<KEYWORD>return</KEYWORD> AppendTextInChild(node, <FUNCTION>object</FUNCTION>)

<KEYWORD>def</KEYWORD> <USER_FUNCTION>AppendTextInChild</USER_FUNCTION>(xmlNode, <FUNCTION>object</FUNCTION>):
	<KEYWORD>if</KEYWORD> <FUNCTION>object</FUNCTION> <OPERATOR>is</OPERATOR> <TYPE>None</TYPE>:
		<KEYWORD>return</KEYWORD>
	text <OPERATOR>=</OPERATOR> Text()
	<KEYWORD>if</KEYWORD> <FUNCTION>type</FUNCTION>(<FUNCTION>object</FUNCTION>) <OPERATOR>==</OPERATOR> datetime:
		<OBJ>text</OBJ>.<OO>data</OO> <OPERATOR>=</OPERATOR> <FUNCTION>object</FUNCTION>.<OO>isoformat</OO>()<COMMENT>##ToDateTime(object)</COMMENT>
	<KEYWORD>elif</KEYWORD> <FUNCTION>type</FUNCTION>(<FUNCTION>object</FUNCTION>) <OPERATOR>==</OPERATOR> <TYPE>list</TYPE>:
		<KEYWORD>if</KEYWORD> <FUNCTION>len</FUNCTION>(<FUNCTION>object</FUNCTION>) <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>: <KEYWORD>return</KEYWORD>
		<KEYWORD>if</KEYWORD> <FUNCTION>object</FUNCTION><OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>is</OPERATOR> <OPERATOR>not</OPERATOR> <TYPE>None</TYPE> <OPERATOR>and</OPERATOR> <FUNCTION>type</FUNCTION>(<FUNCTION>object</FUNCTION><OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>) <OPERATOR>==</OPERATOR> <TYPE>float</TYPE>:
			<FUNCTION>object</FUNCTION> <OPERATOR>=</OPERATOR> RoundList(<FUNCTION>object</FUNCTION>, <CONSTANT>ROUND</CONSTANT>)
		<OBJ>text</OBJ>.<OO>data</OO> <OPERATOR>=</OPERATOR> ListToString(<FUNCTION>object</FUNCTION>)
	<KEYWORD>elif</KEYWORD> <FUNCTION>type</FUNCTION>(<FUNCTION>object</FUNCTION>) <OPERATOR>==</OPERATOR> <TYPE>float</TYPE>:
		<OBJ>text</OBJ>.<OO>data</OO> <OPERATOR>=</OPERATOR> <FUNCTION>round</FUNCTION>(<FUNCTION>object</FUNCTION>, <CONSTANT>ROUND</CONSTANT>)
	<KEYWORD>elif</KEYWORD> <FUNCTION>type</FUNCTION>(<FUNCTION>object</FUNCTION>) <OPERATOR>==</OPERATOR> bool:
		<OBJ>text</OBJ>.<OO>data</OO> <OPERATOR>=</OPERATOR> <TYPE>str</TYPE>(<FUNCTION>object</FUNCTION>).<OO>lower</OO>()
	<KEYWORD>else</KEYWORD>:
		<OBJ>text</OBJ>.<OO>data</OO> <OPERATOR>=</OPERATOR> <TYPE>str</TYPE>(<FUNCTION>object</FUNCTION>)
	<OBJ>xmlNode</OBJ>.<OO>appendChild</OO>(text)
	<KEYWORD>return</KEYWORD> xmlNode

<KEYWORD>def</KEYWORD> <USER_FUNCTION>SetAttribute</USER_FUNCTION>(xmlNode,syntax, <FUNCTION>object</FUNCTION>):
	<KEYWORD>if</KEYWORD> xmlNode <OPERATOR>is</OPERATOR> <TYPE>None</TYPE> <OPERATOR>or</OPERATOR> <FUNCTION>object</FUNCTION> <OPERATOR>is</OPERATOR> <TYPE>None</TYPE> <OPERATOR>or</OPERATOR> <TYPE>str</TYPE>(<FUNCTION>object</FUNCTION>) <OPERATOR>==</OPERATOR> <STRING>''</STRING>:
		<KEYWORD>return</KEYWORD>
	<OBJ>xmlNode</OBJ>.<OO>setAttribute</OO>(syntax,<TYPE>str</TYPE>(<FUNCTION>object</FUNCTION>))

<KEYWORD>def</KEYWORD> <USER_FUNCTION>ReadNodeUrl</USER_FUNCTION>(node):
	attribute <OPERATOR>=</OPERATOR> ReadAttribute(node,<OBJ>DaeSyntax</OBJ>.<OO>URL</OO>)
	<KEYWORD>if</KEYWORD> attribute <OPERATOR>==</OPERATOR> <TYPE>None</TYPE>: <KEYWORD>return</KEYWORD> <TYPE>None</TYPE>
	<KEYWORD>else</KEYWORD> :		  
		attribute <OPERATOR>=</OPERATOR> <TYPE>str</TYPE>(attribute)
		<KEYWORD>if</KEYWORD> <OBJ>attribute</OBJ>.<OO>startswith</OO>(<STRING>'#'</STRING>):
			<KEYWORD>return</KEYWORD> attribute<OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC>:<OPERATOR>]</OPERATOR>	  
	<KEYWORD>return</KEYWORD> <TYPE>None</TYPE>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>WriteNodeUrl</USER_FUNCTION>(node, url):
	<OBJ>node</OBJ>.<OO>setAttribute</OO>(<OBJ>DaeSyntax</OBJ>.<OO>URL</OO>, StripString(<STRING>'#'</STRING><OPERATOR>+</OPERATOR>url))
	
<KEYWORD>def</KEYWORD> <USER_FUNCTION>IsVersionOk</USER_FUNCTION>(version, curVersion):
	versionAr <OPERATOR>=</OPERATOR> <OBJ>version</OBJ>.<OO>split</OO>(<STRING>'.'</STRING>)
	curVersionAr <OPERATOR>=</OPERATOR> <OBJ>curVersion</OBJ>.<OO>split</OO>(<STRING>'.'</STRING>)
	<KEYWORD>for</KEYWORD> i <OPERATOR>in</OPERATOR> <FUNCTION>range</FUNCTION>(<FUNCTION>len</FUNCTION>(curVersionAr)):
		<KEYWORD>if</KEYWORD> versionAr<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR> <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> curVersionAr<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>:
			<KEYWORD>return</KEYWORD> <TYPE>False</TYPE>
	<KEYWORD>return</KEYWORD> <TYPE>True</TYPE>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>StripString</USER_FUNCTION>(text):
	<KEYWORD>return</KEYWORD> <OBJ>text</OBJ>.<OO>replace</OO>(<STRING>' '</STRING>,<STRING>'_'</STRING>).<OO>replace</OO>(<STRING>'.'</STRING>,<STRING>'_'</STRING>)
