<SHEBANG>#!/usr/bin/env python</SHEBANG>
<SHEBANG></SHEBANG>
<KEYWORD>import</KEYWORD> <TYPE>sys</TYPE>

<KEYWORD>def</KEYWORD> <USER_FUNCTION>bf</USER_FUNCTION>(code):
  input_ptr <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>
  tape_ptr <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>
  tape <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>*</OPERATOR> <NUMERIC>30000</NUMERIC>

  <KEYWORD>while</KEYWORD> input_ptr <OPERATOR>&lt;</OPERATOR> <FUNCTION>len</FUNCTION>(code):
    char <OPERATOR>=</OPERATOR> code<OPERATOR>[</OPERATOR>input_ptr<OPERATOR>]</OPERATOR>
    <KEYWORD>if</KEYWORD> char <OPERATOR>==</OPERATOR> <STRING>'&gt;'</STRING> : tape_ptr <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>
    <KEYWORD>elif</KEYWORD> char <OPERATOR>==</OPERATOR> <STRING>'&lt;'</STRING> : tape_ptr <OPERATOR>-</OPERATOR><OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>
    <KEYWORD>elif</KEYWORD> char <OPERATOR>==</OPERATOR> <STRING>'+'</STRING> : tape<OPERATOR>[</OPERATOR>tape_ptr<OPERATOR>]</OPERATOR> <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>
    <KEYWORD>elif</KEYWORD> char <OPERATOR>==</OPERATOR> <STRING>'-'</STRING> : tape<OPERATOR>[</OPERATOR>tape_ptr<OPERATOR>]</OPERATOR> <OPERATOR>-</OPERATOR><OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>
    <KEYWORD>elif</KEYWORD> char <OPERATOR>==</OPERATOR> <STRING>'.'</STRING> : <OBJ>sys</OBJ>.<OBJ>stdout</OBJ>.<OO>write</OO>(<FUNCTION>chr</FUNCTION>(tape<OPERATOR>[</OPERATOR>tape_ptr<OPERATOR>]</OPERATOR>))
    <KEYWORD>elif</KEYWORD> char <OPERATOR>==</OPERATOR> <STRING>','</STRING> : 
      <KEYWORD>try</KEYWORD>: tape<OPERATOR>[</OPERATOR>tape_ptr<OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <FUNCTION>ord</FUNCTION>(<FUNCTION>raw_input</FUNCTION>()<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>)
      <KEYWORD>except</KEYWORD>: <KEYWORD>continue</KEYWORD>
    <KEYWORD>elif</KEYWORD> char <OPERATOR>==</OPERATOR> <STRING>'['</STRING> <OPERATOR>and</OPERATOR> <OPERATOR>not</OPERATOR> tape<OPERATOR>[</OPERATOR>tape_ptr<OPERATOR>]</OPERATOR> <OPERATOR>or</OPERATOR> char <OPERATOR>==</OPERATOR> <STRING>']'</STRING> <OPERATOR>and</OPERATOR> tape<OPERATOR>[</OPERATOR>tape_ptr<OPERATOR>]</OPERATOR>:
      stack <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>
      <KEYWORD>while</KEYWORD> <NUMERIC>0</NUMERIC> <OPERATOR>&lt;</OPERATOR><OPERATOR>=</OPERATOR> input_ptr <OPERATOR>&lt;</OPERATOR> <FUNCTION>len</FUNCTION>(code):
        input_ptr <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> char <OPERATOR>==</OPERATOR> <STRING>'['</STRING> <KEYWORD>else</KEYWORD> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>
        <KEYWORD>if</KEYWORD> code<OPERATOR>[</OPERATOR>input_ptr<OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> char: stack<OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC>
        <KEYWORD>elif</KEYWORD> code<OPERATOR>[</OPERATOR>input_ptr<OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <STRING>'['</STRING> <OPERATOR>or</OPERATOR> code<OPERATOR>[</OPERATOR>input_ptr<OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <STRING>']'</STRING>:
          <KEYWORD>if</KEYWORD> stack: stack <OPERATOR>-</OPERATOR><OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>
          <KEYWORD>else</KEYWORD>: 
            <KEYWORD>break</KEYWORD>
      <KEYWORD>if</KEYWORD> stack: <KEYWORD>raise</KEYWORD> Exception(<STRING>"Mismatched brackets"</STRING>)

    input_ptr <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>

<KEYWORD>if</KEYWORD> __name__ <OPERATOR>==</OPERATOR> <STRING>'__main__'</STRING>:
  code <OPERATOR>=</OPERATOR> <STRING>""</STRING>
  <KEYWORD>if</KEYWORD> <FUNCTION>len</FUNCTION>(<OBJ>sys</OBJ>.<OO>argv</OO>) <OPERATOR>&lt;</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>or</OPERATOR> <OBJ>sys</OBJ>.<OO>argv</OO><OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <STRING>'-'</STRING>:
    code <OPERATOR>=</OPERATOR> <OBJ>sys</OBJ>.<OBJ>stdin</OBJ>.<OO>read</OO>()
  <KEYWORD>else</KEYWORD>: code <OPERATOR>=</OPERATOR> <OBJ>sys</OBJ>.<OO>argv</OO><OPERATOR>[</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>
  bf(code)

