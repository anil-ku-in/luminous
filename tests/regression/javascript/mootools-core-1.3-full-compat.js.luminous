<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT>MooTools: the javascript framework</COMMENT>
<COMMENT></COMMENT>
<COMMENT>web build:</COMMENT>
<COMMENT> - http://mootools.net/core/7c56cfef9dddcf170a5d68e3fb61cfd7</COMMENT>
<COMMENT></COMMENT>
<COMMENT>packager build:</COMMENT>
<COMMENT> - packager build Core/Core Core/Array Core/String Core/Number Core/Function Core/Object Core/Event Core/Browser Core/Class Core/Class.Extras Core/Slick.Parser Core/Slick.Finder Core/Element Core/Element.Style Core/Element.Event Core/Element.Dimensions Core/Fx Core/Fx.CSS Core/Fx.Tween Core/Fx.Morph Core/Fx.Transitions Core/Request Core/Request.HTML Core/Request.JSON Core/Cookie Core/JSON Core/DOMReady Core/Swiff</COMMENT>
<COMMENT></COMMENT>
<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Core</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: The heart of MooTools.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>copyright: Copyright (c) 2006-2010 [Valerio Proietti](http://mad4milk.net/).</COMMENT>
<COMMENT></COMMENT>
<COMMENT>authors: The MooTools production team (http://mootools.net/developers/)</COMMENT>
<COMMENT></COMMENT>
<COMMENT>inspiration:</COMMENT>
<COMMENT>  - Class implementation inspired by [Base.js](http://dean.edwards.name/weblog/2006/03/base/) Copyright (c) 2006 Dean Edwards, [GNU Lesser General Public License](http://opensource.org/licenses/lgpl-license.php)</COMMENT>
<COMMENT>  - Some functionality inspired by [Prototype.js](http://prototypejs.org) Copyright (c) 2005-2007 Sam Stephenson, [MIT License](http://opensource.org/licenses/mit-license.php)</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: [Core, MooTools, Type, typeOf, instanceOf, Native]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>MooTools</OO> <OPERATOR>=</OPERATOR> {
	version<OPERATOR>:</OPERATOR> <STRING>'1.3'</STRING><OPERATOR>,</OPERATOR>
	build<OPERATOR>:</OPERATOR> <STRING>'a3eed692dd85050d80168ec2c708efe901bb7db3'</STRING>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// typeOf, instanceOf</COMMENT>

<KEYWORD>var</KEYWORD> typeOf <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>typeOf</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (item <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <STRING>'null'</STRING><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>$family</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>$family</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <STRING>'element'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>==</OPERATOR> <NUMERIC>3</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> (<REGEX>/<ESC>\S</ESC>/</REGEX><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>nodeValue</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'textnode'</STRING> <OPERATOR>:</OPERATOR> <STRING>'whitespace'</STRING><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <STRING>'number'</STRING><CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>callee</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <STRING>'arguments'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<STRING>'item'</STRING> <KEYWORD>in</KEYWORD> item<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <STRING>'collection'</STRING><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>return</KEYWORD> <KEYWORD>typeof</KEYWORD> item<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> instanceOf <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>instanceOf</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<OPERATOR>,</OPERATOR> object<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (item <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> constructor <OPERATOR>=</OPERATOR> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>$constructor</OO> <OPERATOR>||</OPERATOR> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>constructor</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>while</KEYWORD> (constructor<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (constructor <OPERATOR>===</OPERATOR> object<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		constructor <OPERATOR>=</OPERATOR> <OBJ>constructor</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> item <KEYWORD>instanceof</KEYWORD> object<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Function overloading</COMMENT>

<KEYWORD>var</KEYWORD> Function <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Function</OO><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> enumerables <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <KEYWORD>in</KEYWORD> {toString<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>})</CLOSER> enumerables <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
<KEYWORD>if</KEYWORD> (enumerables<CLOSER>)</CLOSER> enumerables <OPERATOR>=</OPERATOR> [<STRING>'hasOwnProperty'</STRING><OPERATOR>,</OPERATOR> <STRING>'valueOf'</STRING><OPERATOR>,</OPERATOR> <STRING>'isPrototypeOf'</STRING><OPERATOR>,</OPERATOR> <STRING>'propertyIsEnumerable'</STRING><OPERATOR>,</OPERATOR> <STRING>'toLocaleString'</STRING><OPERATOR>,</OPERATOR> <STRING>'toString'</STRING><OPERATOR>,</OPERATOR> <STRING>'constructor'</STRING><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>overloadSetter</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(usePlural<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(a<OPERATOR>,</OPERATOR> b<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (a <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (usePlural <OPERATOR>||</OPERATOR> <KEYWORD>typeof</KEYWORD> a <OPERATOR>!=</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER>{
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> k <KEYWORD>in</KEYWORD> a<CLOSER>)</CLOSER> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> k<OPERATOR>,</OPERATOR> a[k<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (enumerables<CLOSER>)</CLOSER> <KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>enumerables</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER>{
				k <OPERATOR>=</OPERATOR> enumerables[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (<OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(k<CLOSER>))</CLOSER> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> k<OPERATOR>,</OPERATOR> a[k<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
			<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> a<OPERATOR>,</OPERATOR> b<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>overloadGetter</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(usePlural<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(a<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> args<OPERATOR>,</OPERATOR> result<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (usePlural <OPERATOR>||</OPERATOR> <KEYWORD>typeof</KEYWORD> a <OPERATOR>!=</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> args <OPERATOR>=</OPERATOR> a<OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> args <OPERATOR>=</OPERATOR> arguments<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (args<CLOSER>)</CLOSER>{
			result <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <OBJ>args</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> result[args[i<CLOSER>]]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> args[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
			result <OPERATOR>=</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> a<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> result<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>extend</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(key<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
	<KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>overloadSetter</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>implement</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(key<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO>[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>overloadSetter</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// From</COMMENT>

<KEYWORD>var</KEYWORD> slice <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>slice</OO><OPERATOR>;</OPERATOR>

<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>from</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (typeOf(item<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'function'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> item <OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> item<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (item <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> (<OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>isEnumerable</OO>(item<CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> item <OPERATOR>!=</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> (typeOf(item<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'array'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> item <OPERATOR>:</OPERATOR> <OBJ>slice</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(item<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> [item<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Number</OBJ><OPERATOR>.</OPERATOR><OO>from</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> number <OPERATOR>=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>(item<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <FUNCTION>isFinite</FUNCTION>(number<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> number <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>String</OBJ><OPERATOR>.</OPERATOR><OO>from</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> item <OPERATOR>+</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// hide, protect</COMMENT>

<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	hide<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$hidden</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	protect<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$protected</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Type</COMMENT>

<KEYWORD>var</KEYWORD> Type <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Type</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> object<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (name<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> lower <OPERATOR>=</OPERATOR> <OBJ>name</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> typeCheck <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> (typeOf(item<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> lower<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		Type[<STRING>'is'</STRING> <OPERATOR>+</OPERATOR> name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> typeCheck<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (object <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER>{
			<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>$family</OO> <OPERATOR>=</OPERATOR> (<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
				<KEYWORD>return</KEYWORD> lower<OPERATOR>;</OPERATOR>
			<CLOSER>})</CLOSER><OPERATOR>.</OPERATOR><OO>hide</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<COMMENT>//&lt;1.2compat&gt;</COMMENT>
			<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> typeCheck<OPERATOR>;</OPERATOR>
			<COMMENT>//&lt;/1.2compat&gt;</COMMENT>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER>

	<KEYWORD>if</KEYWORD> (object <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>

	<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>$constructor</OO> <OPERATOR>=</OPERATOR> Type<OPERATOR>;</OPERATOR>
	<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>$constructor</OO> <OPERATOR>=</OPERATOR> object<OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> object<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> toString <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>toString</OO><OPERATOR>;</OPERATOR>

<OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>isEnumerable</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (item <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <STRING>'number'</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>toString</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(item<CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <STRING>'[object Function]'</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> hooks <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> hooksOf <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> typeOf(<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> hooks[type<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> (hooks[type<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> [<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> implement <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> method<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (method <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>method</OBJ><OPERATOR>.</OPERATOR><OO>$hidden</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> hooks <OPERATOR>=</OPERATOR> hooksOf(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <OBJ>hooks</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> hook <OPERATOR>=</OPERATOR> hooks[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (typeOf(hook<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'type'</STRING><CLOSER>)</CLOSER> <OBJ>implement</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(hook<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> method<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> <OBJ>hook</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> method<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	
	<KEYWORD>var</KEYWORD> previous <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO>[name<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (previous <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>previous</OBJ><OPERATOR>.</OPERATOR><OO>$protected</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO>[name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> method<OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (<KEYWORD>this</KEYWORD>[name<CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> typeOf(method<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'function'</STRING><CLOSER>)</CLOSER> <OBJ>extend</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>method</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(item<OPERATOR>,</OPERATOR> <OBJ>slice</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(arguments<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> extend <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> method<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (method <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>method</OBJ><OPERATOR>.</OPERATOR><OO>$hidden</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> previous <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[name<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (previous <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>previous</OBJ><OPERATOR>.</OPERATOR><OO>$protected</OO><CLOSER>)</CLOSER> <KEYWORD>this</KEYWORD>[name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> method<OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	implement<OPERATOR>:</OPERATOR> <OBJ>implement</OBJ><OPERATOR>.</OPERATOR><OO>overloadSetter</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	extend<OPERATOR>:</OPERATOR> <OBJ>extend</OBJ><OPERATOR>.</OPERATOR><OO>overloadSetter</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	alias<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> existing<CLOSER>)</CLOSER>{
		<OBJ>implement</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO>[existing<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>overloadSetter</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	mirror<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(hook<CLOSER>)</CLOSER>{
		hooksOf(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>push</OO>(hook<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>new</KEYWORD> Type(<STRING>'Type'</STRING><OPERATOR>,</OPERATOR> Type<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Default Types</COMMENT>

<KEYWORD>var</KEYWORD> force <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> object<OPERATOR>,</OPERATOR> methods<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> isType <OPERATOR>=</OPERATOR> (object <OPERATOR>!=</OPERATOR> <TYPE>Object</TYPE><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
		prototype <OPERATOR>=</OPERATOR> <OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (isType<CLOSER>)</CLOSER> object <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Type(name<OPERATOR>,</OPERATOR> object<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>methods</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> key <OPERATOR>=</OPERATOR> methods[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>
			generic <OPERATOR>=</OPERATOR> object[key<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>
			proto <OPERATOR>=</OPERATOR> prototype[key<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (generic<CLOSER>)</CLOSER> <OBJ>generic</OBJ><OPERATOR>.</OPERATOR><OO>protect</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (isType <OPERATOR>&amp;&amp;</OPERATOR> proto<CLOSER>)</CLOSER>{
			<KEYWORD>delete</KEYWORD> prototype[key<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			prototype[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>proto</OBJ><OPERATOR>.</OPERATOR><OO>protect</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER>

	<KEYWORD>if</KEYWORD> (isType<CLOSER>)</CLOSER> <OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(prototype<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> force<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

force(<STRING>'String'</STRING><OPERATOR>,</OPERATOR> <TYPE>String</TYPE><OPERATOR>,</OPERATOR> [
	<STRING>'charAt'</STRING><OPERATOR>,</OPERATOR> <STRING>'charCodeAt'</STRING><OPERATOR>,</OPERATOR> <STRING>'concat'</STRING><OPERATOR>,</OPERATOR> <STRING>'indexOf'</STRING><OPERATOR>,</OPERATOR> <STRING>'lastIndexOf'</STRING><OPERATOR>,</OPERATOR> <STRING>'match'</STRING><OPERATOR>,</OPERATOR> <STRING>'quote'</STRING><OPERATOR>,</OPERATOR> <STRING>'replace'</STRING><OPERATOR>,</OPERATOR> <STRING>'search'</STRING><OPERATOR>,</OPERATOR>
	<STRING>'slice'</STRING><OPERATOR>,</OPERATOR> <STRING>'split'</STRING><OPERATOR>,</OPERATOR> <STRING>'substr'</STRING><OPERATOR>,</OPERATOR> <STRING>'substring'</STRING><OPERATOR>,</OPERATOR> <STRING>'toLowerCase'</STRING><OPERATOR>,</OPERATOR> <STRING>'toUpperCase'</STRING>
<CLOSER>])</CLOSER>(<STRING>'Array'</STRING><OPERATOR>,</OPERATOR> <TYPE>Array</TYPE><OPERATOR>,</OPERATOR> [
	<STRING>'pop'</STRING><OPERATOR>,</OPERATOR> <STRING>'push'</STRING><OPERATOR>,</OPERATOR> <STRING>'reverse'</STRING><OPERATOR>,</OPERATOR> <STRING>'shift'</STRING><OPERATOR>,</OPERATOR> <STRING>'sort'</STRING><OPERATOR>,</OPERATOR> <STRING>'splice'</STRING><OPERATOR>,</OPERATOR> <STRING>'unshift'</STRING><OPERATOR>,</OPERATOR> <STRING>'concat'</STRING><OPERATOR>,</OPERATOR> <STRING>'join'</STRING><OPERATOR>,</OPERATOR> <STRING>'slice'</STRING><OPERATOR>,</OPERATOR>
	<STRING>'indexOf'</STRING><OPERATOR>,</OPERATOR> <STRING>'lastIndexOf'</STRING><OPERATOR>,</OPERATOR> <STRING>'filter'</STRING><OPERATOR>,</OPERATOR> <STRING>'forEach'</STRING><OPERATOR>,</OPERATOR> <STRING>'every'</STRING><OPERATOR>,</OPERATOR> <STRING>'map'</STRING><OPERATOR>,</OPERATOR> <STRING>'some'</STRING><OPERATOR>,</OPERATOR> <STRING>'reduce'</STRING><OPERATOR>,</OPERATOR> <STRING>'reduceRight'</STRING>
<CLOSER>])</CLOSER>(<STRING>'Number'</STRING><OPERATOR>,</OPERATOR> <TYPE>Number</TYPE><OPERATOR>,</OPERATOR> [
	<STRING>'toExponential'</STRING><OPERATOR>,</OPERATOR> <STRING>'toFixed'</STRING><OPERATOR>,</OPERATOR> <STRING>'toLocaleString'</STRING><OPERATOR>,</OPERATOR> <STRING>'toPrecision'</STRING>
<CLOSER>])</CLOSER>(<STRING>'Function'</STRING><OPERATOR>,</OPERATOR> Function<OPERATOR>,</OPERATOR> [
	<STRING>'apply'</STRING><OPERATOR>,</OPERATOR> <STRING>'call'</STRING><OPERATOR>,</OPERATOR> <STRING>'bind'</STRING>
<CLOSER>])</CLOSER>(<STRING>'RegExp'</STRING><OPERATOR>,</OPERATOR> <TYPE>RegExp</TYPE><OPERATOR>,</OPERATOR> [
	<STRING>'exec'</STRING><OPERATOR>,</OPERATOR> <STRING>'test'</STRING>
<CLOSER>])</CLOSER>(<STRING>'Object'</STRING><OPERATOR>,</OPERATOR> <TYPE>Object</TYPE><OPERATOR>,</OPERATOR> [
	<STRING>'create'</STRING><OPERATOR>,</OPERATOR> <STRING>'defineProperty'</STRING><OPERATOR>,</OPERATOR> <STRING>'defineProperties'</STRING><OPERATOR>,</OPERATOR> <STRING>'keys'</STRING><OPERATOR>,</OPERATOR>
	<STRING>'getPrototypeOf'</STRING><OPERATOR>,</OPERATOR> <STRING>'getOwnPropertyDescriptor'</STRING><OPERATOR>,</OPERATOR> <STRING>'getOwnPropertyNames'</STRING><OPERATOR>,</OPERATOR>
	<STRING>'preventExtensions'</STRING><OPERATOR>,</OPERATOR> <STRING>'isExtensible'</STRING><OPERATOR>,</OPERATOR> <STRING>'seal'</STRING><OPERATOR>,</OPERATOR> <STRING>'isSealed'</STRING><OPERATOR>,</OPERATOR> <STRING>'freeze'</STRING><OPERATOR>,</OPERATOR> <STRING>'isFrozen'</STRING>
<CLOSER>])</CLOSER>(<STRING>'Date'</STRING><OPERATOR>,</OPERATOR> <TYPE>Date</TYPE><OPERATOR>,</OPERATOR> [<STRING>'now'</STRING><CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO> <OPERATOR>=</OPERATOR> <OBJ>extend</OBJ><OPERATOR>.</OPERATOR><OO>overloadSetter</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Date</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>(<STRING>'now'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OPERATOR>+</OPERATOR>(<KEYWORD>new</KEYWORD> <TYPE>Date</TYPE><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>new</KEYWORD> Type(<STRING>'Boolean'</STRING><OPERATOR>,</OPERATOR> <TYPE>Boolean</TYPE><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// fixes NaN returning as Number</COMMENT>

<OBJ>Number</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>$family</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <FUNCTION>isFinite</FUNCTION>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'number'</STRING> <OPERATOR>:</OPERATOR> <STRING>'null'</STRING><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>hide</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Number.random</COMMENT>

<OBJ>Number</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>(<STRING>'random'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(min<OPERATOR>,</OPERATOR> max<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>floor</OO>(<OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>random</OO>(<CLOSER>)</CLOSER> <OPERATOR>*</OPERATOR> (max <OPERATOR>-</OPERATOR> min <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> min<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// forEach, each</COMMENT>

<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>(<STRING>'forEach'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(object<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>))</CLOSER> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> object[key<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> object<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>each</OO> <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>forEach</OO><OPERATOR>;</OPERATOR>

<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	forEach<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (i <KEYWORD>in</KEYWORD> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	each<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>forEach</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Array &amp; Object cloning, Object merging and appending</COMMENT>

<KEYWORD>var</KEYWORD> cloneOf <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>switch</KEYWORD> (typeOf(item<CLOSER>))</CLOSER>{
		<KEYWORD>case</KEYWORD> <STRING>'array'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>case</KEYWORD> <STRING>'object'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>(item<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>default</KEYWORD><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> item<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(<STRING>'clone'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR> clone <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(i<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>while</KEYWORD> (i<OPERATOR>--</OPERATOR><CLOSER>)</CLOSER> clone[i<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> cloneOf(<KEYWORD>this</KEYWORD>[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> clone<OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> mergeOne <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(source<OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> current<CLOSER>)</CLOSER>{
	<KEYWORD>switch</KEYWORD> (typeOf(current<CLOSER>))</CLOSER>{
		<KEYWORD>case</KEYWORD> <STRING>'object'</STRING><OPERATOR>:</OPERATOR>
			<KEYWORD>if</KEYWORD> (typeOf(source[key<CLOSER>])</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'object'</STRING><CLOSER>)</CLOSER> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO>(source[key<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> current<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> source[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>(current<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>case</KEYWORD> <STRING>'array'</STRING><OPERATOR>:</OPERATOR> source[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>current</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>default</KEYWORD><OPERATOR>:</OPERATOR> source[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> current<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> source<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({

	merge<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(source<OPERATOR>,</OPERATOR> k<OPERATOR>,</OPERATOR> v<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (typeOf(k<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> mergeOne(source<OPERATOR>,</OPERATOR> k<OPERATOR>,</OPERATOR> v<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> object <OPERATOR>=</OPERATOR> arguments[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER> mergeOne(source<OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> object[key<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> source<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	clone<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> clone <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER> clone[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> cloneOf(object[key<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> clone<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	append<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(original<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> extended <OPERATOR>=</OPERATOR> arguments[i<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> extended<CLOSER>)</CLOSER> original[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> extended[key<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> original<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Object-less types</COMMENT>

[<STRING>'Object'</STRING><OPERATOR>,</OPERATOR> <STRING>'WhiteSpace'</STRING><OPERATOR>,</OPERATOR> <STRING>'TextNode'</STRING><OPERATOR>,</OPERATOR> <STRING>'Collection'</STRING><OPERATOR>,</OPERATOR> <STRING>'Arguments'</STRING><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(name<CLOSER>)</CLOSER>{
	<KEYWORD>new</KEYWORD> Type(name<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Unique ID</COMMENT>

<KEYWORD>var</KEYWORD> UID <OPERATOR>=</OPERATOR> <OBJ>Date</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>String</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>(<STRING>'uniqueID'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (UID<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toString</OO>(<NUMERIC>36</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<KEYWORD>var</KEYWORD> Hash <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Hash</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Type(<STRING>'Hash'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (typeOf(object<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'hash'</STRING><CLOSER>)</CLOSER> object <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>(<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>getClean</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER> <KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> object[key<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Hash</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	forEach<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>forEach</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getClean<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> clean <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>))</CLOSER> clean[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> clean<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getLength<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> length <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>))</CLOSER> length<OPERATOR>++;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> length<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Hash</OBJ><OPERATOR>.</OPERATOR><OO>alias</OO>(<STRING>'each'</STRING><OPERATOR>,</OPERATOR> <STRING>'forEach'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>isObject</OO><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> Native <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Native</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(properties<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Type(<OBJ>properties</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>,</OPERATOR> <OBJ>properties</OBJ><OPERATOR>.</OPERATOR><OO>initialize</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Native</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>

<OBJ>Native</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(objects<OPERATOR>,</OPERATOR> methods<CLOSER>)</CLOSER>{
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <OBJ>objects</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> objects[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>implement</OO>(methods<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> Native<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> arrayType <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> instanceOf(item<OPERATOR>,</OPERATOR> <TYPE>Array</TYPE><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> arrayType(item<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$A</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(item<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>slice</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$arguments</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(i<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> arguments[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$chk</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(obj<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OPERATOR>!!</OPERATOR>(obj <OPERATOR>||</OPERATOR> obj <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$clear</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(timer<CLOSER>)</CLOSER>{
	<FUNCTION>clearTimeout</FUNCTION>(timer<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<FUNCTION>clearInterval</FUNCTION>(timer<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$defined</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(obj<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (obj <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$each</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(iterable<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> typeOf(iterable<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	((type <OPERATOR>==</OPERATOR> <STRING>'arguments'</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'collection'</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'array'</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'elements'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <TYPE>Array</TYPE> <OPERATOR>:</OPERATOR> <TYPE>Object</TYPE><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(iterable<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$empty</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$extend</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(original<OPERATOR>,</OPERATOR> extended<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(original<OPERATOR>,</OPERATOR> extended<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$H</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Hash(object<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$merge</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> args <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>args</OBJ><OPERATOR>.</OPERATOR><OO>unshift</OO>({<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$lambda</OO> <OPERATOR>=</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>from</OO><OPERATOR>;</OPERATOR>
<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$mixin</OO> <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO><OPERATOR>;</OPERATOR>
<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$random</OO> <OPERATOR>=</OPERATOR> <OBJ>Number</OBJ><OPERATOR>.</OPERATOR><OO>random</OO><OPERATOR>;</OPERATOR>
<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$splat</OO> <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO><OPERATOR>;</OPERATOR>
<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$time</OO> <OPERATOR>=</OPERATOR> <OBJ>Date</OBJ><OPERATOR>.</OPERATOR><OO>now</OO><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$type</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> typeOf(object<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (type <OPERATOR>==</OPERATOR> <STRING>'elements'</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <STRING>'array'</STRING><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> (type <OPERATOR>==</OPERATOR> <STRING>'null'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>false</KEYWORD> <OPERATOR>:</OPERATOR> type<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$unlink</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
	<KEYWORD>switch</KEYWORD> (typeOf(object<CLOSER>))</CLOSER>{
		<KEYWORD>case</KEYWORD> <STRING>'object'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>(object<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>case</KEYWORD> <STRING>'array'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>(object<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>case</KEYWORD> <STRING>'hash'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Hash(object<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>default</KEYWORD><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> object<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Array</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains Array Prototypes like each, contains, and erase.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Type</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Array</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	invoke<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(methodName<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> args <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(arguments<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> item[methodName<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>apply</OO>(item<OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	every<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> ((i <KEYWORD>in</KEYWORD> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	filter<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> results <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> ((i <KEYWORD>in</KEYWORD> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>))</CLOSER> <OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(<KEYWORD>this</KEYWORD>[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	clean<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>(<KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> item <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	indexOf<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(item<OPERATOR>,</OPERATOR> from<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> len <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> (from <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>max</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> len <OPERATOR>+</OPERATOR> from<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> from <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> len<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER> <OPERATOR>===</OPERATOR> item<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> i<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	map<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> results <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (i <KEYWORD>in</KEYWORD> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> results[i<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	some<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> ((i <KEYWORD>in</KEYWORD> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	associate<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(keys<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> obj <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> length <OPERATOR>=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>min</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR> <OBJ>keys</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> length<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> obj[keys[i<CLOSER>]]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> obj<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	link<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> result <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER>{
				<KEYWORD>if</KEYWORD> (object[key<CLOSER>]</CLOSER>(<KEYWORD>this</KEYWORD>[i<CLOSER>]))</CLOSER>{
					result[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>delete</KEYWORD> object[key<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> result<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	contains<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(item<OPERATOR>,</OPERATOR> from<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(item<OPERATOR>,</OPERATOR> from<CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	append<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(array<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> array<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getLast<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>this</KEYWORD>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getRandom<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>this</KEYWORD>[<OBJ>Number</OBJ><OPERATOR>.</OPERATOR><OO>random</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)]</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	include<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(item<CLOSER>))</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(item<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	combine<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(array<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>array</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>include</OO>(array[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	erase<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER> <OPERATOR>===</OPERATOR> item<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>(i<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	empty<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	flatten<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> array <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> typeOf(<KEYWORD>this</KEYWORD>[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (type <OPERATOR>==</OPERATOR> <STRING>'null'</STRING><CLOSER>)</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			array <OPERATOR>=</OPERATOR> <OBJ>array</OBJ><OPERATOR>.</OPERATOR><OO>concat</OO>((type <OPERATOR>==</OPERATOR> <STRING>'array'</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'collection'</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'arguments'</STRING> <OPERATOR>||</OPERATOR> instanceOf(<KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> <TYPE>Array</TYPE><CLOSER>))</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>flatten</OO>(<KEYWORD>this</KEYWORD>[i<CLOSER>])</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD>[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> array<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	pick<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	hexToRgb<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(array<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>!=</OPERATOR> <NUMERIC>3</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> rgb <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> value <OPERATOR>+=</OPERATOR> value<OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>toInt</OO>(<NUMERIC>16</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (array<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> rgb <OPERATOR>:</OPERATOR> <STRING>'rgb('</STRING> <OPERATOR>+</OPERATOR> rgb <OPERATOR>+</OPERATOR> <STRING>')'</STRING><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	rgbToHex<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(array<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&lt;</OPERATOR> <NUMERIC>3</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>4</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>3</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>array<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <STRING>'transparent'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> hex <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> bit <OPERATOR>=</OPERATOR> (<KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER> <OPERATOR>-</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toString</OO>(<NUMERIC>16</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>hex</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>((<OBJ>bit</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'0'</STRING> <OPERATOR>+</OPERATOR> bit <OPERATOR>:</OPERATOR> bit<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> (array<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> hex <OPERATOR>:</OPERATOR> <STRING>'#'</STRING> <OPERATOR>+</OPERATOR> <OBJ>hex</OBJ><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>alias</OO>(<STRING>'extend'</STRING><OPERATOR>,</OPERATOR> <STRING>'append'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> $pick <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(arguments<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>pick</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: String</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains String Prototypes like camelCase, capitalize, test, and toInt.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Type</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: String</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<OBJ>String</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	test<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(regex<OPERATOR>,</OPERATOR> params<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> ((typeOf(regex<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'regexp'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> regex <OPERATOR>:</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(<STRING>''</STRING> <OPERATOR>+</OPERATOR> regex<OPERATOR>,</OPERATOR> params<CLOSER>))</CLOSER><OPERATOR>.</OPERATOR><OO>test</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	contains<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(string<OPERATOR>,</OPERATOR> separator<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (separator<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> (separator <OPERATOR>+</OPERATOR> <KEYWORD>this</KEYWORD> <OPERATOR>+</OPERATOR> separator<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>indexOf</OO>(separator <OPERATOR>+</OPERATOR> string <OPERATOR>+</OPERATOR> separator<CLOSER>)</CLOSER> <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(string<CLOSER>)</CLOSER> <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	trim<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/^<ESC>\s</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\s</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR>$/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	clean<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/<ESC>\s</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>' '</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>trim</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	camelCase<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/-<ESC>\D</ESC>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(match<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(<NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	hyphenate<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>A-Z<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(match<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> (<STRING>'-'</STRING> <OPERATOR>+</OPERATOR> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(<NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	capitalize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/<ESC>\b</ESC><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>a-z<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(match<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	escapeRegExp<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>-<REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_OPERATOR>?</REGEX_OPERATOR>^${}<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\]</ESC><ESC>\/</ESC><ESC>\\</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>'<ESC>\\</ESC>$1'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	toInt<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(base<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <FUNCTION>parseInt</FUNCTION>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> base <OPERATOR>||</OPERATOR> <NUMERIC>10</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	toFloat<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <FUNCTION>parseFloat</FUNCTION>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	hexToRgb<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(array<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> hex <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/^#<REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\w</ESC><REGEX_REPEAT_MARKER>{1,2}</REGEX_REPEAT_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\w</ESC><REGEX_REPEAT_MARKER>{1,2}</REGEX_REPEAT_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\w</ESC><REGEX_REPEAT_MARKER>{1,2}</REGEX_REPEAT_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$/</REGEX><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (hex<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>hex</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(<NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>hexToRgb</OO>(array<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	rgbToHex<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(array<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> rgb <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/<ESC>\d</ESC><REGEX_REPEAT_MARKER>{1,3}</REGEX_REPEAT_MARKER>/<KEYWORD>g</KEYWORD></REGEX><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (rgb<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>rgb</OBJ><OPERATOR>.</OPERATOR><OO>rgbToHex</OO>(array<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	substitute<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<OPERATOR>,</OPERATOR> regexp<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(regexp <OPERATOR>||</OPERATOR> (<REGEX>/<ESC>\\</ESC><REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\{</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^{}<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\}</ESC>/<KEYWORD>g</KEYWORD></REGEX><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(match<OPERATOR>,</OPERATOR> name<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(<NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'<ESC>\\</ESC>'</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(<NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> (object[name<CLOSER>]</CLOSER> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> object[name<CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Number</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains Number Prototypes like limit, round, times, and ceil.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Type</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Number</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<OBJ>Number</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	limit<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(min<OPERATOR>,</OPERATOR> max<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>min</OO>(max<OPERATOR>,</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>max</OO>(min<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	round<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(precision<CLOSER>)</CLOSER>{
		precision <OPERATOR>=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>pow</OO>(<NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> precision <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toFixed</OO>(precision <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>?</OPERATOR> <OPERATOR>-</OPERATOR>precision <OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>round</OO>(<KEYWORD>this</KEYWORD> <OPERATOR>*</OPERATOR> precision<CLOSER>)</CLOSER> <OPERATOR>/</OPERATOR> precision<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	times<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	toFloat<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <FUNCTION>parseFloat</FUNCTION>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	toInt<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(base<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <FUNCTION>parseInt</FUNCTION>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> base <OPERATOR>||</OPERATOR> <NUMERIC>10</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Number</OBJ><OPERATOR>.</OPERATOR><OO>alias</OO>(<STRING>'each'</STRING><OPERATOR>,</OPERATOR> <STRING>'times'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

(<KEYWORD>function</KEYWORD>(math<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> methods <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>math</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(name<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><TYPE>Number</TYPE>[name<CLOSER>])</CLOSER> methods[name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <TYPE>Math</TYPE>[name<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> [<KEYWORD>this</KEYWORD><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>concat</OO>(<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(arguments<CLOSER>)))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>Number</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(methods<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER>([<STRING>'abs'</STRING><OPERATOR>,</OPERATOR> <STRING>'acos'</STRING><OPERATOR>,</OPERATOR> <STRING>'asin'</STRING><OPERATOR>,</OPERATOR> <STRING>'atan'</STRING><OPERATOR>,</OPERATOR> <STRING>'atan2'</STRING><OPERATOR>,</OPERATOR> <STRING>'ceil'</STRING><OPERATOR>,</OPERATOR> <STRING>'cos'</STRING><OPERATOR>,</OPERATOR> <STRING>'exp'</STRING><OPERATOR>,</OPERATOR> <STRING>'floor'</STRING><OPERATOR>,</OPERATOR> <STRING>'log'</STRING><OPERATOR>,</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR> <STRING>'min'</STRING><OPERATOR>,</OPERATOR> <STRING>'pow'</STRING><OPERATOR>,</OPERATOR> <STRING>'sin'</STRING><OPERATOR>,</OPERATOR> <STRING>'sqrt'</STRING><OPERATOR>,</OPERATOR> <STRING>'tan'</STRING><CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Function</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains Function Prototypes like create, bind, pass, and delay.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Type</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Function</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({

	attempt<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>try</KEYWORD> {
				<KEYWORD>return</KEYWORD> arguments[i<CLOSER>]</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD> (e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	attempt<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(args<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>try</KEYWORD> {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(bind<OPERATOR>,</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(args<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD> (e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER>
		
		<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	bind<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(bind<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR>
			args <OPERATOR>=</OPERATOR> (<OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(arguments<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		
		<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>args <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (args <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(bind<OPERATOR>,</OPERATOR> <OBJ>args</OBJ><OPERATOR>.</OPERATOR><OO>concat</OO>(<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(arguments<CLOSER>)))</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(bind<OPERATOR>,</OPERATOR> args <OPERATOR>||</OPERATOR> arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	pass<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(args<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (args <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> args <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(bind<OPERATOR>,</OPERATOR> args <OPERATOR>||</OPERATOR> arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	delay<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(delay<OPERATOR>,</OPERATOR> bind<OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <FUNCTION>setTimeout</FUNCTION>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pass</OO>(args<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> delay<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	periodical<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(periodical<OPERATOR>,</OPERATOR> bind<OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <FUNCTION>setInterval</FUNCTION>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pass</OO>(args<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> periodical<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<KEYWORD>delete</KEYWORD> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>bind</OO><OPERATOR>;</OPERATOR>

<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	create<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(options<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		options <OPERATOR>=</OPERATOR> options <OPERATOR>||</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(event<CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> args <OPERATOR>=</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>arguments</OO><OPERATOR>;</OPERATOR>
			args <OPERATOR>=</OPERATOR> (args <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(args<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(arguments<OPERATOR>,</OPERATOR> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><CLOSER>)</CLOSER> args <OPERATOR>=</OPERATOR> [event <OPERATOR>||</OPERATOR> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>extend</OO>(args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> returns <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
				<KEYWORD>return</KEYWORD> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>bind</OO> <OPERATOR>||</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>delay</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <FUNCTION>setTimeout</FUNCTION>(returns<OPERATOR>,</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>delay</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>periodical</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <FUNCTION>setInterval</FUNCTION>(returns<OPERATOR>,</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>periodical</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>attempt</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>attempt</OO>(returns<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> returns(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	bind<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(bind<OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (args <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> args <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(bind<OPERATOR>,</OPERATOR> args <OPERATOR>||</OPERATOR> arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	bindWithEvent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(bind<OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (args <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> args <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(event<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(bind<OPERATOR>,</OPERATOR> (args <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> arguments <OPERATOR>:</OPERATOR> [event<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>concat</OO>(args<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	run<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(args<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(bind<OPERATOR>,</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(args<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> $try <OPERATOR>=</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>attempt</OO><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Object</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Object generic methods</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Type</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: [Object, Hash]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>


<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({

	subset<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<OPERATOR>,</OPERATOR> keys<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> results <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>keys</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> k <OPERATOR>=</OPERATOR> keys[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			results[k<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> object[k<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	map<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> results <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>))</CLOSER> results[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> object[key<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> object<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	filter<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> results <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(object<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> key<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> value<OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> object<CLOSER>))</CLOSER> results[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	every<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> object[key<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> key<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	some<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(bind<OPERATOR>,</OPERATOR> object[key<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> key<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	keys<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> keys <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>))</CLOSER> <OBJ>keys</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(key<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> keys<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	values<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> values <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>))</CLOSER> <OBJ>values</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(object[key<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> values<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getLength<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>keys</OO>(object<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	keyOf<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> object[key<CLOSER>]</CLOSER> <OPERATOR>===</OPERATOR> value<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> key<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	contains<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>keyOf</OO>(object<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	toQueryString<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(object<OPERATOR>,</OPERATOR> base<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> queryString <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>

		<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(object<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> key<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (base<CLOSER>)</CLOSER> key <OPERATOR>=</OPERATOR> base <OPERATOR>+</OPERATOR> <STRING>'['</STRING> <OPERATOR>+</OPERATOR> key <OPERATOR>+</OPERATOR> <STRING>']'</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> result<OPERATOR>;</OPERATOR>
			<KEYWORD>switch</KEYWORD> (typeOf(value<CLOSER>))</CLOSER>{
				<KEYWORD>case</KEYWORD> <STRING>'object'</STRING><OPERATOR>:</OPERATOR> result <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>toQueryString</OO>(value<OPERATOR>,</OPERATOR> key<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
				<KEYWORD>case</KEYWORD> <STRING>'array'</STRING><OPERATOR>:</OPERATOR>
					<KEYWORD>var</KEYWORD> qs <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
					<OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(val<OPERATOR>,</OPERATOR> i<CLOSER>)</CLOSER>{
						qs[i<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> val<OPERATOR>;</OPERATOR>
					<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
					result <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>toQueryString</OO>(qs<OPERATOR>,</OPERATOR> key<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
				<KEYWORD>default</KEYWORD><OPERATOR>:</OPERATOR> result <OPERATOR>=</OPERATOR> key <OPERATOR>+</OPERATOR> <STRING>'='</STRING> <OPERATOR>+</OPERATOR> <FUNCTION>encodeURIComponent</FUNCTION>(value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			<KEYWORD>if</KEYWORD> (value <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OBJ>queryString</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(result<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> <OBJ>queryString</OBJ><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>'&amp;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Hash</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	has<OPERATOR>:</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO><OPERATOR>,</OPERATOR>

	keyOf<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>keyOf</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	hasValue<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	extend<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(properties<CLOSER>)</CLOSER>{
		<OBJ>Hash</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(properties <OPERATOR>||</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> key<CLOSER>)</CLOSER>{
			<OBJ>Hash</OBJ><OPERATOR>.</OPERATOR><OO>set</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	combine<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(properties<CLOSER>)</CLOSER>{
		<OBJ>Hash</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(properties <OPERATOR>||</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> key<CLOSER>)</CLOSER>{
			<OBJ>Hash</OBJ><OPERATOR>.</OPERATOR><OO>include</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	erase<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(key<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>))</CLOSER> <KEYWORD>delete</KEYWORD> <KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(key<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>))</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(key<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>))</CLOSER> <KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	empty<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>Hash</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> key<CLOSER>)</CLOSER>{
			<KEYWORD>delete</KEYWORD> <KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	include<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(key<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	map<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Hash(<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	filter<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Hash(<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	every<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>every</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	some<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>some</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getKeys<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>keys</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getValues<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>values</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	toQueryString<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(base<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>toQueryString</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> base<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Hash</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO> <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>append</OO><OPERATOR>;</OPERATOR>

<OBJ>Hash</OBJ><OPERATOR>.</OPERATOR><OO>alias</OO>({indexOf<OPERATOR>:</OPERATOR> <STRING>'keyOf'</STRING><OPERATOR>,</OPERATOR> contains<OPERATOR>:</OPERATOR> <STRING>'hasValue'</STRING><CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Browser</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: The Browser Object. Contains Browser initialization, Window and Document, and the Browser Hash.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Array, Function, Number, String]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: [Browser, Window, Document]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<KEYWORD>var</KEYWORD> <TYPE>document</TYPE> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> <TYPE>window</TYPE> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>window</OO> <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> UID <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$uid</OO> <OPERATOR>=</OPERATOR> (<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>ActiveXObject</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>uid</OO> <OPERATOR>||</OPERATOR> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>uid</OO> <OPERATOR>=</OPERATOR> [UID<OPERATOR>++</OPERATOR><CLOSER>]))</CLOSER>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>uid</OO> <OPERATOR>||</OPERATOR> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>uid</OO> <OPERATOR>=</OPERATOR> UID<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

$uid(<TYPE>window</TYPE><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
$uid(<TYPE>document</TYPE><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> ua <OPERATOR>=</OPERATOR> <OBJ>navigator</OBJ><OPERATOR>.</OPERATOR><OO>userAgent</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
	platform <OPERATOR>=</OPERATOR> <OBJ>navigator</OBJ><OPERATOR>.</OPERATOR><OO>platform</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
	UA <OPERATOR>=</OPERATOR> <OBJ>ua</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>opera<REGEX_OPERATOR>|</REGEX_OPERATOR>ie<REGEX_OPERATOR>|</REGEX_OPERATOR>firefox<REGEX_OPERATOR>|</REGEX_OPERATOR>chrome<REGEX_OPERATOR>|</REGEX_OPERATOR>version<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\s</ESC><ESC>\/</ESC>:<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><ESC>\d</ESC><ESC>\.</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>safari<REGEX_OPERATOR>|</REGEX_OPERATOR>version<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\s</ESC><ESC>\/</ESC>:<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><ESC>\d</ESC><ESC>\.</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR>$<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>/</REGEX><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> [<KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> <STRING>'unknown'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>
	mode <OPERATOR>=</OPERATOR> UA[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'ie'</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentMode</OO><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> Browser <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Browser</OO> <OPERATOR>=</OPERATOR> {

	extend<OPERATOR>:</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>extend</OO><OPERATOR>,</OPERATOR>

	name<OPERATOR>:</OPERATOR> (UA[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'version'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> UA[<NUMERIC>3</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR> UA[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>

	version<OPERATOR>:</OPERATOR> mode <OPERATOR>||</OPERATOR> <FUNCTION>parseFloat</FUNCTION>((UA[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'opera'</STRING> <OPERATOR>&amp;&amp;</OPERATOR> UA[<NUMERIC>4</NUMERIC><CLOSER>])</CLOSER> <OPERATOR>?</OPERATOR> UA[<NUMERIC>4</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR> UA[<NUMERIC>2</NUMERIC><CLOSER>])</CLOSER><OPERATOR>,</OPERATOR>

	Platform<OPERATOR>:</OPERATOR> {
		name<OPERATOR>:</OPERATOR> <OBJ>ua</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/ip<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>ad<REGEX_OPERATOR>|</REGEX_OPERATOR>od<REGEX_OPERATOR>|</REGEX_OPERATOR>hone<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>/</REGEX><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'ios'</STRING> <OPERATOR>:</OPERATOR> (<OBJ>ua</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>webos<REGEX_OPERATOR>|</REGEX_OPERATOR>android<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>/</REGEX><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> <OBJ>platform</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/mac<REGEX_OPERATOR>|</REGEX_OPERATOR>win<REGEX_OPERATOR>|</REGEX_OPERATOR>linux/</REGEX><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> [<STRING>'other'</STRING><CLOSER>])</CLOSER>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	Features<OPERATOR>:</OPERATOR> {
		xpath<OPERATOR>:</OPERATOR> <OPERATOR>!!</OPERATOR>(<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>evaluate</OO><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
		air<OPERATOR>:</OPERATOR> <OPERATOR>!!</OPERATOR>(<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>runtime</OO><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
		query<OPERATOR>:</OPERATOR> <OPERATOR>!!</OPERATOR>(<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>querySelector</OO><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
		json<OPERATOR>:</OPERATOR> <OPERATOR>!!</OPERATOR>(<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>JSON</OO><CLOSER>)</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	Plugins<OPERATOR>:</OPERATOR> {<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

Browser[<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
Browser[<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>name</OO> <OPERATOR>+</OPERATOR> <FUNCTION>parseInt</FUNCTION>(<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>version</OO><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><CLOSER>)]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Platform</OO>[<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Platform</OO><OPERATOR>.</OPERATOR><OO>name</OO><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

<COMMENT>// Request</COMMENT>

<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Request</OO> <OPERATOR>=</OPERATOR> (<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

	<KEYWORD>var</KEYWORD> <CONSTANT>XMLHTTP</CONSTANT> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> XMLHttpRequest(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> <CONSTANT>MSXML2</CONSTANT> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> ActiveXObject(<STRING>'MSXML2.XMLHTTP'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> <CONSTANT>MSXML</CONSTANT> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> ActiveXObject(<STRING>'Microsoft.XMLHTTP'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>attempt</OO>(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<CONSTANT>XMLHTTP</CONSTANT>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <CONSTANT>XMLHTTP</CONSTANT><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<CONSTANT>MSXML2</CONSTANT>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <CONSTANT>MSXML2</CONSTANT><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<CONSTANT>MSXML</CONSTANT>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <CONSTANT>MSXML</CONSTANT><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Features</OO><OPERATOR>.</OPERATOR><OO>xhr</OO> <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR>(<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Request</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Flash detection</COMMENT>

<KEYWORD>var</KEYWORD> version <OPERATOR>=</OPERATOR> (<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>attempt</OO>(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>navigator</OBJ><OPERATOR>.</OPERATOR><OO>plugins</OO>[<STRING>'Shockwave Flash'</STRING><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>description</OO><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> ActiveXObject(<STRING>'ShockwaveFlash.ShockwaveFlash'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>GetVariable</OO>(<STRING>'$version'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER> <OPERATOR>||</OPERATOR> <STRING>'0 r0'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/<ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR>/<KEYWORD>g</KEYWORD></REGEX><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Plugins</OO><OPERATOR>.</OPERATOR><OO>Flash</OO> <OPERATOR>=</OPERATOR> {
	version<OPERATOR>:</OPERATOR> <TYPE>Number</TYPE>(version[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <STRING>'0.'</STRING> <OPERATOR>+</OPERATOR> version[<NUMERIC>1</NUMERIC><CLOSER>])</CLOSER> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
	build<OPERATOR>:</OPERATOR> <TYPE>Number</TYPE>(version[<NUMERIC>2</NUMERIC><CLOSER>])</CLOSER> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// String scripts</COMMENT>

<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(text<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>text<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> text<OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>execScript</OO><CLOSER>)</CLOSER>{
		<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>execScript</OO>(text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
		<KEYWORD>var</KEYWORD> script <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>'script'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>setAttribute</OO>(<STRING>'type'</STRING><OPERATOR>,</OPERATOR> <STRING>'text/javascript'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>text</OO> <OPERATOR>=</OPERATOR> text<OPERATOR>;</OPERATOR>
		<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>head</OO><OPERATOR>.</OPERATOR><OO>appendChild</OO>(script<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>head</OO><OPERATOR>.</OPERATOR><OO>removeChild</OO>(script<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> text<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>String</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(<STRING>'stripScripts'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(exec<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> scripts <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> text <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/&lt;script<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^&gt;<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>&gt;<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\s</ESC><ESC>\S</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>&lt;<ESC>\/</ESC>script&gt;/<KEYWORD>gi</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(all<OPERATOR>,</OPERATOR> code<CLOSER>)</CLOSER>{
		scripts <OPERATOR>+=</OPERATOR> code <OPERATOR>+</OPERATOR> <STRING>'<ESC>\n</ESC>'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <STRING>''</STRING><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (exec <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>(scripts<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (typeOf(exec<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'function'</STRING><CLOSER>)</CLOSER> exec(scripts<OPERATOR>,</OPERATOR> text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> text<OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Window, Document</COMMENT>

<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({
	Document<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Document</OO><OPERATOR>,</OPERATOR>
	Window<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Window</OO><OPERATOR>,</OPERATOR>
	Element<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Element</OO><OPERATOR>,</OPERATOR>
	Event<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Event</OO>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Window</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$constructor</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Type(<STRING>'Window'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$family</OO> <OPERATOR>=</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(<STRING>'window'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>hide</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Window</OBJ><OPERATOR>.</OPERATOR><OO>mirror</OO>(<KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> method<CLOSER>)</CLOSER>{
	<TYPE>window</TYPE>[name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> method<OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Document</OO> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>$constructor</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Type(<STRING>'Document'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>$family</OO> <OPERATOR>=</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(<STRING>'document'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>hide</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Document</OBJ><OPERATOR>.</OPERATOR><OO>mirror</OO>(<KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> method<CLOSER>)</CLOSER>{
	<TYPE>document</TYPE>[name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> method<OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>html</OO> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>;</OPERATOR>
<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>head</OO> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>'head'</STRING><CLOSER>)</CLOSER>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>execCommand</OO><CLOSER>)</CLOSER> <KEYWORD>try</KEYWORD> {
	<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>execCommand</OO>(<STRING>"BackgroundImageCache"</STRING><OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD> (e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER>

<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO><CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> unloadEvent <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>detachEvent</OO>(<STRING>'onunload'</STRING><OPERATOR>,</OPERATOR> unloadEvent<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>head</OO> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>html</OO> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>window</OO> <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO>(<STRING>'onunload'</STRING><OPERATOR>,</OPERATOR> unloadEvent<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER>

<COMMENT>// IE fails on collections and &lt;select&gt;.options (refers to &lt;select&gt;)</COMMENT>
<KEYWORD>var</KEYWORD> arrayFrom <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO><OPERATOR>;</OPERATOR>
<KEYWORD>try</KEYWORD> {
	arrayFrom(<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>html</OO><OPERATOR>.</OPERATOR><OO>childNodes</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{
	<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> item <OPERATOR>!=</OPERATOR> <STRING>'string'</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>isEnumerable</OO>(item<CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> typeOf(item<CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <STRING>'array'</STRING><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR> array <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(i<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>while</KEYWORD> (i<OPERATOR>--</OPERATOR><CLOSER>)</CLOSER> array[i<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> item[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> array<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> arrayFrom(item<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> prototype <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>,</OPERATOR>
		slice <OPERATOR>=</OPERATOR> <OBJ>prototype</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO><OPERATOR>;</OPERATOR>
	[<STRING>'pop'</STRING><OPERATOR>,</OPERATOR> <STRING>'push'</STRING><OPERATOR>,</OPERATOR> <STRING>'reverse'</STRING><OPERATOR>,</OPERATOR> <STRING>'shift'</STRING><OPERATOR>,</OPERATOR> <STRING>'sort'</STRING><OPERATOR>,</OPERATOR> <STRING>'splice'</STRING><OPERATOR>,</OPERATOR> <STRING>'unshift'</STRING><OPERATOR>,</OPERATOR> <STRING>'concat'</STRING><OPERATOR>,</OPERATOR> <STRING>'join'</STRING><OPERATOR>,</OPERATOR> <STRING>'slice'</STRING><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(name<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> method <OPERATOR>=</OPERATOR> prototype[name<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<TYPE>Array</TYPE>[name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>method</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(item<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <OBJ>slice</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(arguments<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Platform</OO><OPERATOR>.</OPERATOR><OO>ios</OO><CLOSER>)</CLOSER> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Platform</OO><OPERATOR>.</OPERATOR><OO>ipod</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Engine</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> setEngine <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> version<CLOSER>)</CLOSER>{
	<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Engine</OO><OPERATOR>.</OPERATOR><OO>name</OO> <OPERATOR>=</OPERATOR> name<OPERATOR>;</OPERATOR>
	<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Engine</OO>[name <OPERATOR>+</OPERATOR> version<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Engine</OO><OPERATOR>.</OPERATOR><OO>version</OO> <OPERATOR>=</OPERATOR> version<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>ie</OO><CLOSER>)</CLOSER>{
	<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Engine</OO><OPERATOR>.</OPERATOR><OO>trident</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>switch</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>version</OO><CLOSER>)</CLOSER>{
		<KEYWORD>case</KEYWORD> <NUMERIC>6</NUMERIC><OPERATOR>:</OPERATOR> setEngine(<STRING>'trident'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>case</KEYWORD> <NUMERIC>7</NUMERIC><OPERATOR>:</OPERATOR> setEngine(<STRING>'trident'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>case</KEYWORD> <NUMERIC>8</NUMERIC><OPERATOR>:</OPERATOR> setEngine(<STRING>'trident'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER>

<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>firefox</OO><CLOSER>)</CLOSER>{
	<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Engine</OO><OPERATOR>.</OPERATOR><OO>gecko</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>version</OO> <OPERATOR>&gt;=</OPERATOR> <NUMERIC>3</NUMERIC><CLOSER>)</CLOSER> setEngine(<STRING>'gecko'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>else</KEYWORD> setEngine(<STRING>'gecko'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER>

<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>safari</OO> <OPERATOR>||</OPERATOR> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>chrome</OO><CLOSER>)</CLOSER>{
	<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Engine</OO><OPERATOR>.</OPERATOR><OO>webkit</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>switch</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>version</OO><CLOSER>)</CLOSER>{
		<KEYWORD>case</KEYWORD> <NUMERIC>2</NUMERIC><OPERATOR>:</OPERATOR> setEngine(<STRING>'webkit'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>419</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>case</KEYWORD> <NUMERIC>3</NUMERIC><OPERATOR>:</OPERATOR> setEngine(<STRING>'webkit'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>420</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>case</KEYWORD> <NUMERIC>4</NUMERIC><OPERATOR>:</OPERATOR> setEngine(<STRING>'webkit'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>525</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER>

<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>opera</OO><CLOSER>)</CLOSER>{
	<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Engine</OO><OPERATOR>.</OPERATOR><OO>presto</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>version</OO> <OPERATOR>&gt;=</OPERATOR> <NUMERIC>9.6</NUMERIC><CLOSER>)</CLOSER> setEngine(<STRING>'presto'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>960</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>version</OO> <OPERATOR>&gt;=</OPERATOR> <NUMERIC>9.5</NUMERIC><CLOSER>)</CLOSER> setEngine(<STRING>'presto'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>950</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>else</KEYWORD> setEngine(<STRING>'presto'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>925</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER>

<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>name</OO> <OPERATOR>==</OPERATOR> <STRING>'unknown'</STRING><CLOSER>)</CLOSER>{
	<KEYWORD>switch</KEYWORD> ((<OBJ>ua</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>webkit<REGEX_OPERATOR>|</REGEX_OPERATOR>khtml<REGEX_OPERATOR>|</REGEX_OPERATOR>gecko<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>/</REGEX><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> [<CLOSER>])</CLOSER>[<NUMERIC>0</NUMERIC><CLOSER>])</CLOSER>{
		<KEYWORD>case</KEYWORD> <STRING>'webkit'</STRING><OPERATOR>:</OPERATOR>
		<KEYWORD>case</KEYWORD> <STRING>'khtml'</STRING><OPERATOR>:</OPERATOR>
			<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Engine</OO><OPERATOR>.</OPERATOR><OO>webkit</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>case</KEYWORD> <STRING>'gecko'</STRING><OPERATOR>:</OPERATOR>
			<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Engine</OO><OPERATOR>.</OPERATOR><OO>gecko</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$exec</OO> <OPERATOR>=</OPERATOR> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Event</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains the Event Class, to make the event object cross-browser.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Window, Document, Array, Function, String, Object]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Event</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<KEYWORD>var</KEYWORD> Event <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Type(<STRING>'Event'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(event<OPERATOR>,</OPERATOR> win<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>win<CLOSER>)</CLOSER> win <OPERATOR>=</OPERATOR> <TYPE>window</TYPE><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> doc <OPERATOR>=</OPERATOR> <OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>;</OPERATOR>
	event <OPERATOR>=</OPERATOR> event <OPERATOR>||</OPERATOR> <OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>$extended</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> event<OPERATOR>;</OPERATOR>
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$extended</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>,</OPERATOR>
		target <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>target</OO> <OPERATOR>||</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>srcElement</OO><OPERATOR>,</OPERATOR>
		page <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
		client <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>while</KEYWORD> (target <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>target</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>==</OPERATOR> <NUMERIC>3</NUMERIC><CLOSER>)</CLOSER> target <OPERATOR>=</OPERATOR> <OBJ>target</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (<OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>'key'</STRING><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> code <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>which</OO> <OPERATOR>||</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>keyCode</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> key <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>keyOf</OO>(<OBJ>Event</OBJ><OPERATOR>.</OPERATOR><OO>Keys</OO><OPERATOR>,</OPERATOR> code<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (type <OPERATOR>==</OPERATOR> <STRING>'keydown'</STRING><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> fKey <OPERATOR>=</OPERATOR> code <OPERATOR>-</OPERATOR> <NUMERIC>111</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (fKey <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> fKey <OPERATOR>&lt;</OPERATOR> <NUMERIC>13</NUMERIC><CLOSER>)</CLOSER> key <OPERATOR>=</OPERATOR> <STRING>'f'</STRING> <OPERATOR>+</OPERATOR> fKey<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>key<CLOSER>)</CLOSER> key <OPERATOR>=</OPERATOR> <OBJ>String</OBJ><OPERATOR>.</OPERATOR><OO>fromCharCode</OO>(code<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<REGEX>/click<REGEX_OPERATOR>|</REGEX_OPERATOR>mouse<REGEX_OPERATOR>|</REGEX_OPERATOR>menu/<KEYWORD>i</KEYWORD></REGEX><CLOSER>))</CLOSER>{
		doc <OPERATOR>=</OPERATOR> (<OPERATOR>!</OPERATOR><OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>compatMode</OO> <OPERATOR>||</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>compatMode</OO> <OPERATOR>==</OPERATOR> <STRING>'CSS1Compat'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>html</OO> <OPERATOR>:</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>;</OPERATOR>
		page <OPERATOR>=</OPERATOR> {
			x<OPERATOR>:</OPERATOR> (<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageX</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageX</OO> <OPERATOR>:</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>clientX</OO> <OPERATOR>+</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO><OPERATOR>,</OPERATOR>
			y<OPERATOR>:</OPERATOR> (<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageY</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageY</OO> <OPERATOR>:</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>clientY</OO> <OPERATOR>+</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		client <OPERATOR>=</OPERATOR> {
			x<OPERATOR>:</OPERATOR> (<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageX</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageX</OO> <OPERATOR>-</OPERATOR> <OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>pageXOffset</OO> <OPERATOR>:</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>clientX</OO><OPERATOR>,</OPERATOR>
			y<OPERATOR>:</OPERATOR> (<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageY</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageY</OO> <OPERATOR>-</OPERATOR> <OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>pageYOffset</OO> <OPERATOR>:</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>clientY</OO>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<REGEX>/DOMMouseScroll<REGEX_OPERATOR>|</REGEX_OPERATOR>mousewheel/</REGEX><CLOSER>))</CLOSER>{
			<KEYWORD>var</KEYWORD> wheel <OPERATOR>=</OPERATOR> (<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>wheelDelta</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>wheelDelta</OO> <OPERATOR>/</OPERATOR> <NUMERIC>120</NUMERIC> <OPERATOR>:</OPERATOR> <OPERATOR>-</OPERATOR>(<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>detail</OO> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>/</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>var</KEYWORD> rightClick <OPERATOR>=</OPERATOR> (<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>which</OO> <OPERATOR>==</OPERATOR> <NUMERIC>3</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> (<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>button</OO> <OPERATOR>==</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
			related <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<REGEX>/over<REGEX_OPERATOR>|</REGEX_OPERATOR>out/</REGEX><CLOSER>))</CLOSER>{
			related <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>relatedTarget</OO> <OPERATOR>||</OPERATOR> event[(type <OPERATOR>==</OPERATOR> <STRING>'mouseover'</STRING> <OPERATOR>?</OPERATOR> <STRING>'from'</STRING> <OPERATOR>:</OPERATOR> <STRING>'to'</STRING><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>'Element'</STRING><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> testRelated <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
				<KEYWORD>while</KEYWORD> (related <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>related</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>==</OPERATOR> <NUMERIC>3</NUMERIC><CLOSER>)</CLOSER> related <OPERATOR>=</OPERATOR> <OBJ>related</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> hasRelated <OPERATOR>=</OPERATOR> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>firefox2</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>testRelated</OBJ><OPERATOR>.</OPERATOR><OO>attempt</OO>(<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> testRelated(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			related <OPERATOR>=</OPERATOR> (hasRelated<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> related <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<REGEX>/gesture<REGEX_OPERATOR>|</REGEX_OPERATOR>touch/<KEYWORD>i</KEYWORD></REGEX><CLOSER>))</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>rotation</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>rotation</OO><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>scale</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>scale</OO><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>targetTouches</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>targetTouches</OO><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>changedTouches</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>changedTouches</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> touches <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>touches</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>touches</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (touches <OPERATOR>&amp;&amp;</OPERATOR> touches[<NUMERIC>0</NUMERIC><CLOSER>])</CLOSER>{
			<KEYWORD>var</KEYWORD> touch <OPERATOR>=</OPERATOR> touches[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			page <OPERATOR>=</OPERATOR> {x<OPERATOR>:</OPERATOR> <OBJ>touch</OBJ><OPERATOR>.</OPERATOR><OO>pageX</OO><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <OBJ>touch</OBJ><OPERATOR>.</OPERATOR><OO>pageY</OO><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			client <OPERATOR>=</OPERATOR> {x<OPERATOR>:</OPERATOR> <OBJ>touch</OBJ><OPERATOR>.</OPERATOR><OO>clientX</OO><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <OBJ>touch</OBJ><OPERATOR>.</OPERATOR><OO>clientY</OO><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER>

	<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> {
		event<OPERATOR>:</OPERATOR> event<OPERATOR>,</OPERATOR>
		type<OPERATOR>:</OPERATOR> type<OPERATOR>,</OPERATOR>

		page<OPERATOR>:</OPERATOR> page<OPERATOR>,</OPERATOR>
		client<OPERATOR>:</OPERATOR> client<OPERATOR>,</OPERATOR>
		rightClick<OPERATOR>:</OPERATOR> rightClick<OPERATOR>,</OPERATOR>

		wheel<OPERATOR>:</OPERATOR> wheel<OPERATOR>,</OPERATOR>

		relatedTarget<OPERATOR>:</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(related<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
		target<OPERATOR>:</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(target<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

		code<OPERATOR>:</OPERATOR> code<OPERATOR>,</OPERATOR>
		key<OPERATOR>:</OPERATOR> key<OPERATOR>,</OPERATOR>

		shift<OPERATOR>:</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>shiftKey</OO><OPERATOR>,</OPERATOR>
		control<OPERATOR>:</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>ctrlKey</OO><OPERATOR>,</OPERATOR>
		alt<OPERATOR>:</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>altKey</OO><OPERATOR>,</OPERATOR>
		meta<OPERATOR>:</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>metaKey</OO>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Event</OBJ><OPERATOR>.</OPERATOR><OO>Keys</OO> <OPERATOR>=</OPERATOR> {
	<STRING>'enter'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR>
	<STRING>'up'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>38</NUMERIC><OPERATOR>,</OPERATOR>
	<STRING>'down'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>40</NUMERIC><OPERATOR>,</OPERATOR>
	<STRING>'left'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>37</NUMERIC><OPERATOR>,</OPERATOR>
	<STRING>'right'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>39</NUMERIC><OPERATOR>,</OPERATOR>
	<STRING>'esc'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR>
	<STRING>'space'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>32</NUMERIC><OPERATOR>,</OPERATOR>
	<STRING>'backspace'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR>
	<STRING>'tab'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR>
	<STRING>'delete'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>46</NUMERIC>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Event</OBJ><OPERATOR>.</OPERATOR><OO>Keys</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Hash(<OBJ>Event</OBJ><OPERATOR>.</OPERATOR><OO>Keys</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<OBJ>Event</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	stop<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>stopPropagation</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>preventDefault</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	stopPropagation<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>stopPropagation</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>stopPropagation</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>cancelBubble</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	preventDefault<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>preventDefault</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>preventDefault</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>returnValue</OO> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Class</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains the Class Function for easily creating, extending, and implementing reusable Classes.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Array, String, Function, Number]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Class</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<KEYWORD>var</KEYWORD> Class <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Class</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Type(<STRING>'Class'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(params<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (instanceOf(params<OPERATOR>,</OPERATOR> Function<CLOSER>))</CLOSER> params <OPERATOR>=</OPERATOR> {initialize<OPERATOR>:</OPERATOR> params<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> newClass <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		reset(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>newClass</OBJ><OPERATOR>.</OPERATOR><OO>$prototyping</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$caller</OO> <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> value <OPERATOR>=</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>initialize</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>initialize</OO><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$caller</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>caller</OO> <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> value<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>extend</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>implement</OO>(params<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<OBJ>newClass</OBJ><OPERATOR>.</OPERATOR><OO>$constructor</OO> <OPERATOR>=</OPERATOR> Class<OPERATOR>;</OPERATOR>
	<OBJ>newClass</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>$constructor</OO> <OPERATOR>=</OPERATOR> newClass<OPERATOR>;</OPERATOR>
	<OBJ>newClass</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>parent</OO> <OPERATOR>=</OPERATOR> parent<OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> newClass<OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$caller</OO><CLOSER>)</CLOSER> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE>(<STRING>'The method "parent" cannot be called.'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> name <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$caller</OO><OPERATOR>.</OPERATOR><OO>$name</OO><OPERATOR>,</OPERATOR>
		parent <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$caller</OO><OPERATOR>.</OPERATOR><OO>$owner</OO><OPERATOR>.</OPERATOR><OO>parent</OO><OPERATOR>,</OPERATOR>
		previous <OPERATOR>=</OPERATOR> (parent<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO>[name<CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>previous<CLOSER>)</CLOSER> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE>(<STRING>'The method "'</STRING> <OPERATOR>+</OPERATOR> name <OPERATOR>+</OPERATOR> <STRING>'" has no parent.'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <OBJ>previous</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> reset <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(object<CLOSER>)</CLOSER>{
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> object<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> value <OPERATOR>=</OPERATOR> object[key<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>switch</KEYWORD> (typeOf(value<CLOSER>))</CLOSER>{
			<KEYWORD>case</KEYWORD> <STRING>'object'</STRING><OPERATOR>:</OPERATOR>
				<KEYWORD>var</KEYWORD> F <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>F</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
				object[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> reset(<KEYWORD>new</KEYWORD> F<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'array'</STRING><OPERATOR>:</OPERATOR> object[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> object<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> wrap <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(self<OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> method<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OBJ>method</OBJ><OPERATOR>.</OPERATOR><OO>$origin</OO><CLOSER>)</CLOSER> method <OPERATOR>=</OPERATOR> <OBJ>method</OBJ><OPERATOR>.</OPERATOR><OO>$origin</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> wrapper <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>method</OBJ><OPERATOR>.</OPERATOR><OO>$protected</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$caller</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> <TYPE>Error</TYPE>(<STRING>'The method "'</STRING> <OPERATOR>+</OPERATOR> key <OPERATOR>+</OPERATOR> <STRING>'" cannot be called.'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> caller <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>caller</OO><OPERATOR>,</OPERATOR> current <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$caller</OO><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>caller</OO> <OPERATOR>=</OPERATOR> current<OPERATOR>;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$caller</OO> <OPERATOR>=</OPERATOR> wrapper<OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> result <OPERATOR>=</OPERATOR> <OBJ>method</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$caller</OO> <OPERATOR>=</OPERATOR> current<OPERATOR>;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>caller</OO> <OPERATOR>=</OPERATOR> caller<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> result<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>extend</OO>({$owner<OPERATOR>:</OPERATOR> self<OPERATOR>,</OPERATOR> $origin<OPERATOR>:</OPERATOR> method<OPERATOR>,</OPERATOR> $name<OPERATOR>:</OPERATOR> key<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> wrapper<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> implement <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(key<OPERATOR>,</OPERATOR> value<OPERATOR>,</OPERATOR> retain<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OBJ>Class</OBJ><OPERATOR>.</OPERATOR><OO>Mutators</OO><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(key<CLOSER>))</CLOSER>{
		value <OPERATOR>=</OPERATOR> <OBJ>Class</OBJ><OPERATOR>.</OPERATOR><OO>Mutators</OO>[key<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (value <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>if</KEYWORD> (typeOf(value<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'function'</STRING><CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>$hidden</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO>[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> (retain<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> value <OPERATOR>:</OPERATOR> wrap(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
		<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> getInstance <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(klass<CLOSER>)</CLOSER>{
	<OBJ>klass</OBJ><OPERATOR>.</OPERATOR><OO>$prototyping</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> proto <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> klass<OPERATOR>;</OPERATOR>
	<KEYWORD>delete</KEYWORD> <OBJ>klass</OBJ><OPERATOR>.</OPERATOR><OO>$prototyping</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> proto<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Class</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(<STRING>'implement'</STRING><OPERATOR>,</OPERATOR> <OBJ>implement</OBJ><OPERATOR>.</OPERATOR><OO>overloadSetter</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Class</OBJ><OPERATOR>.</OPERATOR><OO>Mutators</OO> <OPERATOR>=</OPERATOR> {

	Extends<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(parent<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO> <OPERATOR>=</OPERATOR> parent<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO> <OPERATOR>=</OPERATOR> getInstance(parent<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	Implements<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(items<CLOSER>)</CLOSER>{
		<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(items<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> instance <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> item<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> instance<CLOSER>)</CLOSER> <OBJ>implement</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> instance[key<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Class.Extras</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains Utility Classes that can be implemented into your own Classes to ease the execution of many common tasks.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Class</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: [Class.Extras, Chain, Events, Options]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Chain</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	$chain<OPERATOR>:</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>

	chain<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$chain</OO><OPERATOR>.</OPERATOR><OO>append</OO>(<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>flatten</OO>(arguments<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	callChain<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$chain</OO><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$chain</OO><OPERATOR>.</OPERATOR><OO>shift</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	clearChain<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$chain</OO><OPERATOR>.</OPERATOR><OO>empty</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> removeOn <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(string<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>string</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/^on<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>A-Z<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>/</REGEX><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(full<OPERATOR>,</OPERATOR> first<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>first</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Events</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	$events<OPERATOR>:</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	addEvent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(type<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> internal<CLOSER>)</CLOSER>{
		type <OPERATOR>=</OPERATOR> removeOn(type<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<COMMENT>/*&lt;1.2compat&gt;*/</COMMENT>
		<KEYWORD>if</KEYWORD> (fn <OPERATOR>==</OPERATOR> $empty<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<COMMENT>/*&lt;/1.2compat&gt;*/</COMMENT>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$events</OO>[type<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$events</OO>[type<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> [<CLOSER>])</CLOSER><OPERATOR>.</OPERATOR><OO>include</OO>(fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (internal<CLOSER>)</CLOSER> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>internal</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	addEvents<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(events<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> type <KEYWORD>in</KEYWORD> events<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addEvent</OO>(type<OPERATOR>,</OPERATOR> events[type<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	fireEvent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(type<OPERATOR>,</OPERATOR> args<OPERATOR>,</OPERATOR> delay<CLOSER>)</CLOSER>{
		type <OPERATOR>=</OPERATOR> removeOn(type<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> events <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$events</OO>[type<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>events<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		args <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>events</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(fn<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (delay<CLOSER>)</CLOSER> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>delay</OO>(delay<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
	
	removeEvent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(type<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER>{
		type <OPERATOR>=</OPERATOR> removeOn(type<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> events <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$events</OO>[type<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (events <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>internal</OO><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> index <OPERATOR>=</OPERATOR>  <OBJ>events</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (index <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>delete</KEYWORD> events[index<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	removeEvents<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(events<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> type<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (typeOf(events<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'object'</STRING><CLOSER>)</CLOSER>{
			<KEYWORD>for</KEYWORD> (type <KEYWORD>in</KEYWORD> events<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeEvent</OO>(type<OPERATOR>,</OPERATOR> events[type<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>if</KEYWORD> (events<CLOSER>)</CLOSER> events <OPERATOR>=</OPERATOR> removeOn(events<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (type <KEYWORD>in</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$events</OO><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (events <OPERATOR>&amp;&amp;</OPERATOR> events <OPERATOR>!=</OPERATOR> type<CLOSER>)</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> fns <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>$events</OO>[type<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>fns</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeEvent</OO>(type<OPERATOR>,</OPERATOR> fns[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Options</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	setOptions<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> options <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO> <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> [{<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>append</OO>(arguments<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addEvent</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> option <KEYWORD>in</KEYWORD> options<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (typeOf(options[option<CLOSER>])</CLOSER> <OPERATOR>!=</OPERATOR> <STRING>'function'</STRING> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>(<REGEX>/^on<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>A-Z<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER>/</REGEX><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>test</OO>(option<CLOSER>))</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addEvent</OO>(option<OPERATOR>,</OPERATOR> options[option<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>delete</KEYWORD> options[option<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT>name: Slick.Parser</COMMENT>
<COMMENT>description: Standalone CSS3 Selector parser</COMMENT>
<COMMENT>provides: Slick.Parser</COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<KEYWORD>var</KEYWORD> parsed<OPERATOR>,</OPERATOR>
	separatorIndex<OPERATOR>,</OPERATOR>
	combinatorIndex<OPERATOR>,</OPERATOR>
	reversed<OPERATOR>,</OPERATOR>
	cache <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
	reverseCache <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
	reUnescape <OPERATOR>=</OPERATOR> <REGEX>/<ESC>\\</ESC>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> parse <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(expression<OPERATOR>,</OPERATOR> isReversed<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (expression <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OBJ>expression</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO> <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> expression<OPERATOR>;</OPERATOR>
	expression <OPERATOR>=</OPERATOR> (<STRING>''</STRING> <OPERATOR>+</OPERATOR> expression<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/^<ESC>\s</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\s</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR>$/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	reversed <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR>isReversed<OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> currentCache <OPERATOR>=</OPERATOR> (reversed<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> reverseCache <OPERATOR>:</OPERATOR> cache<OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (currentCache[expression<CLOSER>])</CLOSER> <KEYWORD>return</KEYWORD> currentCache[expression<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	parsed <OPERATOR>=</OPERATOR> {Slick<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR> expressions<OPERATOR>:</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> raw<OPERATOR>:</OPERATOR> expression<OPERATOR>,</OPERATOR> reverse<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> parse(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>raw</OO><OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}}</CLOSER><OPERATOR>;</OPERATOR>
	separatorIndex <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	<KEYWORD>while</KEYWORD> (expression <OPERATOR>!=</OPERATOR> (expression <OPERATOR>=</OPERATOR> <OBJ>expression</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(regexp<OPERATOR>,</OPERATOR> parser<CLOSER>)))</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> currentCache[expression<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> (reversed<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> reverse(parsed<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> parsed<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> reverseCombinator <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(combinator<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (combinator <OPERATOR>===</OPERATOR> <STRING>'!'</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <STRING>' '</STRING><OPERATOR>;</OPERATOR>
	<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (combinator <OPERATOR>===</OPERATOR> <STRING>' '</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <STRING>'!'</STRING><OPERATOR>;</OPERATOR>
	<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ((<REGEX>/^!/</REGEX><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>test</OO>(combinator<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>combinator</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/^!/</REGEX><OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>else</KEYWORD> <KEYWORD>return</KEYWORD> <STRING>'!'</STRING> <OPERATOR>+</OPERATOR> combinator<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> reverse <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> expressions <OPERATOR>=</OPERATOR> <OBJ>expression</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <OBJ>expressions</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> exp <OPERATOR>=</OPERATOR> expressions[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> last <OPERATOR>=</OPERATOR> {parts<OPERATOR>:</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> tag<OPERATOR>:</OPERATOR> <STRING>'*'</STRING><OPERATOR>,</OPERATOR> combinator<OPERATOR>:</OPERATOR> reverseCombinator(exp[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>combinator</OO><CLOSER>)}</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> j <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;</OPERATOR> <OBJ>exp</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> cexp <OPERATOR>=</OPERATOR> exp[j<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>cexp</OBJ><OPERATOR>.</OPERATOR><OO>reverseCombinator</OO><CLOSER>)</CLOSER> <OBJ>cexp</OBJ><OPERATOR>.</OPERATOR><OO>reverseCombinator</OO> <OPERATOR>=</OPERATOR> <STRING>' '</STRING><OPERATOR>;</OPERATOR>
			<OBJ>cexp</OBJ><OPERATOR>.</OPERATOR><OO>combinator</OO> <OPERATOR>=</OPERATOR> <OBJ>cexp</OBJ><OPERATOR>.</OPERATOR><OO>reverseCombinator</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>delete</KEYWORD> <OBJ>cexp</OBJ><OPERATOR>.</OPERATOR><OO>reverseCombinator</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<OBJ>exp</OBJ><OPERATOR>.</OPERATOR><OO>reverse</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>push</OO>(last<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> expression<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> escapeRegExp <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(string<CLOSER>)</CLOSER>{<COMMENT>// Credit: XRegExp 0.6.1 (c) 2007-2008 Steven Levithan &lt;http://stevenlevithan.com/regex/xregexp/&gt; MIT License</COMMENT>
	<KEYWORD>return</KEYWORD> <OBJ>string</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>-<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\]</ESC>{}<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_OPERATOR>.</REGEX_OPERATOR><ESC>\\</ESC>^$<REGEX_OPERATOR>|</REGEX_OPERATOR>,#<ESC>\s</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>"<ESC>\\</ESC>$&amp;"</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> regexp <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(
<COMMENT>/*</COMMENT>
<COMMENT>#!/usr/bin/env ruby</COMMENT>
<COMMENT>puts "\t\t" + DATA.read.gsub(/\(\?x\)|\s+#.*$|\s+|\\$|\\n/,'')</COMMENT>
<COMMENT>__END__</COMMENT>
<COMMENT>	"(?x)^(?:\</COMMENT>
<COMMENT>	  \\s* ( , ) \\s*               # Separator          \n\</COMMENT>
<COMMENT>	| \\s* ( &lt;combinator&gt;+ ) \\s*   # Combinator         \n\</COMMENT>
<COMMENT>	|      ( \\s+ )                 # CombinatorChildren \n\</COMMENT>
<COMMENT>	|      ( &lt;unicode&gt;+ | \\* )     # Tag                \n\</COMMENT>
<COMMENT>	| \\#  ( &lt;unicode&gt;+       )     # ID                 \n\</COMMENT>
<COMMENT>	| \\.  ( &lt;unicode&gt;+       )     # ClassName          \n\</COMMENT>
<COMMENT>	|                               # Attribute          \n\</COMMENT>
<COMMENT>	\\[  \</COMMENT>
<COMMENT>		\\s* (&lt;unicode1&gt;+)  (?:  \</COMMENT>
<COMMENT>			\\s* ([*^$!~|]?=)  (?:  \</COMMENT>
<COMMENT>				\\s* (?:\</COMMENT>
<COMMENT>					([\"']?)(.*?)\\9 \</COMMENT>
<COMMENT>				)\</COMMENT>
<COMMENT>			)  \</COMMENT>
<COMMENT>		)?  \\s*  \</COMMENT>
<COMMENT>	\\](?!\\]) \n\</COMMENT>
<COMMENT>	|   :+ ( &lt;unicode&gt;+ )(?:\</COMMENT>
<COMMENT>	\\( (?:\</COMMENT>
<COMMENT>		(?:([\"'])([^\\12]*)\\12)|((?:\\([^)]+\\)|[^()]*)+)\</COMMENT>
<COMMENT>	) \\)\</COMMENT>
<COMMENT>	)?\</COMMENT>
<COMMENT>	)"</COMMENT>
<COMMENT>*/</COMMENT>
	<STRING>"^(?:<ESC>\\</ESC>s*(,)<ESC>\\</ESC>s*|<ESC>\\</ESC>s*(&lt;combinator&gt;+)<ESC>\\</ESC>s*|(<ESC>\\</ESC>s+)|(&lt;unicode&gt;+|<ESC>\\</ESC>*)|<ESC>\\</ESC>#(&lt;unicode&gt;+)|<ESC>\\</ESC>.(&lt;unicode&gt;+)|<ESC>\\</ESC>[<ESC>\\</ESC>s*(&lt;unicode1&gt;+)(?:<ESC>\\</ESC>s*([*^$!~|]?=)(?:<ESC>\\</ESC>s*(?:([<ESC>\"</ESC>']?)(.*?)<ESC>\\</ESC>9)))?<ESC>\\</ESC>s*<ESC>\\</ESC>](?!<ESC>\\</ESC>])|:+(&lt;unicode&gt;+)(?:<ESC>\\</ESC>((?:(?:([<ESC>\"</ESC>'])([^<ESC>\\</ESC>12]*)<ESC>\\</ESC>12)|((?:<ESC>\\</ESC>([^)]+<ESC>\\</ESC>)|[^()]*)+))<ESC>\\</ESC>))?)"</STRING>
	<OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/&lt;combinator&gt;/</REGEX><OPERATOR>,</OPERATOR> <STRING>'['</STRING> <OPERATOR>+</OPERATOR> escapeRegExp(<STRING>"&gt;+~`!@$%^&amp;={}<ESC>\\</ESC>;&lt;/"</STRING><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>']'</STRING><CLOSER>)</CLOSER>
	<OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/&lt;unicode&gt;/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>'(?:[<ESC>\\</ESC>w<ESC>\\</ESC>u00a1-<ESC>\\</ESC>uFFFF-]|<ESC>\\</ESC><ESC>\\</ESC>[^<ESC>\\</ESC>s0-9a-f])'</STRING><CLOSER>)</CLOSER>
	<OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/&lt;unicode1&gt;/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>'(?:[:<ESC>\\</ESC>w<ESC>\\</ESC>u00a1-<ESC>\\</ESC>uFFFF-]|<ESC>\\</ESC><ESC>\\</ESC>[^<ESC>\\</ESC>s0-9a-f])'</STRING><CLOSER>)</CLOSER>
<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> parser(
	rawMatch<OPERATOR>,</OPERATOR>

	separator<OPERATOR>,</OPERATOR>
	combinator<OPERATOR>,</OPERATOR>
	combinatorChildren<OPERATOR>,</OPERATOR>

	tagName<OPERATOR>,</OPERATOR>
	id<OPERATOR>,</OPERATOR>
	className<OPERATOR>,</OPERATOR>

	attributeKey<OPERATOR>,</OPERATOR>
	attributeOperator<OPERATOR>,</OPERATOR>
	attributeQuote<OPERATOR>,</OPERATOR>
	attributeValue<OPERATOR>,</OPERATOR>

	pseudoClass<OPERATOR>,</OPERATOR>
	pseudoQuote<OPERATOR>,</OPERATOR>
	pseudoClassQuotedValue<OPERATOR>,</OPERATOR>
	pseudoClassValue
<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (separator <OPERATOR>||</OPERATOR> separatorIndex <OPERATOR>===</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>{
		<OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO>[<OPERATOR>++</OPERATOR>separatorIndex<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		combinatorIndex <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (separator<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <STRING>''</STRING><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>if</KEYWORD> (combinator <OPERATOR>||</OPERATOR> combinatorChildren <OPERATOR>||</OPERATOR> combinatorIndex <OPERATOR>===</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>{
		combinator <OPERATOR>=</OPERATOR> combinator <OPERATOR>||</OPERATOR> <STRING>' '</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> currentSeparator <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO>[separatorIndex<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (reversed <OPERATOR>&amp;&amp;</OPERATOR> currentSeparator[combinatorIndex<CLOSER>])</CLOSER>
			currentSeparator[combinatorIndex<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>reverseCombinator</OO> <OPERATOR>=</OPERATOR> reverseCombinator(combinator<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		currentSeparator[<OPERATOR>++</OPERATOR>combinatorIndex<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> {combinator<OPERATOR>:</OPERATOR> combinator<OPERATOR>,</OPERATOR> tag<OPERATOR>:</OPERATOR> <STRING>'*'</STRING><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>var</KEYWORD> currentParsed <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO>[separatorIndex<CLOSER>]</CLOSER>[combinatorIndex<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (tagName<CLOSER>)</CLOSER>{
		<OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>tag</OO> <OPERATOR>=</OPERATOR> <OBJ>tagName</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(reUnescape<OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (id<CLOSER>)</CLOSER>{
		<OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>id</OO> <OPERATOR>=</OPERATOR> <OBJ>id</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(reUnescape<OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (className<CLOSER>)</CLOSER>{
		className <OPERATOR>=</OPERATOR> <OBJ>className</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(reUnescape<OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>classList</OO><CLOSER>)</CLOSER> <OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>classList</OO> <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>classes</OO><CLOSER>)</CLOSER> <OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>classes</OO> <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>classList</OO><OPERATOR>.</OPERATOR><OO>push</OO>(className<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>classes</OO><OPERATOR>.</OPERATOR><OO>push</OO>({
			value<OPERATOR>:</OPERATOR> className<OPERATOR>,</OPERATOR>
			regexp<OPERATOR>:</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(<STRING>'(^|<ESC>\\</ESC>s)'</STRING> <OPERATOR>+</OPERATOR> escapeRegExp(className<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>'(<ESC>\\</ESC>s|$)'</STRING><CLOSER>)</CLOSER>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (pseudoClass<CLOSER>)</CLOSER>{
		pseudoClassValue <OPERATOR>=</OPERATOR> pseudoClassValue <OPERATOR>||</OPERATOR> pseudoClassQuotedValue<OPERATOR>;</OPERATOR>
		pseudoClassValue <OPERATOR>=</OPERATOR> pseudoClassValue <OPERATOR>?</OPERATOR> <OBJ>pseudoClassValue</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(reUnescape<OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>pseudos</OO><CLOSER>)</CLOSER> <OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>pseudos</OO> <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>pseudos</OO><OPERATOR>.</OPERATOR><OO>push</OO>({
			key<OPERATOR>:</OPERATOR> <OBJ>pseudoClass</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(reUnescape<OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
			value<OPERATOR>:</OPERATOR> pseudoClassValue
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (attributeKey<CLOSER>)</CLOSER>{
		attributeKey <OPERATOR>=</OPERATOR> <OBJ>attributeKey</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(reUnescape<OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		attributeValue <OPERATOR>=</OPERATOR> (attributeValue <OPERATOR>||</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>replace</OO>(reUnescape<OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> test<OPERATOR>,</OPERATOR> regexp<OPERATOR>;</OPERATOR>

		<KEYWORD>switch</KEYWORD> (attributeOperator<CLOSER>)</CLOSER>{
			<KEYWORD>case</KEYWORD> <STRING>'^='</STRING> <OPERATOR>:</OPERATOR> regexp <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(       <STRING>'^'</STRING><OPERATOR>+</OPERATOR> escapeRegExp(attributeValue<CLOSER>)</CLOSER>            <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'$='</STRING> <OPERATOR>:</OPERATOR> regexp <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(            escapeRegExp(attributeValue<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR><STRING>'$'</STRING>       <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'~='</STRING> <OPERATOR>:</OPERATOR> regexp <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>( <STRING>'(^|<ESC>\\</ESC>s)'</STRING><OPERATOR>+</OPERATOR> escapeRegExp(attributeValue<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR><STRING>'(<ESC>\\</ESC>s|$)'</STRING> <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'|='</STRING> <OPERATOR>:</OPERATOR> regexp <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(       <STRING>'^'</STRING><OPERATOR>+</OPERATOR> escapeRegExp(attributeValue<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR><STRING>'(-|$)'</STRING>   <CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD>  <STRING>'='</STRING> <OPERATOR>:</OPERATOR> test <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
				<KEYWORD>return</KEYWORD> attributeValue <OPERATOR>==</OPERATOR> value<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'*='</STRING> <OPERATOR>:</OPERATOR> test <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
				<KEYWORD>return</KEYWORD> value <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(attributeValue<CLOSER>)</CLOSER> <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'!='</STRING> <OPERATOR>:</OPERATOR> test <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
				<KEYWORD>return</KEYWORD> attributeValue <OPERATOR>!=</OPERATOR> value<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>default</KEYWORD>   <OPERATOR>:</OPERATOR> test <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
				<KEYWORD>return</KEYWORD> <OPERATOR>!!</OPERATOR>value<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<KEYWORD>if</KEYWORD> (attributeValue <OPERATOR>==</OPERATOR> <STRING>''</STRING> <OPERATOR>&amp;&amp;</OPERATOR> (<REGEX>/^<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>$^<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER>=$/</REGEX><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>test</OO>(attributeOperator<CLOSER>))</CLOSER> test <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>test<CLOSER>)</CLOSER> test <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> value <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>regexp</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>attributes</OO><CLOSER>)</CLOSER> <OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>attributes</OO> <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>currentParsed</OBJ><OPERATOR>.</OPERATOR><OO>attributes</OO><OPERATOR>.</OPERATOR><OO>push</OO>({
			key<OPERATOR>:</OPERATOR> attributeKey<OPERATOR>,</OPERATOR>
			operator<OPERATOR>:</OPERATOR> attributeOperator<OPERATOR>,</OPERATOR>
			value<OPERATOR>:</OPERATOR> attributeValue<OPERATOR>,</OPERATOR>
			test<OPERATOR>:</OPERATOR> test
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

	<CLOSER>}</CLOSER>

	<KEYWORD>return</KEYWORD> <STRING>''</STRING><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Slick NS</COMMENT>

<KEYWORD>var</KEYWORD> Slick <OPERATOR>=</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO> <OPERATOR>||</OPERATOR> {<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>parse</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> parse(expression<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>escapeRegExp</OO> <OPERATOR>=</OPERATOR> escapeRegExp<OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO> <OPERATOR>=</OPERATOR> Slick<OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER><OPERATOR>.</OPERATOR><OO>apply</OO>(<COMMENT>/*&lt;CommonJS&gt;*/</COMMENT>(<KEYWORD>typeof</KEYWORD> exports <OPERATOR>!=</OPERATOR> <STRING>'undefined'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> exports <OPERATOR>:</OPERATOR> <COMMENT>/*&lt;/CommonJS&gt;*/</COMMENT><KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT>name: Slick.Finder</COMMENT>
<COMMENT>description: The new, superfast css selector engine.</COMMENT>
<COMMENT>provides: Slick.Finder</COMMENT>
<COMMENT>requires: Slick.Parser</COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<KEYWORD>var</KEYWORD> local <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Feature / Bug detection</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>isNativeCode</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(fn<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (<REGEX>/<ESC>\{</ESC><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\[</ESC>native code<ESC>\]</ESC><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\}</ESC>/</REGEX><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>test</OO>(<STRING>''</STRING> <OPERATOR>+</OPERATOR> fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>isXML</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<TYPE>document</TYPE><CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (<OPERATOR>!!</OPERATOR><OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>xmlVersion</OO><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> (<OPERATOR>!!</OPERATOR><OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>xml</OO><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> (<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>toString</OO><OPERATOR>.</OPERATOR><OO>call</OO>(<TYPE>document</TYPE><CLOSER>)</CLOSER> <OPERATOR>===</OPERATOR> <STRING>'[object XMLDocument]'</STRING><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR>
	(<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>9</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>!==</OPERATOR> <STRING>'HTML'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>setDocument</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<TYPE>document</TYPE><CLOSER>)</CLOSER>{

	<COMMENT>// convert elements / window arguments to document. if document cannot be extrapolated, the function returns.</COMMENT>

	<KEYWORD>if</KEYWORD> (<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>9</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <COMMENT>// document</COMMENT>
	<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><CLOSER>)</CLOSER> <TYPE>document</TYPE> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>;</OPERATOR> <COMMENT>// node</COMMENT>
	<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>navigator</OO><CLOSER>)</CLOSER> <TYPE>document</TYPE> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>;</OPERATOR> <COMMENT>// window</COMMENT>
	<KEYWORD>else</KEYWORD> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>

	<COMMENT>// check if it's the old document</COMMENT>

	<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO> <OPERATOR>===</OPERATOR> <TYPE>document</TYPE><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO> <OPERATOR>=</OPERATOR> <TYPE>document</TYPE><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> root <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>root</OO> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>;</OPERATOR>

	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isXMLDocument</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isXML</OO>(<TYPE>document</TYPE><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenStarGEBTN</OO>
	<OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>starSelectsClosedQSA</OO>
	<OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>idGetsName</OO>
	<OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenMixedCaseQSA</OO>
	<OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenGEBCN</OO>
	<OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenCheckedQSA</OO>
	<OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenEmptyAttributeQSA</OO>
	<OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isHTMLDocument</OO>
	<OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> starSelectsClosed<OPERATOR>,</OPERATOR> starSelectsComments<OPERATOR>,</OPERATOR>
		brokenSecondClassNameGEBCN<OPERATOR>,</OPERATOR> cachedGetElementsByClassName<OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> selected<OPERATOR>,</OPERATOR> id<OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> testNode <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>'div'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>(testNode<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<COMMENT>// on non-HTML documents innerHTML and getElementsById doesnt work properly</COMMENT>
	<KEYWORD>try</KEYWORD> {
		id <OPERATOR>=</OPERATOR> <STRING>'slick_getbyid_test'</STRING><OPERATOR>;</OPERATOR>
		<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>'&lt;a id="'</STRING><OPERATOR>+</OPERATOR>id<OPERATOR>+</OPERATOR><STRING>'"&gt;&lt;/a&gt;'</STRING><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isHTMLDocument</OO> <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR><OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>getElementById</OO>(id<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isHTMLDocument</OO><CLOSER>)</CLOSER>{
		
		<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>'none'</STRING><OPERATOR>;</OPERATOR>
		
		<COMMENT>// IE returns comment nodes for getElementsByTagName('*') for some documents</COMMENT>
		<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>(<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createComment</OO>(<STRING>''</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		starSelectsComments <OPERATOR>=</OPERATOR> (<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>'*'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<COMMENT>// IE returns closed nodes (EG:"&lt;/foo&gt;") for getElementsByTagName('*') for some documents</COMMENT>
		<KEYWORD>try</KEYWORD> {
			<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>'foo&lt;/foo&gt;'</STRING><OPERATOR>;</OPERATOR>
			selected <OPERATOR>=</OPERATOR> <OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>'*'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			starSelectsClosed <OPERATOR>=</OPERATOR> (selected <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>selected</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&amp;&amp;</OPERATOR> selected[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>charAt</OO>(<NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'/'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenStarGEBTN</OO> <OPERATOR>=</OPERATOR> starSelectsComments <OPERATOR>||</OPERATOR> starSelectsClosed<OPERATOR>;</OPERATOR>

		<COMMENT>// IE 8 returns closed nodes (EG:"&lt;/foo&gt;") for querySelectorAll('*') for some documents</COMMENT>
		<KEYWORD>if</KEYWORD> (<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO><CLOSER>)</CLOSER> <KEYWORD>try</KEYWORD> {
			<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>'foo&lt;/foo&gt;'</STRING><OPERATOR>;</OPERATOR>
			selected <OPERATOR>=</OPERATOR> <OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO>(<STRING>'*'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>starSelectsClosedQSA</OO> <OPERATOR>=</OPERATOR> (selected <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>selected</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&amp;&amp;</OPERATOR> selected[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>charAt</OO>(<NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'/'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<COMMENT>// IE returns elements with the name instead of just id for getElementsById for some documents</COMMENT>
		<KEYWORD>try</KEYWORD> {
			id <OPERATOR>=</OPERATOR> <STRING>'slick_id_gets_name'</STRING><OPERATOR>;</OPERATOR>
			<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>'&lt;a name="'</STRING><OPERATOR>+</OPERATOR>id<OPERATOR>+</OPERATOR><STRING>'"&gt;&lt;/a&gt;&lt;b id="'</STRING><OPERATOR>+</OPERATOR>id<OPERATOR>+</OPERATOR><STRING>'"&gt;&lt;/b&gt;'</STRING><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>idGetsName</OO> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>getElementById</OO>(id<CLOSER>)</CLOSER> <OPERATOR>===</OPERATOR> <OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<COMMENT>// Safari 3.2 querySelectorAll doesnt work with mixedcase on quirksmode</COMMENT>
		<KEYWORD>try</KEYWORD> {
			<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>'&lt;a class="MiXedCaSe"&gt;&lt;/a&gt;'</STRING><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenMixedCaseQSA</OO> <OPERATOR>=</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO>(<STRING>'.MiXedCaSe'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>try</KEYWORD> {
			<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>'&lt;a class="f"&gt;&lt;/a&gt;&lt;a class="b"&gt;&lt;/a&gt;'</STRING><OPERATOR>;</OPERATOR>
			<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO>(<STRING>'b'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>=</OPERATOR> <STRING>'b'</STRING><OPERATOR>;</OPERATOR>
			cachedGetElementsByClassName <OPERATOR>=</OPERATOR> (<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO>(<STRING>'b'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>!=</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<COMMENT>// Opera 9.6 getElementsByClassName doesnt detects the class if its not the first one</COMMENT>
		<KEYWORD>try</KEYWORD> {
			<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>'&lt;a class="a"&gt;&lt;/a&gt;&lt;a class="f b a"&gt;&lt;/a&gt;'</STRING><OPERATOR>;</OPERATOR>
			brokenSecondClassNameGEBCN <OPERATOR>=</OPERATOR> (<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO>(<STRING>'a'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>!=</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenGEBCN</OO> <OPERATOR>=</OPERATOR> cachedGetElementsByClassName <OPERATOR>||</OPERATOR> brokenSecondClassNameGEBCN<OPERATOR>;</OPERATOR>
		
		<COMMENT>// Webkit dont return selected options on querySelectorAll</COMMENT>
		<KEYWORD>try</KEYWORD> {
			<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>'&lt;select&gt;&lt;option selected="selected"&gt;a&lt;/option&gt;&lt;/select&gt;'</STRING><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenCheckedQSA</OO> <OPERATOR>=</OPERATOR> (<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO>(<STRING>':checked'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		
		<COMMENT>// IE returns incorrect results for attr[*^$]="" selectors on querySelectorAll</COMMENT>
		<KEYWORD>try</KEYWORD> {
			<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>'&lt;a class=""&gt;&lt;/a&gt;'</STRING><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenEmptyAttributeQSA</OO> <OPERATOR>=</OPERATOR> (<OBJ>testNode</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO>(<STRING>'[class*=""]'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>!=</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		
	<CLOSER>}</CLOSER>

	<OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>removeChild</OO>(testNode<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	testNode <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>

	<COMMENT>// hasAttribute</COMMENT>

	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>hasAttribute</OO> <OPERATOR>=</OPERATOR> (root <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isNativeCode</OO>(<OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>hasAttribute</OO><CLOSER>))</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> attribute<CLOSER>)</CLOSER> {
		<KEYWORD>return</KEYWORD> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>hasAttribute</OO>(attribute<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> attribute<CLOSER>)</CLOSER> {
		node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>(attribute<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OPERATOR>!!</OPERATOR>(node <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>specified</OO> <OPERATOR>||</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeValue</OO><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<COMMENT>// contains</COMMENT>
	<COMMENT>// <COMMENT_NOTE>FIXME:</COMMENT_NOTE> Add specs: local.contains should be different for xml and html documents?</COMMENT>
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO> <OPERATOR>=</OPERATOR> (root <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isNativeCode</OO>(<OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO><CLOSER>))</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> node<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR> (root <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> node<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> context <OPERATOR>===</OPERATOR> node <OPERATOR>||</OPERATOR> <OPERATOR>!!</OPERATOR>(<OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO>(node<CLOSER>)</CLOSER> <OPERATOR>&amp;</OPERATOR> <NUMERIC>16</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> node<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (node<CLOSER>)</CLOSER> <KEYWORD>do</KEYWORD> {
			<KEYWORD>if</KEYWORD> (node <OPERATOR>===</OPERATOR> context<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<COMMENT>// document order sorting</COMMENT>
	<COMMENT>// credits to Sizzle (http://sizzlejs.com/)</COMMENT>

	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>documentSorter</OO> <OPERATOR>=</OPERATOR> (<OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>function</KEYWORD>(a<OPERATOR>,</OPERATOR> b<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>b</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO>(b<CLOSER>)</CLOSER> <OPERATOR>&amp;</OPERATOR> <NUMERIC>4</NUMERIC> <OPERATOR>?</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> a <OPERATOR>===</OPERATOR> b <OPERATOR>?</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR> (<STRING>'sourceIndex'</STRING> <KEYWORD>in</KEYWORD> root<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>function</KEYWORD>(a<OPERATOR>,</OPERATOR> b<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>sourceIndex</OO> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>b</OBJ><OPERATOR>.</OPERATOR><OO>sourceIndex</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>sourceIndex</OO> <OPERATOR>-</OPERATOR> <OBJ>b</OBJ><OPERATOR>.</OPERATOR><OO>sourceIndex</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR> (<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createRange</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>function</KEYWORD>(a<OPERATOR>,</OPERATOR> b<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>b</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> aRange <OPERATOR>=</OPERATOR> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>.</OPERATOR><OO>createRange</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> bRange <OPERATOR>=</OPERATOR> <OBJ>b</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>.</OPERATOR><OO>createRange</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>aRange</OBJ><OPERATOR>.</OPERATOR><OO>setStart</OO>(a<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>aRange</OBJ><OPERATOR>.</OPERATOR><OO>setEnd</OO>(a<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>bRange</OBJ><OPERATOR>.</OPERATOR><OO>setStart</OO>(b<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>bRange</OBJ><OPERATOR>.</OPERATOR><OO>setEnd</OO>(b<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>aRange</OBJ><OPERATOR>.</OPERATOR><OO>compareBoundaryPoints</OO>(<OBJ>Range</OBJ><OPERATOR>.</OPERATOR><OO>START_TO_END</OO><OPERATOR>,</OPERATOR> bRange<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>;</OPERATOR>

	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getUID</OO> <OPERATOR>=</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isHTMLDocument</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getUIDHTML</OO> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getUIDXML</OO><OPERATOR>;</OPERATOR>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Main Method</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>search</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> expression<OPERATOR>,</OPERATOR> append<OPERATOR>,</OPERATOR> first<CLOSER>)</CLOSER>{

	<KEYWORD>var</KEYWORD> found <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>found</OO> <OPERATOR>=</OPERATOR> (first<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>:</OPERATOR> (append <OPERATOR>||</OPERATOR> [<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>

	<COMMENT>// context checks</COMMENT>

	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>context<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> found<OPERATOR>;</OPERATOR> <COMMENT>// No context</COMMENT>
	<KEYWORD>if</KEYWORD> (<OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>navigator</OO><CLOSER>)</CLOSER> context <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>;</OPERATOR> <COMMENT>// Convert the node from a window to a document</COMMENT>
	<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> found<OPERATOR>;</OPERATOR> <COMMENT>// Reject misc junk input</COMMENT>

	<COMMENT>// setup</COMMENT>

	<KEYWORD>var</KEYWORD> parsed<OPERATOR>,</OPERATOR> i<OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> uniques <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO> <OPERATOR>!==</OPERATOR> (<OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO> <OPERATOR>||</OPERATOR> context<CLOSER>))</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setDocument</OO>(context<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<COMMENT>// should sort if there are nodes in append and if you pass multiple expressions.</COMMENT>
	<COMMENT>// should remove duplicates if append already has items</COMMENT>
	<KEYWORD>var</KEYWORD> shouldUniques <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR>(append <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>append</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<COMMENT>// avoid duplicating items already in the append array</COMMENT>
	<KEYWORD>if</KEYWORD> (shouldUniques<CLOSER>)</CLOSER> <KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getUID</OO>(found[i<CLOSER>])]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

	<COMMENT>// expression checks</COMMENT>

	<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> expression <OPERATOR>==</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER>{ <COMMENT>// expression is a string</COMMENT>

		<COMMENT>// Overrides</COMMENT>

		<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>overrides</OO><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> override <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>overrides</OO>[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>override</OBJ><OPERATOR>.</OPERATOR><OO>regexp</OO><OPERATOR>.</OPERATOR><OO>test</OO>(expression<CLOSER>))</CLOSER>{
				<KEYWORD>var</KEYWORD> result <OPERATOR>=</OPERATOR> <OBJ>override</OBJ><OPERATOR>.</OPERATOR><OO>method</OO><OPERATOR>.</OPERATOR><OO>call</OO>(context<OPERATOR>,</OPERATOR> expression<OPERATOR>,</OPERATOR> found<OPERATOR>,</OPERATOR> first<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (result <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (result <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> found<OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD> result<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>

		parsed <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO><OPERATOR>.</OPERATOR><OO>parse</OO>(expression<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> found<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (expression <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER>{ <COMMENT>// there is no expression</COMMENT>
		<KEYWORD>return</KEYWORD> found<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>expression</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO><CLOSER>)</CLOSER>{ <COMMENT>// expression is a parsed Slick object</COMMENT>
		parsed <OPERATOR>=</OPERATOR> expression<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(<OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO> <OPERATOR>||</OPERATOR> context<OPERATOR>,</OPERATOR> expression<CLOSER>))</CLOSER>{ <COMMENT>// expression is a node</COMMENT>
		(found<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(expression<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> found <OPERATOR>=</OPERATOR> expression<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> found<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> { <COMMENT>// other junk</COMMENT>
		<KEYWORD>return</KEYWORD> found<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<COMMENT>// cache elements for the nth selectors</COMMENT>

	<COMMENT>/*&lt;pseudo-selectors&gt;*/</COMMENT><COMMENT>/*&lt;nth-pseudo-selectors&gt;*/</COMMENT>

	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>posNTH</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>posNTHLast</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>posNTHType</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>posNTHTypeLast</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<COMMENT>/*&lt;/nth-pseudo-selectors&gt;*/</COMMENT><COMMENT>/*&lt;/pseudo-selectors&gt;*/</COMMENT>

	<COMMENT>// if append is null and there is only a single selector with one expression use pushArray, else use pushUID</COMMENT>
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO> <OPERATOR>=</OPERATOR> (<OPERATOR>!</OPERATOR>shouldUniques <OPERATOR>&amp;&amp;</OPERATOR> (first <OPERATOR>||</OPERATOR> (<OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)))</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushArray</OO> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushUID</OO><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (found <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> found <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>

	<COMMENT>// default engine</COMMENT>

	<KEYWORD>var</KEYWORD> j<OPERATOR>,</OPERATOR> m<OPERATOR>,</OPERATOR> n<OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> combinator<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classList<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> currentItems<OPERATOR>,</OPERATOR> currentExpression<OPERATOR>,</OPERATOR> currentBit<OPERATOR>,</OPERATOR> lastBit<OPERATOR>,</OPERATOR> expressions <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO><OPERATOR>;</OPERATOR>

	search<OPERATOR>:</OPERATOR> <KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> (currentExpression <OPERATOR>=</OPERATOR> expressions[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> <KEYWORD>for</KEYWORD> (j <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> (currentBit <OPERATOR>=</OPERATOR> currentExpression[j<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{

		combinator <OPERATOR>=</OPERATOR> <STRING>'combinator:'</STRING> <OPERATOR>+</OPERATOR> <OBJ>currentBit</OBJ><OPERATOR>.</OPERATOR><OO>combinator</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>this</KEYWORD>[combinator<CLOSER>])</CLOSER> <KEYWORD>continue</KEYWORD> search<OPERATOR>;</OPERATOR>

		tag        <OPERATOR>=</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isXMLDocument</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>currentBit</OBJ><OPERATOR>.</OPERATOR><OO>tag</OO> <OPERATOR>:</OPERATOR> <OBJ>currentBit</OBJ><OPERATOR>.</OPERATOR><OO>tag</OO><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		id         <OPERATOR>=</OPERATOR> <OBJ>currentBit</OBJ><OPERATOR>.</OPERATOR><OO>id</OO><OPERATOR>;</OPERATOR>
		classList  <OPERATOR>=</OPERATOR> <OBJ>currentBit</OBJ><OPERATOR>.</OPERATOR><OO>classList</OO><OPERATOR>;</OPERATOR>
		classes    <OPERATOR>=</OPERATOR> <OBJ>currentBit</OBJ><OPERATOR>.</OPERATOR><OO>classes</OO><OPERATOR>;</OPERATOR>
		attributes <OPERATOR>=</OPERATOR> <OBJ>currentBit</OBJ><OPERATOR>.</OPERATOR><OO>attributes</OO><OPERATOR>;</OPERATOR>
		pseudos    <OPERATOR>=</OPERATOR> <OBJ>currentBit</OBJ><OPERATOR>.</OPERATOR><OO>pseudos</OO><OPERATOR>;</OPERATOR>
		lastBit    <OPERATOR>=</OPERATOR> (j <OPERATOR>===</OPERATOR> (<OBJ>currentExpression</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>bitUniques</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (lastBit<CLOSER>)</CLOSER>{
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO> <OPERATOR>=</OPERATOR> uniques<OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>found</OO> <OPERATOR>=</OPERATOR> found<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>found</OO> <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<KEYWORD>if</KEYWORD> (j <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>{
			<KEYWORD>this</KEYWORD>[combinator<CLOSER>]</CLOSER>(context<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<OPERATOR>,</OPERATOR> classList<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (first <OPERATOR>&amp;&amp;</OPERATOR> lastBit <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <KEYWORD>break</KEYWORD> search<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
			<KEYWORD>if</KEYWORD> (first <OPERATOR>&amp;&amp;</OPERATOR> lastBit<CLOSER>)</CLOSER> <KEYWORD>for</KEYWORD> (m <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> n <OPERATOR>=</OPERATOR> <OBJ>currentItems</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> m <OPERATOR>&lt;</OPERATOR> n<OPERATOR>;</OPERATOR> m<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
				<KEYWORD>this</KEYWORD>[combinator<CLOSER>]</CLOSER>(currentItems[m<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<OPERATOR>,</OPERATOR> classList<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (<OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <KEYWORD>break</KEYWORD> search<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>for</KEYWORD> (m <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> n <OPERATOR>=</OPERATOR> <OBJ>currentItems</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> m <OPERATOR>&lt;</OPERATOR> n<OPERATOR>;</OPERATOR> m<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> <KEYWORD>this</KEYWORD>[combinator<CLOSER>]</CLOSER>(currentItems[m<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<OPERATOR>,</OPERATOR> classList<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		currentItems <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>found</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>if</KEYWORD> (shouldUniques <OPERATOR>||</OPERATOR> (<OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>))</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>sort</OO>(found<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> (first<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> (found[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> found<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Utils</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>uidx</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>uidk</OO> <OPERATOR>=</OPERATOR> <STRING>'slick:uniqueid'</STRING><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getUIDXML</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> uid <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uidk</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>uid<CLOSER>)</CLOSER>{
		uid <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uidx</OO><OPERATOR>++;</OPERATOR>
		<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>setAttribute</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uidk</OO><OPERATOR>,</OPERATOR> uid<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> uid<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getUIDHTML</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>uniqueNumber</OO> <OPERATOR>||</OPERATOR> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>uniqueNumber</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uidx</OO><OPERATOR>++</OPERATOR><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// sort based on the setDocument documentSorter method.</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>sort</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(results<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>documentSorter</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
	<OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>sort</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>documentSorter</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>/*&lt;pseudo-selectors&gt;*/</COMMENT><COMMENT>/*&lt;nth-pseudo-selectors&gt;*/</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>cacheNTH</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>matchNTH</OO> <OPERATOR>=</OPERATOR> <REGEX>/^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR>-<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\d</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>a-z<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR>-<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR>$/</REGEX><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>parseNTHArgument</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(argument<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> parsed <OPERATOR>=</OPERATOR> <OBJ>argument</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>matchNTH</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>parsed<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> special <OPERATOR>=</OPERATOR> parsed[<NUMERIC>2</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> a <OPERATOR>=</OPERATOR> parsed[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (a <OPERATOR>==</OPERATOR> <STRING>'-'</STRING><CLOSER>)</CLOSER> a <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> b <OPERATOR>=</OPERATOR> <OPERATOR>+</OPERATOR>parsed[<NUMERIC>3</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
	parsed <OPERATOR>=</OPERATOR>
		(special <OPERATOR>==</OPERATOR> <STRING>'n'</STRING><CLOSER>)</CLOSER>	<OPERATOR>?</OPERATOR> {a<OPERATOR>:</OPERATOR> a<OPERATOR>,</OPERATOR> b<OPERATOR>:</OPERATOR> b<CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR>
		(special <OPERATOR>==</OPERATOR> <STRING>'odd'</STRING><CLOSER>)</CLOSER>	<OPERATOR>?</OPERATOR> {a<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> b<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR>
		(special <OPERATOR>==</OPERATOR> <STRING>'even'</STRING><CLOSER>)</CLOSER>	<OPERATOR>?</OPERATOR> {a<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> b<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR> {a<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> b<OPERATOR>:</OPERATOR> a<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>cacheNTH</OO>[argument<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> parsed<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>createNTHPseudo</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(child<OPERATOR>,</OPERATOR> sibling<OPERATOR>,</OPERATOR> positions<OPERATOR>,</OPERATOR> ofType<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> argument<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> uid <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getUID</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>this</KEYWORD>[positions<CLOSER>]</CLOSER>[uid<CLOSER>])</CLOSER>{
			<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>parent<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> el <OPERATOR>=</OPERATOR> parent[child<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> count <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (ofType<CLOSER>)</CLOSER>{
				<KEYWORD>var</KEYWORD> nodeName <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>do</KEYWORD> {
					<KEYWORD>if</KEYWORD> (<OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>!==</OPERATOR> nodeName<CLOSER>)</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>this</KEYWORD>[positions<CLOSER>]</CLOSER>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getUID</OO>(el<CLOSER>)]</CLOSER> <OPERATOR>=</OPERATOR> count<OPERATOR>++;</OPERATOR>
				<CLOSER>}</CLOSER> <KEYWORD>while</KEYWORD> ((el <OPERATOR>=</OPERATOR> el[sibling<CLOSER>]))</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
				<KEYWORD>do</KEYWORD> {
					<KEYWORD>if</KEYWORD> (<OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>this</KEYWORD>[positions<CLOSER>]</CLOSER>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getUID</OO>(el<CLOSER>)]</CLOSER> <OPERATOR>=</OPERATOR> count<OPERATOR>++;</OPERATOR>
				<CLOSER>}</CLOSER> <KEYWORD>while</KEYWORD> ((el <OPERATOR>=</OPERATOR> el[sibling<CLOSER>]))</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		argument <OPERATOR>=</OPERATOR> argument <OPERATOR>||</OPERATOR> <STRING>'n'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> parsed <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>cacheNTH</OO>[argument<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parseNTHArgument</OO>(argument<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>parsed<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> a <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>a</OO><OPERATOR>,</OPERATOR> b <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>b</OO><OPERATOR>,</OPERATOR> pos <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[positions<CLOSER>]</CLOSER>[uid<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (a <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> b <OPERATOR>==</OPERATOR> pos<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (a <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (pos <OPERATOR>&lt;</OPERATOR> b<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
			<KEYWORD>if</KEYWORD> (b <OPERATOR>&lt;</OPERATOR> pos<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> ((pos <OPERATOR>-</OPERATOR> b<CLOSER>)</CLOSER> <OPERATOR>%</OPERATOR> a<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>/*&lt;/nth-pseudo-selectors&gt;*/</COMMENT><COMMENT>/*&lt;/pseudo-selectors&gt;*/</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>pushArray</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>matchSelector</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>))</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>found</OO><OPERATOR>.</OPERATOR><OO>push</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>pushUID</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> uid <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getUID</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO>[uid<CLOSER>]</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>matchSelector</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>))</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO>[uid<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>found</OO><OPERATOR>.</OPERATOR><OO>push</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>matchNode</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> selector<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> parsed <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO><OPERATOR>.</OPERATOR><OO>parse</OO>(selector<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>parsed<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

	<COMMENT>// simple (single) selectors</COMMENT>
	<KEYWORD>if</KEYWORD>(<OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> exp <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>matchSelector</OO>(node<OPERATOR>,</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isXMLDocument</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>exp</OBJ><OPERATOR>.</OPERATOR><OO>tag</OO> <OPERATOR>:</OPERATOR> <OBJ>exp</OBJ><OPERATOR>.</OPERATOR><OO>tag</OO><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <OBJ>exp</OBJ><OPERATOR>.</OPERATOR><OO>id</OO><OPERATOR>,</OPERATOR> <OBJ>exp</OBJ><OPERATOR>.</OPERATOR><OO>classes</OO><OPERATOR>,</OPERATOR> <OBJ>exp</OBJ><OPERATOR>.</OPERATOR><OO>attributes</OO><OPERATOR>,</OPERATOR> <OBJ>exp</OBJ><OPERATOR>.</OPERATOR><OO>pseudos</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>var</KEYWORD> nodes <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>,</OPERATOR> parsed<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> item<OPERATOR>;</OPERATOR> item <OPERATOR>=</OPERATOR> nodes[i<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR><CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (item <OPERATOR>===</OPERATOR> node<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>matchPseudo</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> argument<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> pseudoName <OPERATOR>=</OPERATOR> <STRING>'pseudo:'</STRING> <OPERATOR>+</OPERATOR> name<OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<KEYWORD>this</KEYWORD>[pseudoName<CLOSER>])</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD>[pseudoName<CLOSER>]</CLOSER>(node<OPERATOR>,</OPERATOR> argument<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> attribute <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(node<OPERATOR>,</OPERATOR> name<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> (argument<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> argument <OPERATOR>==</OPERATOR> attribute <OPERATOR>:</OPERATOR> <OPERATOR>!!</OPERATOR>attribute<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>matchSelector</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (tag<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (tag <OPERATOR>==</OPERATOR> <STRING>'*'</STRING><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>&lt;</OPERATOR> <STRING>'@'</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR> <COMMENT>// Fix for comment nodes and closed nodes</COMMENT>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
			<KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>!=</OPERATOR> tag<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER>

	<KEYWORD>if</KEYWORD> (id <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>'id'</STRING><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> id<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> i<OPERATOR>,</OPERATOR> part<OPERATOR>,</OPERATOR> cls<OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (classes<CLOSER>)</CLOSER> <KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <OBJ>classes</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER>{
		cls <OPERATOR>=</OPERATOR> (<STRING>'className'</STRING> <KEYWORD>in</KEYWORD> node<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>:</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>'class'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>(cls <OPERATOR>&amp;&amp;</OPERATOR> classes[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>regexp</OO><OPERATOR>.</OPERATOR><OO>test</OO>(cls<CLOSER>)))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>if</KEYWORD> (attributes<CLOSER>)</CLOSER> <KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <OBJ>attributes</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER>{
		part <OPERATOR>=</OPERATOR> attributes[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>part</OBJ><OPERATOR>.</OPERATOR><OO>operator</OO> <OPERATOR>?</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>part</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(node<OPERATOR>,</OPERATOR> <OBJ>part</OBJ><OPERATOR>.</OPERATOR><OO>key</OO><CLOSER>))</CLOSER> <OPERATOR>:</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>hasAttribute</OO>(node<OPERATOR>,</OPERATOR> <OBJ>part</OBJ><OPERATOR>.</OPERATOR><OO>key</OO><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>if</KEYWORD> (pseudos<CLOSER>)</CLOSER> <KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <OBJ>pseudos</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER>{
		part <OPERATOR>=</OPERATOR> pseudos[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>matchPseudo</OO>(node<OPERATOR>,</OPERATOR> <OBJ>part</OBJ><OPERATOR>.</OPERATOR><OO>key</OO><OPERATOR>,</OPERATOR> <OBJ>part</OBJ><OPERATOR>.</OPERATOR><OO>value</OO><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> combinators <OPERATOR>=</OPERATOR> {

	<STRING>' '</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<OPERATOR>,</OPERATOR> classList<CLOSER>)</CLOSER>{ <COMMENT>// all child nodes, any level</COMMENT>

		<KEYWORD>var</KEYWORD> i<OPERATOR>,</OPERATOR> item<OPERATOR>,</OPERATOR> children<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isHTMLDocument</OO><CLOSER>)</CLOSER>{
			getById<OPERATOR>:</OPERATOR> <KEYWORD>if</KEYWORD> (id<CLOSER>)</CLOSER>{
				item <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>.</OPERATOR><OO>getElementById</OO>(id<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ((<OPERATOR>!</OPERATOR>item <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>all</OO><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>idGetsName</OO> <OPERATOR>&amp;&amp;</OPERATOR> item <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>(<STRING>'id'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>nodeValue</OO> <OPERATOR>!=</OPERATOR> id<CLOSER>))</CLOSER>{
					<COMMENT>// all[id] returns all the elements with that name or id inside node</COMMENT>
					<COMMENT>// if theres just one it will return the element, else it will be a collection</COMMENT>
					children <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>all</OO>[id<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>children<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>children[<NUMERIC>0</NUMERIC><CLOSER>])</CLOSER> children <OPERATOR>=</OPERATOR> [children<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> item <OPERATOR>=</OPERATOR> children[i<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR><CLOSER>)</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>(<STRING>'id'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>nodeValue</OO> <OPERATOR>==</OPERATOR> id<CLOSER>)</CLOSER>{
						<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(item<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					<CLOSER>}</CLOSER> 
					<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>item<CLOSER>)</CLOSER>{
					<COMMENT>// if the context is in the dom we return, else we will try GEBTN, breaking the getById label</COMMENT>
					<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>,</OPERATOR> node<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
					<KEYWORD>else</KEYWORD> <KEYWORD>break</KEYWORD> getById<OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO> <OPERATOR>!==</OPERATOR> node <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(node<OPERATOR>,</OPERATOR> item<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(item<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			getByClass<OPERATOR>:</OPERATOR> <KEYWORD>if</KEYWORD> (classes <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenGEBCN</OO><CLOSER>)</CLOSER>{
				children <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO>(<OBJ>classList</OBJ><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>' '</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>(children <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>children</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>))</CLOSER> <KEYWORD>break</KEYWORD> getByClass<OPERATOR>;</OPERATOR>
				<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> item <OPERATOR>=</OPERATOR> children[i<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(item<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		getByTag<OPERATOR>:</OPERATOR> {
			children <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(tag<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>(children <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>children</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>))</CLOSER> <KEYWORD>break</KEYWORD> getByTag<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>brokenStarGEBTN</OO><CLOSER>)</CLOSER> tag <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> item <OPERATOR>=</OPERATOR> children[i<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(item<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'&gt;'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{ <COMMENT>// direct children</COMMENT>
		<KEYWORD>if</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><CLOSER>))</CLOSER> <KEYWORD>do</KEYWORD> {
			<KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'+'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{ <COMMENT>// next sibling</COMMENT>
		<KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>{
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'^'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{ <COMMENT>// first child</COMMENT>
		node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (node<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>this</KEYWORD>[<STRING>'combinator:+'</STRING><CLOSER>]</CLOSER>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'~'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{ <COMMENT>// next siblings</COMMENT>
		<KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><CLOSER>))</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> uid <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getUID</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>bitUniques</OO>[uid<CLOSER>])</CLOSER> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>bitUniques</OO>[uid<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'++'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{ <COMMENT>// next sibling and previous sibling</COMMENT>
		<KEYWORD>this</KEYWORD>[<STRING>'combinator:+'</STRING><CLOSER>]</CLOSER>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>this</KEYWORD>[<STRING>'combinator:!+'</STRING><CLOSER>]</CLOSER>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'~~'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{ <COMMENT>// next siblings and previous siblings</COMMENT>
		<KEYWORD>this</KEYWORD>[<STRING>'combinator:~'</STRING><CLOSER>]</CLOSER>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>this</KEYWORD>[<STRING>'combinator:!~'</STRING><CLOSER>]</CLOSER>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'!'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{  <COMMENT>// all parent nodes up to document</COMMENT>
		<KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (node <OPERATOR>!==</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'!&gt;'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{ <COMMENT>// direct parent (one level)</COMMENT>
		node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (node <OPERATOR>!==</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'!+'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{ <COMMENT>// previous sibling</COMMENT>
		<KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>previousSibling</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>{
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'!^'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{ <COMMENT>// last child</COMMENT>
		node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>lastChild</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (node<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <KEYWORD>this</KEYWORD>[<STRING>'combinator:!+'</STRING><CLOSER>]</CLOSER>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'!~'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER>{ <COMMENT>// previous siblings</COMMENT>
		<KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>previousSibling</OO><CLOSER>))</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> uid <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getUID</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>bitUniques</OO>[uid<CLOSER>])</CLOSER> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>bitUniques</OO>[uid<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<OPERATOR>,</OPERATOR> tag<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> classes<OPERATOR>,</OPERATOR> attributes<OPERATOR>,</OPERATOR> pseudos<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> c <KEYWORD>in</KEYWORD> combinators<CLOSER>)</CLOSER> local[<STRING>'combinator:'</STRING> <OPERATOR>+</OPERATOR> c<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> combinators[c<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> pseudos <OPERATOR>=</OPERATOR> {

	<COMMENT>/*&lt;pseudo-selectors&gt;*/</COMMENT>

	<STRING>'empty'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> child <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OPERATOR>!</OPERATOR>(child <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>child</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>(<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>innerText</OO> <OPERATOR>||</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>textContent</OO> <OPERATOR>||</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'not'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>matchNode</OO>(node<OPERATOR>,</OPERATOR> expression<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'contains'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> text<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>innerText</OO> <OPERATOR>||</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>textContent</OO> <OPERATOR>||</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>indexOf</OO>(text<CLOSER>)</CLOSER> <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'first-child'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>previousSibling</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'last-child'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'only-child'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> prev <OPERATOR>=</OPERATOR> node<OPERATOR>;</OPERATOR>
		<KEYWORD>while</KEYWORD> ((prev <OPERATOR>=</OPERATOR> <OBJ>prev</OBJ><OPERATOR>.</OPERATOR><OO>previousSibling</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>prev</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> next <OPERATOR>=</OPERATOR> node<OPERATOR>;</OPERATOR>
		<KEYWORD>while</KEYWORD> ((next <OPERATOR>=</OPERATOR> <OBJ>next</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>next</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<COMMENT>/*&lt;nth-pseudo-selectors&gt;*/</COMMENT>

	<STRING>'nth-child'</STRING><OPERATOR>:</OPERATOR> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>createNTHPseudo</OO>(<STRING>'firstChild'</STRING><OPERATOR>,</OPERATOR> <STRING>'nextSibling'</STRING><OPERATOR>,</OPERATOR> <STRING>'posNTH'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'nth-last-child'</STRING><OPERATOR>:</OPERATOR> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>createNTHPseudo</OO>(<STRING>'lastChild'</STRING><OPERATOR>,</OPERATOR> <STRING>'previousSibling'</STRING><OPERATOR>,</OPERATOR> <STRING>'posNTHLast'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'nth-of-type'</STRING><OPERATOR>:</OPERATOR> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>createNTHPseudo</OO>(<STRING>'firstChild'</STRING><OPERATOR>,</OPERATOR> <STRING>'nextSibling'</STRING><OPERATOR>,</OPERATOR> <STRING>'posNTHType'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'nth-last-of-type'</STRING><OPERATOR>:</OPERATOR> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>createNTHPseudo</OO>(<STRING>'lastChild'</STRING><OPERATOR>,</OPERATOR> <STRING>'previousSibling'</STRING><OPERATOR>,</OPERATOR> <STRING>'posNTHTypeLast'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'index'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> index<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD>[<STRING>'pseudo:nth-child'</STRING><CLOSER>]</CLOSER>(node<OPERATOR>,</OPERATOR> <STRING>''</STRING> <OPERATOR>+</OPERATOR> index <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'even'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> argument<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD>[<STRING>'pseudo:nth-child'</STRING><CLOSER>]</CLOSER>(node<OPERATOR>,</OPERATOR> <STRING>'2n'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'odd'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> argument<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD>[<STRING>'pseudo:nth-child'</STRING><CLOSER>]</CLOSER>(node<OPERATOR>,</OPERATOR> <STRING>'2n+1'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<COMMENT>/*&lt;/nth-pseudo-selectors&gt;*/</COMMENT>

	<COMMENT>/*&lt;of-type-pseudo-selectors&gt;*/</COMMENT>

	<STRING>'first-of-type'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> nodeName <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>previousSibling</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>===</OPERATOR> nodeName<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'last-of-type'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> nodeName <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>while</KEYWORD> ((node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>===</OPERATOR> nodeName<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'only-of-type'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> prev <OPERATOR>=</OPERATOR> node<OPERATOR>,</OPERATOR> nodeName <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>while</KEYWORD> ((prev <OPERATOR>=</OPERATOR> <OBJ>prev</OBJ><OPERATOR>.</OPERATOR><OO>previousSibling</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>prev</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>===</OPERATOR> nodeName<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> next <OPERATOR>=</OPERATOR> node<OPERATOR>;</OPERATOR>
		<KEYWORD>while</KEYWORD> ((next <OPERATOR>=</OPERATOR> <OBJ>next</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><CLOSER>))</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>next</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>===</OPERATOR> nodeName<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<COMMENT>/*&lt;/of-type-pseudo-selectors&gt;*/</COMMENT>

	<COMMENT>// custom pseudos</COMMENT>

	<STRING>'enabled'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>disabled</OO> <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'disabled'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>disabled</OO> <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'checked'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>checked</OO> <OPERATOR>||</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>selected</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'focus'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isHTMLDocument</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>.</OPERATOR><OO>activeElement</OO> <OPERATOR>===</OPERATOR> node <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>href</OO> <OPERATOR>||</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>hasAttribute</OO>(node<OPERATOR>,</OPERATOR> <STRING>'tabindex'</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'root'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (node <OPERATOR>===</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>root</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
	
	<STRING>'selected'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>selected</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<COMMENT>/*&lt;/pseudo-selectors&gt;*/</COMMENT>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> p <KEYWORD>in</KEYWORD> pseudos<CLOSER>)</CLOSER> local[<STRING>'pseudo:'</STRING> <OPERATOR>+</OPERATOR> p<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> pseudos[p<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// attributes methods</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>attributeGetters</OO> <OPERATOR>=</OPERATOR> {

	<STRING>'class'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<STRING>'className'</STRING> <KEYWORD>in</KEYWORD> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>'class'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'for'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<STRING>'htmlFor'</STRING> <KEYWORD>in</KEYWORD> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>htmlFor</OO> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>'for'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'href'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<STRING>'href'</STRING> <KEYWORD>in</KEYWORD> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>'href'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>'href'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<STRING>'style'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>cssText</OO> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>'style'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> name<CLOSER>)</CLOSER>{
	<COMMENT>// <COMMENT_NOTE>FIXME:</COMMENT_NOTE> check if getAttribute() will get input elements on a form on this browser</COMMENT>
	<COMMENT>// getAttribute is faster than getAttributeNode().nodeValue</COMMENT>
	<KEYWORD>var</KEYWORD> method <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>attributeGetters</OO>[name<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (method<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>method</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> attributeNode <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>(name<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> attributeNode <OPERATOR>?</OPERATOR> <OBJ>attributeNode</OBJ><OPERATOR>.</OPERATOR><OO>nodeValue</OO> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// overrides</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>overrides</OO> <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>override</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(regexp<OPERATOR>,</OPERATOR> method<CLOSER>)</CLOSER>{
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>overrides</OO><OPERATOR>.</OPERATOR><OO>push</OO>({regexp<OPERATOR>:</OPERATOR> regexp<OPERATOR>,</OPERATOR> method<OPERATOR>:</OPERATOR> method<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>/*&lt;overrides&gt;*/</COMMENT>

<COMMENT>/*&lt;query-selector-override&gt;*/</COMMENT>

<KEYWORD>var</KEYWORD> reEmptyAttribute <OPERATOR>=</OPERATOR> <REGEX>/<ESC>\[</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>$^<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER>=<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>"'<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_REPEAT_MARKER>{2}</REGEX_REPEAT_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\]</ESC>/</REGEX><OPERATOR>;</OPERATOR>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>override</OO>(<REGEX>/<REGEX_OPERATOR>.</REGEX_OPERATOR>/</REGEX><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(expression<OPERATOR>,</OPERATOR> found<OPERATOR>,</OPERATOR> first<CLOSER>)</CLOSER>{ <COMMENT>//querySelectorAll override</COMMENT>

	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!=</OPERATOR> <NUMERIC>9</NUMERIC> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>isHTMLDocument</OO> <OPERATOR>||</OPERATOR> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>brokenMixedCaseQSA</OO> <OPERATOR>||</OPERATOR>
	(<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>brokenCheckedQSA</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>expression</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>':checked'</STRING><CLOSER>)</CLOSER> <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR>
	(<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>brokenEmptyAttributeQSA</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>reEmptyAttribute</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(expression<CLOSER>))</CLOSER> <OPERATOR>||</OPERATOR> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>disableQSA</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> nodes<OPERATOR>,</OPERATOR> node<OPERATOR>;</OPERATOR>
	<KEYWORD>try</KEYWORD> {
		<KEYWORD>if</KEYWORD> (first<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>querySelector</OO>(expression<CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> nodes <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO>(expression<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(error<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>var</KEYWORD> i<OPERATOR>,</OPERATOR> hasOthers <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR>(<OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>starSelectsClosedQSA</OO><CLOSER>)</CLOSER> <KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> node <OPERATOR>=</OPERATOR> nodes[i<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR><CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>&gt;</OPERATOR> <STRING>'@'</STRING> <OPERATOR>&amp;&amp;</OPERATOR> (<OPERATOR>!</OPERATOR>hasOthers <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO>[<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getUIDHTML</OO>(node<CLOSER>)]))</CLOSER> <OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> node <OPERATOR>=</OPERATOR> nodes[i<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR><CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>hasOthers <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO>[<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getUIDHTML</OO>(node<CLOSER>)])</CLOSER> <OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>if</KEYWORD> (hasOthers<CLOSER>)</CLOSER> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>sort</OO>(found<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>/*&lt;/query-selector-override&gt;*/</COMMENT>

<COMMENT>/*&lt;tag-override&gt;*/</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>override</OO>(<REGEX>/^<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC>-<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR>$<REGEX_OPERATOR>|</REGEX_OPERATOR>^<ESC>\*</ESC>$/</REGEX><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(expression<OPERATOR>,</OPERATOR> found<OPERATOR>,</OPERATOR> first<CLOSER>)</CLOSER>{ <COMMENT>// tag override</COMMENT>
	<KEYWORD>var</KEYWORD> tag <OPERATOR>=</OPERATOR> expression<OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (tag <OPERATOR>==</OPERATOR> <STRING>'*'</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>brokenStarGEBTN</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> nodes <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(tag<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (first<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> nodes[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> i<OPERATOR>,</OPERATOR> node<OPERATOR>,</OPERATOR> hasOthers <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR>(<OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> node <OPERATOR>=</OPERATOR> nodes[i<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR><CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>hasOthers <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO>[<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getUID</OO>(node<CLOSER>)])</CLOSER> <OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>if</KEYWORD> (hasOthers<CLOSER>)</CLOSER> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>sort</OO>(found<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>/*&lt;/tag-override&gt;*/</COMMENT>

<COMMENT>/*&lt;class-override&gt;*/</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>override</OO>(<REGEX>/^<ESC>\.</ESC><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC>-<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR>$/</REGEX><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(expression<OPERATOR>,</OPERATOR> found<OPERATOR>,</OPERATOR> first<CLOSER>)</CLOSER>{ <COMMENT>// class override</COMMENT>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>isHTMLDocument</OO> <OPERATOR>||</OPERATOR> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> nodes<OPERATOR>,</OPERATOR> node<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> hasOthers <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR>(found <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> className <OPERATOR>=</OPERATOR> <OBJ>expression</OBJ><OPERATOR>.</OPERATOR><OO>substring</OO>(<NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>brokenGEBCN</OO><CLOSER>)</CLOSER>{
		nodes <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO>(className<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (first<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> nodes[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> node <OPERATOR>=</OPERATOR> nodes[i<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>hasOthers <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO>[<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getUIDHTML</OO>(node<CLOSER>)])</CLOSER> <OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
		<KEYWORD>var</KEYWORD> matchClass <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(<STRING>'(^|<ESC>\\</ESC>s)'</STRING><OPERATOR>+</OPERATOR> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>escapeRegExp</OO>(className<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR><STRING>'(<ESC>\\</ESC>s|$)'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		nodes <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>'*'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> node <OPERATOR>=</OPERATOR> nodes[i<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR><CLOSER>)</CLOSER>{
			className <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>className</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>className <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>matchClass</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(className<CLOSER>))</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (first<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> node<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>hasOthers <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO>[<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getUIDHTML</OO>(node<CLOSER>)])</CLOSER> <OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER>
	<KEYWORD>if</KEYWORD> (hasOthers<CLOSER>)</CLOSER> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>sort</OO>(found<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> (first<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>/*&lt;/class-override&gt;*/</COMMENT>

<COMMENT>/*&lt;id-override&gt;*/</COMMENT>

<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>override</OO>(<REGEX>/^#<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC>-<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR>$/</REGEX><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(expression<OPERATOR>,</OPERATOR> found<OPERATOR>,</OPERATOR> first<CLOSER>)</CLOSER>{ <COMMENT>// ID override</COMMENT>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>isHTMLDocument</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!=</OPERATOR> <NUMERIC>9</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> id <OPERATOR>=</OPERATOR> <OBJ>expression</OBJ><OPERATOR>.</OPERATOR><OO>substring</OO>(<NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> el <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getElementById</OO>(id<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>el<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> found<OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>idGetsName</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>(<STRING>'id'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>nodeValue</OO> <OPERATOR>!=</OPERATOR> id<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (first<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> el <OPERATOR>||</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> hasOthers <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR>(<OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>hasOthers <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>uniques</OO>[<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getUIDHTML</OO>(el<CLOSER>)])</CLOSER> <OBJ>found</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(el<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (hasOthers<CLOSER>)</CLOSER> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>sort</OO>(found<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>/*&lt;/id-override&gt;*/</COMMENT>

<COMMENT>/*&lt;/overrides&gt;*/</COMMENT>

<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> <TYPE>document</TYPE> <OPERATOR>!=</OPERATOR> <STRING>'undefined'</STRING><CLOSER>)</CLOSER> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>setDocument</OO>(<TYPE>document</TYPE><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Slick</COMMENT>

<KEYWORD>var</KEYWORD> Slick <OPERATOR>=</OPERATOR> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO> <OPERATOR>=</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO> <OPERATOR>||</OPERATOR> {<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>version</OO> <OPERATOR>=</OPERATOR> <STRING>'0.9dev'</STRING><OPERATOR>;</OPERATOR>

<COMMENT>// Slick finder</COMMENT>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> expression<OPERATOR>,</OPERATOR> append<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(context<OPERATOR>,</OPERATOR> expression<OPERATOR>,</OPERATOR> append<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>find</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> expression<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(context<OPERATOR>,</OPERATOR> expression<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Slick containment checker</COMMENT>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(container<OPERATOR>,</OPERATOR> node<CLOSER>)</CLOSER>{
	<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>setDocument</OO>(container<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(container<OPERATOR>,</OPERATOR> node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Slick attribute getter</COMMENT>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> name<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(node<OPERATOR>,</OPERATOR> name<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Slick matcher</COMMENT>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>match</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> selector<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>(node <OPERATOR>&amp;&amp;</OPERATOR> selector<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>selector <OPERATOR>||</OPERATOR> selector <OPERATOR>===</OPERATOR> node<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> selector <OPERATOR>!=</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>setDocument</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>matchNode</OO>(node<OPERATOR>,</OPERATOR> selector<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Slick attribute accessor</COMMENT>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>defineAttributeGetter</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER>{
	<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>attributeGetters</OO>[name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> fn<OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>lookupAttributeGetter</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(name<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>attributeGetters</OO>[name<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Slick pseudo accessor</COMMENT>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>definePseudo</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER>{
	local[<STRING>'pseudo:'</STRING> <OPERATOR>+</OPERATOR> name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> argument<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(node<OPERATOR>,</OPERATOR> argument<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>lookupPseudo</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(name<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> pseudo <OPERATOR>=</OPERATOR> local[<STRING>'pseudo:'</STRING> <OPERATOR>+</OPERATOR> name<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (pseudo<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(argument<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>pseudo</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> argument<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Slick overrides accessor</COMMENT>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>override</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(regexp<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER>{
	<OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>override</OO>(regexp<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>isXML</OO> <OPERATOR>=</OPERATOR> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>isXML</OO><OPERATOR>;</OPERATOR>

<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>uidOf</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>local</OBJ><OPERATOR>.</OPERATOR><OO>getUIDHTML</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Slick</OO> <OPERATOR>=</OPERATOR> Slick<OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER><OPERATOR>.</OPERATOR><OO>apply</OO>(<COMMENT>/*&lt;CommonJS&gt;*/</COMMENT>(<KEYWORD>typeof</KEYWORD> exports <OPERATOR>!=</OPERATOR> <STRING>'undefined'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> exports <OPERATOR>:</OPERATOR> <COMMENT>/*&lt;/CommonJS&gt;*/</COMMENT><KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Element</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: One of the most important items in MooTools. Contains the dollar function, the dollars function, and an handful of cross-browser, time-saver methods to let you easily work with HTML Elements.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Window, Document, Array, String, Function, Number, Slick.Parser, Slick.Finder]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: [Element, Elements, $, $$, Iframe, Selectors]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<KEYWORD>var</KEYWORD> Element <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(tag<OPERATOR>,</OPERATOR> props<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> konstructor <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Constructors</OO>[tag<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (konstructor<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> konstructor(props<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> tag <OPERATOR>!=</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(tag<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>set</OO>(props<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>props<CLOSER>)</CLOSER> props <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>tag</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<REGEX>/^<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC>-<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR>$/</REGEX><CLOSER>))</CLOSER>{
		<KEYWORD>var</KEYWORD> parsed <OPERATOR>=</OPERATOR> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>parse</OO>(tag<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>expressions</OO>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		tag <OPERATOR>=</OPERATOR> (<OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>tag</OO> <OPERATOR>==</OPERATOR> <STRING>'*'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'div'</STRING> <OPERATOR>:</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>tag</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>id</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>id</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>id</OO> <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>id</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> attributes <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>attributes</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (attributes<CLOSER>)</CLOSER> <KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>attributes</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> attr <OPERATOR>=</OPERATOR> attributes[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>attr</OBJ><OPERATOR>.</OPERATOR><OO>value</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>attr</OBJ><OPERATOR>.</OPERATOR><OO>operator</OO> <OPERATOR>==</OPERATOR> <STRING>'='</STRING> <OPERATOR>&amp;&amp;</OPERATOR> props[<OBJ>attr</OBJ><OPERATOR>.</OPERATOR><OO>key</OO><CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER>
				props[<OBJ>attr</OBJ><OPERATOR>.</OPERATOR><OO>key</OO><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>attr</OBJ><OPERATOR>.</OPERATOR><OO>value</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<KEYWORD>if</KEYWORD> (<OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>classList</OO> <OPERATOR>&amp;&amp;</OPERATOR> props[<STRING>'class'</STRING><CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> props[<STRING>'class'</STRING><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>classList</OO><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>' '</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>newElement</OO>(tag<OPERATOR>,</OPERATOR> props<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Element</OO><CLOSER>)</CLOSER> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO> <OPERATOR>=</OPERATOR> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Element</OO><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>;</OPERATOR>

<KEYWORD>new</KEYWORD> Type(<STRING>'Element'</STRING><OPERATOR>,</OPERATOR> Element<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>mirror</OO>(<KEYWORD>function</KEYWORD>(name<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO>[name<CLOSER>])</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> obj <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	obj[name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> results <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> args <OPERATOR>=</OPERATOR> arguments<OPERATOR>,</OPERATOR> elements <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> element <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> result <OPERATOR>=</OPERATOR> results[i<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> element[name<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>apply</OO>(element<OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			elements <OPERATOR>=</OPERATOR> (elements <OPERATOR>&amp;&amp;</OPERATOR> typeOf(result<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'element'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> (elements<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>new</KEYWORD> Elements(results<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> results<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<OBJ>Elements</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(obj<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Element</OO><CLOSER>)</CLOSER>{
	<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO> <OPERATOR>=</OPERATOR> <TYPE>Object</TYPE><OPERATOR>;</OPERATOR>

	<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Prototype</OO> <OPERATOR>=</OPERATOR> {<STRING>'$family'</STRING><OPERATOR>:</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(<STRING>'element'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>hide</OO>(<CLOSER>)}</CLOSER><OPERATOR>;</OPERATOR>

	<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>mirror</OO>(<KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> method<CLOSER>)</CLOSER>{
		<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Prototype</OO>[name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> method<OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Constructors</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Constructors</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Hash<OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<KEYWORD>var</KEYWORD> IFrame <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Type(<STRING>'IFrame'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> params <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>link</OO>(arguments<OPERATOR>,</OPERATOR> {
		properties<OPERATOR>:</OPERATOR> <OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>isObject</OO><OPERATOR>,</OPERATOR>
		iframe<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(obj<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> (obj <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> props <OPERATOR>=</OPERATOR> <OBJ>params</OBJ><OPERATOR>.</OPERATOR><OO>properties</OO> <OPERATOR>||</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> iframe<OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OBJ>params</OBJ><OPERATOR>.</OPERATOR><OO>iframe</OO><CLOSER>)</CLOSER> iframe <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>params</OBJ><OPERATOR>.</OPERATOR><OO>iframe</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> onload <OPERATOR>=</OPERATOR> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>onload</OO> <OPERATOR>||</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>delete</KEYWORD> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>onload</OO><OPERATOR>;</OPERATOR>
	<OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>id</OO> <OPERATOR>=</OPERATOR> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>name</OO> <OPERATOR>=</OPERATOR> [<OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>id</OO><OPERATOR>,</OPERATOR> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>,</OPERATOR> iframe <OPERATOR>?</OPERATOR> (<OBJ>iframe</OBJ><OPERATOR>.</OPERATOR><OO>id</OO> <OPERATOR>||</OPERATOR> <OBJ>iframe</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <STRING>'IFrame_'</STRING> <OPERATOR>+</OPERATOR> <OBJ>String</OBJ><OPERATOR>.</OPERATOR><OO>uniqueID</OO>(<CLOSER>)]</CLOSER><OPERATOR>.</OPERATOR><OO>pick</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	iframe <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Element(iframe <OPERATOR>||</OPERATOR> <STRING>'iframe'</STRING><OPERATOR>,</OPERATOR> props<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> onLoad <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>onload</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<OBJ>iframe</OBJ><OPERATOR>.</OPERATOR><OO>contentWindow</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	
	<KEYWORD>if</KEYWORD> (<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>frames</OO>[<OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>id</OO><CLOSER>])</CLOSER> onLoad(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>else</KEYWORD> <OBJ>iframe</OBJ><OPERATOR>.</OPERATOR><OO>addListener</OO>(<STRING>'load'</STRING><OPERATOR>,</OPERATOR> onLoad<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> iframe<OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> Elements <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Elements</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(nodes<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (nodes <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>nodes</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> uniques <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> node<OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> node <OPERATOR>=</OPERATOR> nodes[i<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> uid <OPERATOR>=</OPERATOR> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>uidOf</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>uniques[uid<CLOSER>])</CLOSER>{
				uniques[uid<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(node<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Elements</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO> <OPERATOR>=</OPERATOR> {length<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<OBJ>Elements</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO> <OPERATOR>=</OPERATOR> <TYPE>Array</TYPE><OPERATOR>;</OPERATOR>

<KEYWORD>new</KEYWORD> Type(<STRING>'Elements'</STRING><OPERATOR>,</OPERATOR> Elements<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>implement</OO>({

	filter<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(filter<OPERATOR>,</OPERATOR> bind<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>filter<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Elements(<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> (typeOf(filter<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(filter<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR> filter<OPERATOR>,</OPERATOR> bind<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>protect</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	push<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> length <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> item <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(arguments[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (item<CLOSER>)</CLOSER> <KEYWORD>this</KEYWORD>[length<OPERATOR>++</OPERATOR><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> item<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>=</OPERATOR> length<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>protect</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	concat<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> newElements <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Elements(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> item <OPERATOR>=</OPERATOR> arguments[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>isEnumerable</OO>(item<CLOSER>))</CLOSER> <OBJ>newElements</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(item<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <OBJ>newElements</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(item<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> newElements<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>protect</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	append<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(collection<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>collection</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(collection[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>protect</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	empty<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>while</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <KEYWORD>delete</KEYWORD> <KEYWORD>this</KEYWORD>[<OPERATOR>--</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>protect</OO>(<CLOSER>)</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<COMMENT>// FF, IE</COMMENT>
<KEYWORD>var</KEYWORD> splice <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>splice</OO><OPERATOR>,</OPERATOR> object <OPERATOR>=</OPERATOR> {<STRING>'0'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <STRING>'1'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> length<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>splice</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(object<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<KEYWORD>if</KEYWORD> (object[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OBJ>Elements</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(<STRING>'splice'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> length <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
	<OBJ>splice</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>while</KEYWORD> (length <OPERATOR>&gt;=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <KEYWORD>delete</KEYWORD> <KEYWORD>this</KEYWORD>[length<OPERATOR>--</OPERATOR><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>protect</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Elements</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>mirror</OO>(Elements<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>/*&lt;ltIE8&gt;*/</COMMENT>
<KEYWORD>var</KEYWORD> createElementAcceptsHTML<OPERATOR>;</OPERATOR>
<KEYWORD>try</KEYWORD> {
	<KEYWORD>var</KEYWORD> x <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>'&lt;input name=x&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	createElementAcceptsHTML <OPERATOR>=</OPERATOR> (<OBJ>x</OBJ><OPERATOR>.</OPERATOR><OO>name</OO> <OPERATOR>==</OPERATOR> <STRING>'x'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER>

<KEYWORD>var</KEYWORD> escapeQuotes <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(html<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (<STRING>''</STRING> <OPERATOR>+</OPERATOR> html<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/&amp;/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>'&amp;amp;'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/"/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>'&amp;quot;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<COMMENT>/*&lt;/ltIE8&gt;*/</COMMENT>

<OBJ>Document</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	newElement<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(tag<OPERATOR>,</OPERATOR> props<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (props <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>checked</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>defaultChecked</OO> <OPERATOR>=</OPERATOR> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>checked</OO><OPERATOR>;</OPERATOR>
		<COMMENT>/*&lt;ltIE8&gt;*/</COMMENT><COMMENT>// Fix for readonly name and type properties in IE &lt; 8</COMMENT>
		<KEYWORD>if</KEYWORD> (createElementAcceptsHTML <OPERATOR>&amp;&amp;</OPERATOR> props<CLOSER>)</CLOSER>{
			tag <OPERATOR>=</OPERATOR> <STRING>'&lt;'</STRING> <OPERATOR>+</OPERATOR> tag<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><CLOSER>)</CLOSER> tag <OPERATOR>+=</OPERATOR> <STRING>' name="'</STRING> <OPERATOR>+</OPERATOR> escapeQuotes(<OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>'"'</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><CLOSER>)</CLOSER> tag <OPERATOR>+=</OPERATOR> <STRING>' type="'</STRING> <OPERATOR>+</OPERATOR> escapeQuotes(<OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>'"'</STRING><OPERATOR>;</OPERATOR>
			tag <OPERATOR>+=</OPERATOR> <STRING>'&gt;'</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>delete</KEYWORD> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>delete</KEYWORD> <OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<COMMENT>/*&lt;/ltIE8&gt;*/</COMMENT>
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(tag<CLOSER>))</CLOSER><OPERATOR>.</OPERATOR><OO>set</OO>(props<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Document</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	newTextNode<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(text<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>createTextNode</OO>(text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getDocument<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getWindow<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>window</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	id<OPERATOR>:</OPERATOR> (<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

		<KEYWORD>var</KEYWORD> types <OPERATOR>=</OPERATOR> {

			string<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(id<OPERATOR>,</OPERATOR> nocash<OPERATOR>,</OPERATOR> doc<CLOSER>)</CLOSER>{
				id <OPERATOR>=</OPERATOR> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>(doc<OPERATOR>,</OPERATOR> <STRING>'#'</STRING> <OPERATOR>+</OPERATOR> <OBJ>id</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\W</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>'<ESC>\\</ESC>$1'</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD> (id<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>element</OO>(id<OPERATOR>,</OPERATOR> nocash<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

			element<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(el<OPERATOR>,</OPERATOR> nocash<CLOSER>)</CLOSER>{
				$uid(el<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>nocash <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>$family</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>(<REGEX>/^object<REGEX_OPERATOR>|</REGEX_OPERATOR>embed$/<KEYWORD>i</KEYWORD></REGEX><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>tagName</OO><CLOSER>))</CLOSER>{
					<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(el<OPERATOR>,</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Prototype</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				<KEYWORD>return</KEYWORD> el<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

			object<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(obj<OPERATOR>,</OPERATOR> nocash<OPERATOR>,</OPERATOR> doc<CLOSER>)</CLOSER>{
				<KEYWORD>if</KEYWORD> (<OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>toElement</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>element</OO>(<OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>toElement</OO>(doc<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> nocash<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>

		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>textnode</OO> <OPERATOR>=</OPERATOR> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>whitespace</OO> <OPERATOR>=</OPERATOR> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>window</OO> <OPERATOR>=</OPERATOR> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>document</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(zero<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> zero<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(el<OPERATOR>,</OPERATOR> nocash<OPERATOR>,</OPERATOR> doc<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (el <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>$family</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>uid</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> el<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> typeOf(el<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> (types[type<CLOSER>])</CLOSER> <OPERATOR>?</OPERATOR> types[type<CLOSER>]</CLOSER>(el<OPERATOR>,</OPERATOR> nocash<OPERATOR>,</OPERATOR> doc <OPERATOR>||</OPERATOR> <TYPE>document</TYPE><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>$</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OBJ>Window</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(<STRING>'$'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(el<OPERATOR>,</OPERATOR> nc<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(el<OPERATOR>,</OPERATOR> nc<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Window</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	getDocument<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getWindow<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

[Document<OPERATOR>,</OPERATOR> Element<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>invoke</OO>(<STRING>'implement'</STRING><OPERATOR>,</OPERATOR> {

	getElements<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> expression<OPERATOR>,</OPERATOR> <KEYWORD>new</KEYWORD> Elements<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getElement<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> expression<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

(<KEYWORD>function</KEYWORD>(search<OPERATOR>,</OPERATOR> find<OPERATOR>,</OPERATOR> match<CLOSER>)</CLOSER>{

	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Selectors</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> pseudos <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Selectors</OO><OPERATOR>.</OPERATOR><OO>Pseudo</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Hash(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> addSlickPseudos <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> name <KEYWORD>in</KEYWORD> pseudos<CLOSER>)</CLOSER> <KEYWORD>if</KEYWORD> (<OBJ>pseudos</OBJ><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO>(name<CLOSER>))</CLOSER>{
			<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>definePseudo</OO>(name<OPERATOR>,</OPERATOR> pseudos[name<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>delete</KEYWORD> pseudos[name<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> expression<OPERATOR>,</OPERATOR> append<CLOSER>)</CLOSER>{
		addSlickPseudos(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>search</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> expression<OPERATOR>,</OPERATOR> append<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>find</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> expression<CLOSER>)</CLOSER>{
		addSlickPseudos(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>find</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> expression<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>match</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> selector<CLOSER>)</CLOSER>{
		addSlickPseudos(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> node<OPERATOR>,</OPERATOR> selector<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO><OPERATOR>,</OPERATOR> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>find</OO><OPERATOR>,</OPERATOR> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>match</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>$$</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OBJ>Window</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(<STRING>'$$'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(selector<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> elements <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Elements<OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> selector <OPERATOR>==</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>,</OPERATOR> selector<OPERATOR>,</OPERATOR> elements<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> args <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>flatten</OO>(arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>args</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> item <OPERATOR>=</OPERATOR> args[i<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>switch</KEYWORD> (typeOf(item<CLOSER>))</CLOSER>{
			<KEYWORD>case</KEYWORD> <STRING>'element'</STRING><OPERATOR>:</OPERATOR> <OBJ>elements</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(item<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'string'</STRING><OPERATOR>:</OPERATOR> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>,</OPERATOR> item<OPERATOR>,</OPERATOR> elements<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> elements<OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<KEYWORD>if</KEYWORD> (<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>$$</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OBJ>Window</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(<STRING>'$$'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(selector<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> selector <OPERATOR>==</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>,</OPERATOR> selector<OPERATOR>,</OPERATOR> <KEYWORD>new</KEYWORD> Elements<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>isEnumerable</OO>(selector<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Elements(selector<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Elements(arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<KEYWORD>var</KEYWORD> collected <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> storage <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> props <OPERATOR>=</OPERATOR> {input<OPERATOR>:</OPERATOR> <STRING>'checked'</STRING><OPERATOR>,</OPERATOR> option<OPERATOR>:</OPERATOR> <STRING>'selected'</STRING><OPERATOR>,</OPERATOR> textarea<OPERATOR>:</OPERATOR> <STRING>'value'</STRING><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> get <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(uid<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (storage[uid<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> (storage[uid<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> {<CLOSER>}))</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> clean <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(item<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>removeEvents</OO><CLOSER>)</CLOSER> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>removeEvents</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>clearAttributes</OO><CLOSER>)</CLOSER> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>clearAttributes</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> uid <OPERATOR>=</OPERATOR> <OBJ>item</OBJ><OPERATOR>.</OPERATOR><OO>uid</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (uid <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER>{
		<KEYWORD>delete</KEYWORD> collected[uid<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>delete</KEYWORD> storage[uid<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
	<KEYWORD>return</KEYWORD> item<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> camels <OPERATOR>=</OPERATOR> [<STRING>'defaultValue'</STRING><OPERATOR>,</OPERATOR> <STRING>'accessKey'</STRING><OPERATOR>,</OPERATOR> <STRING>'cellPadding'</STRING><OPERATOR>,</OPERATOR> <STRING>'cellSpacing'</STRING><OPERATOR>,</OPERATOR> <STRING>'colSpan'</STRING><OPERATOR>,</OPERATOR> <STRING>'frameBorder'</STRING><OPERATOR>,</OPERATOR> <STRING>'maxLength'</STRING><OPERATOR>,</OPERATOR> <STRING>'readOnly'</STRING><OPERATOR>,</OPERATOR>
	<STRING>'rowSpan'</STRING><OPERATOR>,</OPERATOR> <STRING>'tabIndex'</STRING><OPERATOR>,</OPERATOR> <STRING>'useMap'</STRING>
<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> bools <OPERATOR>=</OPERATOR> [<STRING>'compact'</STRING><OPERATOR>,</OPERATOR> <STRING>'nowrap'</STRING><OPERATOR>,</OPERATOR> <STRING>'ismap'</STRING><OPERATOR>,</OPERATOR> <STRING>'declare'</STRING><OPERATOR>,</OPERATOR> <STRING>'noshade'</STRING><OPERATOR>,</OPERATOR> <STRING>'checked'</STRING><OPERATOR>,</OPERATOR> <STRING>'disabled'</STRING><OPERATOR>,</OPERATOR> <STRING>'readOnly'</STRING><OPERATOR>,</OPERATOR> <STRING>'multiple'</STRING><OPERATOR>,</OPERATOR> <STRING>'selected'</STRING><OPERATOR>,</OPERATOR>
	<STRING>'noresize'</STRING><OPERATOR>,</OPERATOR> <STRING>'defer'</STRING>
<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
 <KEYWORD>var</KEYWORD> attributes <OPERATOR>=</OPERATOR> {
	<STRING>'html'</STRING><OPERATOR>:</OPERATOR> <STRING>'innerHTML'</STRING><OPERATOR>,</OPERATOR>
	<STRING>'class'</STRING><OPERATOR>:</OPERATOR> <STRING>'className'</STRING><OPERATOR>,</OPERATOR>
	<STRING>'for'</STRING><OPERATOR>:</OPERATOR> <STRING>'htmlFor'</STRING><OPERATOR>,</OPERATOR>
	<STRING>'text'</STRING><OPERATOR>:</OPERATOR> (<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> temp <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>'div'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (<OBJ>temp</OBJ><OPERATOR>.</OPERATOR><OO>innerText</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'textContent'</STRING> <OPERATOR>:</OPERATOR> <STRING>'innerText'</STRING><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> readOnly <OPERATOR>=</OPERATOR> [<STRING>'type'</STRING><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> expandos <OPERATOR>=</OPERATOR> [<STRING>'value'</STRING><OPERATOR>,</OPERATOR> <STRING>'defaultValue'</STRING><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> uriAttrs <OPERATOR>=</OPERATOR> <REGEX>/^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>href<REGEX_OPERATOR>|</REGEX_OPERATOR>src<REGEX_OPERATOR>|</REGEX_OPERATOR>usemap<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$/<KEYWORD>i</KEYWORD></REGEX><OPERATOR>;</OPERATOR>

bools <OPERATOR>=</OPERATOR> <OBJ>bools</OBJ><OPERATOR>.</OPERATOR><OO>associate</OO>(bools<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
camels <OPERATOR>=</OPERATOR> <OBJ>camels</OBJ><OPERATOR>.</OPERATOR><OO>associate</OO>(<OBJ>camels</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<OBJ>String</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
readOnly <OPERATOR>=</OPERATOR> <OBJ>readOnly</OBJ><OPERATOR>.</OPERATOR><OO>associate</OO>(readOnly<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(attributes<OPERATOR>,</OPERATOR> <OBJ>expandos</OBJ><OPERATOR>.</OPERATOR><OO>associate</OO>(expandos<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> inserters <OPERATOR>=</OPERATOR> {

	before<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> element<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (parent<CLOSER>)</CLOSER> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>(context<OPERATOR>,</OPERATOR> element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	after<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> element<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (parent<CLOSER>)</CLOSER> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>(context<OPERATOR>,</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	bottom<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> element<CLOSER>)</CLOSER>{
		<OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>(context<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	top<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(context<OPERATOR>,</OPERATOR> element<CLOSER>)</CLOSER>{
		<OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>(context<OPERATOR>,</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>inserters</OBJ><OPERATOR>.</OPERATOR><OO>inside</OO> <OPERATOR>=</OPERATOR> <OBJ>inserters</OBJ><OPERATOR>.</OPERATOR><OO>bottom</OO><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(inserters<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(inserter<OPERATOR>,</OPERATOR> where<CLOSER>)</CLOSER>{

	where <OPERATOR>=</OPERATOR> <OBJ>where</OBJ><OPERATOR>.</OPERATOR><OO>capitalize</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> methods <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	methods[<STRING>'inject'</STRING> <OPERATOR>+</OPERATOR> where<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(el<CLOSER>)</CLOSER>{
		inserter(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(el<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	methods[<STRING>'grab'</STRING> <OPERATOR>+</OPERATOR> where<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(el<CLOSER>)</CLOSER>{
		inserter(<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(el<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(methods<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<KEYWORD>var</KEYWORD> injectCombinator <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(expression<OPERATOR>,</OPERATOR> combinator<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>expression<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> combinator<OPERATOR>;</OPERATOR>

	expression <OPERATOR>=</OPERATOR> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>parse</OO>(expression<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> expressions <OPERATOR>=</OPERATOR> <OBJ>expression</OBJ><OPERATOR>.</OPERATOR><OO>expressions</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>expressions</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER>
		expressions[i<CLOSER>]</CLOSER>[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>combinator</OO> <OPERATOR>=</OPERATOR> combinator<OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> expression<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(prop<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> property <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO>[prop<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		(property <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>set</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>set</OO><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setProperty</OO>(prop<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>overloadSetter</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(prop<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> property <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO>[prop<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (property <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>get</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>get</OO><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getProperty</OO>(prop<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>overloadGetter</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>

	erase<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(prop<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> property <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO>[prop<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		(property <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>erase</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>erase</OO><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeProperty</OO>(prop<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	setProperty<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(attribute<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
		attribute <OPERATOR>=</OPERATOR> camels[attribute<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> attribute<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (value <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeProperty</OO>(attribute<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> key <OPERATOR>=</OPERATOR> attributes[attribute<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		(key<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> value <OPERATOR>:</OPERATOR>
			(bools[attribute<CLOSER>])</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>this</KEYWORD>[attribute<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR>value <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setAttribute</OO>(attribute<OPERATOR>,</OPERATOR> <STRING>''</STRING> <OPERATOR>+</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	setProperties<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(attributes<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> attribute <KEYWORD>in</KEYWORD> attributes<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setProperty</OO>(attribute<OPERATOR>,</OPERATOR> attributes[attribute<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getProperty<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(attribute<CLOSER>)</CLOSER>{
		attribute <OPERATOR>=</OPERATOR> camels[attribute<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> attribute<OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> key <OPERATOR>=</OPERATOR> attributes[attribute<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> readOnly[attribute<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (key<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR>
			(bools[attribute<CLOSER>])</CLOSER> <OPERATOR>?</OPERATOR> <OPERATOR>!!</OPERATOR><KEYWORD>this</KEYWORD>[attribute<CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR>
			(<OBJ>uriAttrs</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(attribute<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(attribute<OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR>
			(key <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>(attribute<CLOSER>))</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>key</OBJ><OPERATOR>.</OPERATOR><OO>nodeValue</OO> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getProperties<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> args <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>args</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getProperty</OO><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>associate</OO>(args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	removeProperty<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(attribute<CLOSER>)</CLOSER>{
		attribute <OPERATOR>=</OPERATOR> camels[attribute<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> attribute<OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> key <OPERATOR>=</OPERATOR> attributes[attribute<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		(key<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>this</KEYWORD>[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <STRING>''</STRING> <OPERATOR>:</OPERATOR>
			(bools[attribute<CLOSER>])</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>this</KEYWORD>[attribute<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeAttribute</OO>(attribute<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	removeProperties<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(arguments<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeProperty</OO><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	hasClass<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(className<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>className</OO><OPERATOR>.</OPERATOR><OO>clean</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>contains</OO>(className<OPERATOR>,</OPERATOR> <STRING>' '</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	addClass<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(className<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>hasClass</OO>(className<CLOSER>))</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>=</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> className<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>clean</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	removeClass<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(className<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>className</OO><OPERATOR>.</OPERATOR><OO>replace</OO>(<KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(<STRING>'(^|<ESC>\\</ESC>s)'</STRING> <OPERATOR>+</OPERATOR> className <OPERATOR>+</OPERATOR> <STRING>'(?:<ESC>\\</ESC>s|$)'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <STRING>'$1'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	toggleClass<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(className<OPERATOR>,</OPERATOR> force<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (force <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> force <OPERATOR>=</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>hasClass</OO>(className<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (force<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addClass</OO>(className<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeClass</OO>(className<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	adopt<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fragment<OPERATOR>,</OPERATOR> elements <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>flatten</OO>(arguments<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> length <OPERATOR>=</OPERATOR> <OBJ>elements</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (length <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> parent <OPERATOR>=</OPERATOR> fragment <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createDocumentFragment</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> length<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> element <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(elements[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (element<CLOSER>)</CLOSER> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>(element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<KEYWORD>if</KEYWORD> (fragment<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>(fragment<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	appendText<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(text<OPERATOR>,</OPERATOR> where<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>grab</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getDocument</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>newTextNode</OO>(text<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> where<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	grab<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(el<OPERATOR>,</OPERATOR> where<CLOSER>)</CLOSER>{
		inserters[where <OPERATOR>||</OPERATOR> <STRING>'bottom'</STRING><CLOSER>]</CLOSER>(<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(el<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	inject<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(el<OPERATOR>,</OPERATOR> where<CLOSER>)</CLOSER>{
		inserters[where <OPERATOR>||</OPERATOR> <STRING>'bottom'</STRING><CLOSER>]</CLOSER>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(el<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	replaces<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(el<CLOSER>)</CLOSER>{
		el <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(el<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>replaceChild</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> el<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	wraps<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(el<OPERATOR>,</OPERATOR> where<CLOSER>)</CLOSER>{
		el <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(el<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>replaces</OO>(el<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>grab</OO>(el<OPERATOR>,</OPERATOR> where<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getPrevious<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> injectCombinator(expression<OPERATOR>,</OPERATOR> <STRING>'!~'</STRING><CLOSER>)))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getAllPrevious<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> injectCombinator(expression<OPERATOR>,</OPERATOR> <STRING>'!~'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>new</KEYWORD> Elements<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getNext<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> injectCombinator(expression<OPERATOR>,</OPERATOR> <STRING>'~'</STRING><CLOSER>)))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getAllNext<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> injectCombinator(expression<OPERATOR>,</OPERATOR> <STRING>'~'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>new</KEYWORD> Elements<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getFirst<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> injectCombinator(expression<OPERATOR>,</OPERATOR> <STRING>'&gt;'</STRING><CLOSER>))</CLOSER>[<NUMERIC>0</NUMERIC><CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getLast<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> injectCombinator(expression<OPERATOR>,</OPERATOR> <STRING>'&gt;'</STRING><CLOSER>))</CLOSER><OPERATOR>.</OPERATOR><OO>getLast</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getParent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> injectCombinator(expression<OPERATOR>,</OPERATOR> <STRING>'!'</STRING><CLOSER>)))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getParents<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> injectCombinator(expression<OPERATOR>,</OPERATOR> <STRING>'!'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>new</KEYWORD> Elements<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getSiblings<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> injectCombinator(expression<OPERATOR>,</OPERATOR> <STRING>'~~'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>new</KEYWORD> Elements<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getChildren<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> injectCombinator(expression<OPERATOR>,</OPERATOR> <STRING>'&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>new</KEYWORD> Elements<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getWindow<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>.</OPERATOR><OO>window</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getDocument<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getElementById<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(id<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>'#'</STRING> <OPERATOR>+</OPERATOR> (<STRING>''</STRING> <OPERATOR>+</OPERATOR> id<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\W</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>'<ESC>\\</ESC>$1'</STRING><CLOSER>)))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getSelected<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selectedIndex</OO><OPERATOR>;</OPERATOR> <COMMENT>// Safari 3.2.1</COMMENT>
		<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Elements(<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>filter</OO>(<KEYWORD>function</KEYWORD>(option<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>option</OBJ><OPERATOR>.</OPERATOR><OO>selected</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	toQueryString<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> queryString <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getElements</OO>(<STRING>'input, select, textarea'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(el<CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> <OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>name</OO> <OPERATOR>||</OPERATOR> <OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>disabled</OO> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'submit'</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'reset'</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'file'</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'image'</STRING><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>

			<KEYWORD>var</KEYWORD> value <OPERATOR>=</OPERATOR> (<OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'tag'</STRING><CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'select'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>getSelected</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>(opt<CLOSER>)</CLOSER>{
				<COMMENT>// IE</COMMENT>
				<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(opt<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'value'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>})</CLOSER> <OPERATOR>:</OPERATOR> ((type <OPERATOR>==</OPERATOR> <STRING>'radio'</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'checkbox'</STRING><CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>checked</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>:</OPERATOR> <OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'value'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

			<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(value<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(val<CLOSER>)</CLOSER>{
				<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> val <OPERATOR>!=</OPERATOR> <STRING>'undefined'</STRING><CLOSER>)</CLOSER> <OBJ>queryString</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(<FUNCTION>encodeURIComponent</FUNCTION>(<OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>'='</STRING> <OPERATOR>+</OPERATOR> <FUNCTION>encodeURIComponent</FUNCTION>(val<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>queryString</OBJ><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>'&amp;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	clone<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(contents<OPERATOR>,</OPERATOR> keepid<CLOSER>)</CLOSER>{
		contents <OPERATOR>=</OPERATOR> contents <OPERATOR>!==</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> clone <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>cloneNode</OO>(contents<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> clean <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(node<OPERATOR>,</OPERATOR> element<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>keepid<CLOSER>)</CLOSER> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>removeAttribute</OO>(<STRING>'id'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>ie</OO><CLOSER>)</CLOSER>{
				<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>clearAttributes</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>mergeAttributes</OO>(element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>removeAttribute</OO>(<STRING>'uid'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><CLOSER>)</CLOSER>{
					<KEYWORD>var</KEYWORD> no <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>,</OPERATOR> eo <OPERATOR>=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>;</OPERATOR>
					<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> j <OPERATOR>=</OPERATOR> <OBJ>no</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> j<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER> no[j<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>selected</OO> <OPERATOR>=</OPERATOR> eo[j<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>selected</OO><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
			<CLOSER>}</CLOSER>
			<KEYWORD>var</KEYWORD> prop <OPERATOR>=</OPERATOR> props[<OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>tagName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>)]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (prop <OPERATOR>&amp;&amp;</OPERATOR> element[prop<CLOSER>])</CLOSER> node[prop<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> element[prop<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> i<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (contents<CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> ce <OPERATOR>=</OPERATOR> <OBJ>clone</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>'*'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> te <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>'*'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <OBJ>ce</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER> clean(ce[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> te[i<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		clean(clone<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>ie</OO><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> ts <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>'object'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
				cs <OPERATOR>=</OPERATOR> <OBJ>clone</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>'object'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
				tl <OPERATOR>=</OPERATOR> <OBJ>ts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR> cl <OPERATOR>=</OPERATOR> <OBJ>cs</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> tl <OPERATOR>&amp;&amp;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> cl<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR><CLOSER>)</CLOSER>
				cs[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>outerHTML</OO> <OPERATOR>=</OPERATOR> ts[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>outerHTML</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(clone<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	destroy<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> children <OPERATOR>=</OPERATOR> clean(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>'*'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(children<OPERATOR>,</OPERATOR> clean<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>dispose</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	empty<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>dispose</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	dispose<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>removeChild</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	match<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(expression<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OPERATOR>!</OPERATOR>expression <OPERATOR>||</OPERATOR> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> expression<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> contains <OPERATOR>=</OPERATOR> {contains<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(element<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <OBJ>Slick</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO><CLOSER>)</CLOSER> <OBJ>Document</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(contains<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>'div'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>contains</OO><CLOSER>)</CLOSER> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(contains<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(<STRING>'hasChild'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(element<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD> <OPERATOR>!==</OPERATOR> element <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

[Element<OPERATOR>,</OPERATOR> Window<OPERATOR>,</OPERATOR> Document<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>invoke</OO>(<STRING>'implement'</STRING><OPERATOR>,</OPERATOR> {

	addListener<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(type<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (type <OPERATOR>==</OPERATOR> <STRING>'unload'</STRING><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> old <OPERATOR>=</OPERATOR> fn<OPERATOR>,</OPERATOR> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
			fn <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
				<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>removeListener</OO>(<STRING>'unload'</STRING><OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				old(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
			collected[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uid</OO><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO>(type<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO>(<STRING>'on'</STRING> <OPERATOR>+</OPERATOR> type<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	removeListener<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(type<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeEventListener</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeEventListener</OO>(type<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>detachEvent</OO>(<STRING>'on'</STRING> <OPERATOR>+</OPERATOR> type<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	retrieve<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(property<OPERATOR>,</OPERATOR> dflt<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> storage <OPERATOR>=</OPERATOR> get(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uid</OO><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> prop <OPERATOR>=</OPERATOR> storage[property<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (dflt <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> prop <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> prop <OPERATOR>=</OPERATOR> storage[property<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> dflt<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> prop <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> prop <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	store<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(property<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> storage <OPERATOR>=</OPERATOR> get(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uid</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		storage[property<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	eliminate<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(property<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> storage <OPERATOR>=</OPERATOR> get(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>uid</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>delete</KEYWORD> storage[property<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// IE purge</COMMENT>
<KEYWORD>if</KEYWORD> (<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO><CLOSER>)</CLOSER> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>addListener</OO>(<STRING>'unload'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(collected<OPERATOR>,</OPERATOR> clean<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>CollectGarbage</OO><CLOSER>)</CLOSER> CollectGarbage(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Hash<OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>style</OO> <OPERATOR>=</OPERATOR> {

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(style<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>cssText</OO> <OPERATOR>=</OPERATOR> style<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>cssText</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	erase<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>cssText</OO> <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>tag</OO> <OPERATOR>=</OPERATOR> {

	get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>tagName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

(<KEYWORD>function</KEYWORD>(maxLength<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (maxLength <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>maxlength</OO> <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>maxLength</OO> <OPERATOR>=</OPERATOR> {
		get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> maxlength <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>'maxLength'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> maxlength <OPERATOR>==</OPERATOR> maxLength <OPERATOR>?</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>:</OPERATOR> maxlength<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER>(<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>'input'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>'maxLength'</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>html</OO> <OPERATOR>=</OPERATOR> (<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

	<KEYWORD>var</KEYWORD> tableTest <OPERATOR>=</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>attempt</OO>(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> table <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>'table'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>table</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>'&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;'</STRING><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> wrapper <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>'div'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> translations <OPERATOR>=</OPERATOR> {
		table<OPERATOR>:</OPERATOR> [<NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <STRING>'&lt;table&gt;'</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;/table&gt;'</STRING><CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>
		select<OPERATOR>:</OPERATOR> [<NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <STRING>'&lt;select&gt;'</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;/select&gt;'</STRING><CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>
		tbody<OPERATOR>:</OPERATOR> [<NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <STRING>'&lt;table&gt;&lt;tbody&gt;'</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;/tbody&gt;&lt;/table&gt;'</STRING><CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>
		tr<OPERATOR>:</OPERATOR> [<NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <STRING>'&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;'</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'</STRING><CLOSER>]</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>translations</OBJ><OPERATOR>.</OPERATOR><OO>thead</OO> <OPERATOR>=</OPERATOR> <OBJ>translations</OBJ><OPERATOR>.</OPERATOR><OO>tfoot</OO> <OPERATOR>=</OPERATOR> <OBJ>translations</OBJ><OPERATOR>.</OPERATOR><OO>tbody</OO><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> html <OPERATOR>=</OPERATOR> {
		set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> html <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>flatten</OO>(arguments<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> wrap <OPERATOR>=</OPERATOR> (<OPERATOR>!</OPERATOR>tableTest <OPERATOR>&amp;&amp;</OPERATOR> translations[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'tag'</STRING><CLOSER>)])</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (wrap<CLOSER>)</CLOSER>{
				<KEYWORD>var</KEYWORD> first <OPERATOR>=</OPERATOR> wrapper<OPERATOR>;</OPERATOR>
				<OBJ>first</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> wrap[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>+</OPERATOR> html <OPERATOR>+</OPERATOR> wrap[<NUMERIC>2</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> wrap[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER> first <OPERATOR>=</OPERATOR> <OBJ>first</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>empty</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>adopt</OO>(<OBJ>first</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> html<OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

	<OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>erase</OO> <OPERATOR>=</OPERATOR> <OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>set</OO><OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> html<OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Element.Style</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains methods for interacting with the styles of Elements in a fashionable way.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Element</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Element.Style</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<KEYWORD>var</KEYWORD> html <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>html</OO><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>styles</OO> <OPERATOR>=</OPERATOR> {set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(styles<CLOSER>)</CLOSER>{
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setStyles</OO>(styles<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> hasOpacity <OPERATOR>=</OPERATOR> (<OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>opacity</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> reAlpha <OPERATOR>=</OPERATOR> <REGEX>/alpha<ESC>\(</ESC>opacity=<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\d</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\)</ESC>/<KEYWORD>i</KEYWORD></REGEX><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> setOpacity <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(element<OPERATOR>,</OPERATOR> opacity<CLOSER>)</CLOSER>{
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO><OPERATOR>.</OPERATOR><OO>hasLayout</OO><CLOSER>)</CLOSER> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>zoom</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (hasOpacity<CLOSER>)</CLOSER>{
		<OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>opacity</OO> <OPERATOR>=</OPERATOR> opacity<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
		opacity <OPERATOR>=</OPERATOR> (opacity <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>''</STRING> <OPERATOR>:</OPERATOR> <STRING>'alpha(opacity='</STRING> <OPERATOR>+</OPERATOR> opacity <OPERATOR>*</OPERATOR> <NUMERIC>100</NUMERIC> <OPERATOR>+</OPERATOR> <STRING>')'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> filter <OPERATOR>=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>filter</OO> <OPERATOR>||</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>getComputedStyle</OO>(<STRING>'filter'</STRING><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
		<OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>filter</OO> <OPERATOR>=</OPERATOR> <OBJ>filter</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(reAlpha<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>filter</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(reAlpha<OPERATOR>,</OPERATOR> opacity<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> filter <OPERATOR>+</OPERATOR> opacity<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>opacity</OO> <OPERATOR>=</OPERATOR> {

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(opacity<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> visibility <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>visibility</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (opacity <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> visibility <OPERATOR>!=</OPERATOR> <STRING>'hidden'</STRING><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>visibility</OO> <OPERATOR>=</OPERATOR> <STRING>'hidden'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (opacity <OPERATOR>!=</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> visibility <OPERATOR>!=</OPERATOR> <STRING>'visible'</STRING><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>visibility</OO> <OPERATOR>=</OPERATOR> <STRING>'visible'</STRING><OPERATOR>;</OPERATOR>

		setOpacity(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> opacity<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	get<OPERATOR>:</OPERATOR> (hasOpacity<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> opacity <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>opacity</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getComputedStyle</OO>(<STRING>'opacity'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (opacity <OPERATOR>==</OPERATOR> <STRING>''</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> opacity<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> opacity<OPERATOR>,</OPERATOR> filter <OPERATOR>=</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>filter</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getComputedStyle</OO>(<STRING>'filter'</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (filter<CLOSER>)</CLOSER> opacity <OPERATOR>=</OPERATOR> <OBJ>filter</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(reAlpha<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (opacity <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>||</OPERATOR> filter <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> (opacity[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>/</OPERATOR> <NUMERIC>100</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> floatName <OPERATOR>=</OPERATOR> (<OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>cssFloat</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'styleFloat'</STRING> <OPERATOR>:</OPERATOR> <STRING>'cssFloat'</STRING><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	getComputedStyle<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(property<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO>[<OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>camelCase</OO>(<CLOSER>)]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> defaultView <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>getDocument</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>defaultView</OO><OPERATOR>,</OPERATOR>
			computed <OPERATOR>=</OPERATOR> defaultView <OPERATOR>?</OPERATOR> <OBJ>defaultView</OBJ><OPERATOR>.</OPERATOR><OO>getComputedStyle</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (computed<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>computed</OBJ><OPERATOR>.</OPERATOR><OO>getPropertyValue</OO>((property <OPERATOR>==</OPERATOR> floatName<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'float'</STRING> <OPERATOR>:</OPERATOR> <OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>hyphenate</OO>(<CLOSER>))</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	setOpacity<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
		setOpacity(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getOpacity<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'opacity'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	setStyle<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(property<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
		<KEYWORD>switch</KEYWORD> (property<CLOSER>)</CLOSER>{
			<KEYWORD>case</KEYWORD> <STRING>'opacity'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>set</OO>(<STRING>'opacity'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>parseFloat</FUNCTION>(value<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'float'</STRING><OPERATOR>:</OPERATOR> property <OPERATOR>=</OPERATOR> floatName<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		property <OPERATOR>=</OPERATOR> <OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>camelCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (typeOf(value<CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> map <OPERATOR>=</OPERATOR> (<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Styles</OO>[property<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <STRING>'@'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>' '</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			value <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(value<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>(val<OPERATOR>,</OPERATOR> i<CLOSER>)</CLOSER>{
				<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>map[i<CLOSER>])</CLOSER> <KEYWORD>return</KEYWORD> <STRING>''</STRING><OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD> (typeOf(val<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'number'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> map[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>replace</OO>(<STRING>'@'</STRING><OPERATOR>,</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>round</OO>(val<CLOSER>))</CLOSER> <OPERATOR>:</OPERATOR> val<OPERATOR>;</OPERATOR>
			<CLOSER>})</CLOSER><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>' '</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (value <OPERATOR>==</OPERATOR> <TYPE>String</TYPE>(<TYPE>Number</TYPE>(value<CLOSER>)))</CLOSER>{
			value <OPERATOR>=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>round</OO>(value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>[property<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getStyle<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(property<CLOSER>)</CLOSER>{
		<KEYWORD>switch</KEYWORD> (property<CLOSER>)</CLOSER>{
			<KEYWORD>case</KEYWORD> <STRING>'opacity'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'opacity'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'float'</STRING><OPERATOR>:</OPERATOR> property <OPERATOR>=</OPERATOR> floatName<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		property <OPERATOR>=</OPERATOR> <OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>camelCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> result <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>[property<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>result <OPERATOR>||</OPERATOR> property <OPERATOR>==</OPERATOR> <STRING>'zIndex'</STRING><CLOSER>)</CLOSER>{
			result <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> style <KEYWORD>in</KEYWORD> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>ShortStyles</OO><CLOSER>)</CLOSER>{
				<KEYWORD>if</KEYWORD> (property <OPERATOR>!=</OPERATOR> style<CLOSER>)</CLOSER> <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
				<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> s <KEYWORD>in</KEYWORD> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>ShortStyles</OO>[style<CLOSER>])</CLOSER> <OBJ>result</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getStyle</OO>(s<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD> <OBJ>result</OBJ><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>' '</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			result <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getComputedStyle</OO>(property<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>if</KEYWORD> (result<CLOSER>)</CLOSER>{
			result <OPERATOR>=</OPERATOR> <TYPE>String</TYPE>(result<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> color <OPERATOR>=</OPERATOR> <OBJ>result</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/rgba<REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\(</ESC><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\d</ESC><ESC>\s</ESC>,<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><ESC>\)</ESC>/</REGEX><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (color<CLOSER>)</CLOSER> result <OPERATOR>=</OPERATOR> <OBJ>result</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(color[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> color[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>rgbToHex</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>opera</OO> <OPERATOR>||</OPERATOR> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>ie</OO> <OPERATOR>&amp;&amp;</OPERATOR> <FUNCTION>isNaN</FUNCTION>(<FUNCTION>parseFloat</FUNCTION>(result<CLOSER>))))</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<REGEX>/^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>height<REGEX_OPERATOR>|</REGEX_OPERATOR>width<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$/</REGEX><CLOSER>))</CLOSER>{
				<KEYWORD>var</KEYWORD> values <OPERATOR>=</OPERATOR> (property <OPERATOR>==</OPERATOR> <STRING>'width'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> [<STRING>'left'</STRING><OPERATOR>,</OPERATOR> <STRING>'right'</STRING><CLOSER>]</CLOSER> <OPERATOR>:</OPERATOR> [<STRING>'top'</STRING><OPERATOR>,</OPERATOR> <STRING>'bottom'</STRING><CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> size <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
				<OBJ>values</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
					size <OPERATOR>+=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getStyle</OO>(<STRING>'border-'</STRING> <OPERATOR>+</OPERATOR> value <OPERATOR>+</OPERATOR> <STRING>'-width'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toInt</OO>(<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getStyle</OO>(<STRING>'padding-'</STRING> <OPERATOR>+</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toInt</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD>[<STRING>'offset'</STRING> <OPERATOR>+</OPERATOR> <OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>capitalize</OO>(<CLOSER>)]</CLOSER> <OPERATOR>-</OPERATOR> size <OPERATOR>+</OPERATOR> <STRING>'px'</STRING><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>opera</OO> <OPERATOR>&amp;&amp;</OPERATOR> <TYPE>String</TYPE>(result<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>'px'</STRING><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> result<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>property</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<REGEX>/<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>border<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>Width<REGEX_OPERATOR>|</REGEX_OPERATOR>margin<REGEX_OPERATOR>|</REGEX_OPERATOR>padding<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>/</REGEX><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <STRING>'0px'</STRING><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> result<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	setStyles<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(styles<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> style <KEYWORD>in</KEYWORD> styles<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setStyle</OO>(style<OPERATOR>,</OPERATOR> styles[style<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getStyles<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> result <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>flatten</OO>(arguments<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(key<CLOSER>)</CLOSER>{
			result[key<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getStyle</OO>(key<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> result<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Styles</OO> <OPERATOR>=</OPERATOR> {
	left<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> top<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> bottom<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> right<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR>
	width<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> maxWidth<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> maxHeight<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> minWidth<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> minHeight<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR>
	backgroundColor<OPERATOR>:</OPERATOR> <STRING>'rgb(@, @, @)'</STRING><OPERATOR>,</OPERATOR> backgroundPosition<OPERATOR>:</OPERATOR> <STRING>'@px @px'</STRING><OPERATOR>,</OPERATOR> color<OPERATOR>:</OPERATOR> <STRING>'rgb(@, @, @)'</STRING><OPERATOR>,</OPERATOR>
	fontSize<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> letterSpacing<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> lineHeight<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> clip<OPERATOR>:</OPERATOR> <STRING>'rect(@px @px @px @px)'</STRING><OPERATOR>,</OPERATOR>
	margin<OPERATOR>:</OPERATOR> <STRING>'@px @px @px @px'</STRING><OPERATOR>,</OPERATOR> padding<OPERATOR>:</OPERATOR> <STRING>'@px @px @px @px'</STRING><OPERATOR>,</OPERATOR> border<OPERATOR>:</OPERATOR> <STRING>'@px @ rgb(@, @, @) @px @ rgb(@, @, @) @px @ rgb(@, @, @)'</STRING><OPERATOR>,</OPERATOR>
	borderWidth<OPERATOR>:</OPERATOR> <STRING>'@px @px @px @px'</STRING><OPERATOR>,</OPERATOR> borderStyle<OPERATOR>:</OPERATOR> <STRING>'@ @ @ @'</STRING><OPERATOR>,</OPERATOR> borderColor<OPERATOR>:</OPERATOR> <STRING>'rgb(@, @, @) rgb(@, @, @) rgb(@, @, @) rgb(@, @, @)'</STRING><OPERATOR>,</OPERATOR>
	zIndex<OPERATOR>:</OPERATOR> <STRING>'@'</STRING><OPERATOR>,</OPERATOR> <STRING>'zoom'</STRING><OPERATOR>:</OPERATOR> <STRING>'@'</STRING><OPERATOR>,</OPERATOR> fontWeight<OPERATOR>:</OPERATOR> <STRING>'@'</STRING><OPERATOR>,</OPERATOR> textIndent<OPERATOR>:</OPERATOR> <STRING>'@px'</STRING><OPERATOR>,</OPERATOR> opacity<OPERATOR>:</OPERATOR> <STRING>'@'</STRING>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Styles</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Hash(<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Styles</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>ShortStyles</OO> <OPERATOR>=</OPERATOR> {margin<OPERATOR>:</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> padding<OPERATOR>:</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> border<OPERATOR>:</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> borderWidth<OPERATOR>:</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> borderStyle<OPERATOR>:</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> borderColor<OPERATOR>:</OPERATOR> {<CLOSER>}}</CLOSER><OPERATOR>;</OPERATOR>

[<STRING>'Top'</STRING><OPERATOR>,</OPERATOR> <STRING>'Right'</STRING><OPERATOR>,</OPERATOR> <STRING>'Bottom'</STRING><OPERATOR>,</OPERATOR> <STRING>'Left'</STRING><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(direction<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> Short <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>ShortStyles</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> All <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Styles</OO><OPERATOR>;</OPERATOR>
	[<STRING>'margin'</STRING><OPERATOR>,</OPERATOR> <STRING>'padding'</STRING><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(style<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> sd <OPERATOR>=</OPERATOR> style <OPERATOR>+</OPERATOR> direction<OPERATOR>;</OPERATOR>
		Short[style<CLOSER>]</CLOSER>[sd<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> All[sd<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <STRING>'@px'</STRING><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> bd <OPERATOR>=</OPERATOR> <STRING>'border'</STRING> <OPERATOR>+</OPERATOR> direction<OPERATOR>;</OPERATOR>
	<OBJ>Short</OBJ><OPERATOR>.</OPERATOR><OO>border</OO>[bd<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> All[bd<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <STRING>'@px @ rgb(@, @, @)'</STRING><OPERATOR>;</OPERATOR>
	<KEYWORD>var</KEYWORD> bdw <OPERATOR>=</OPERATOR> bd <OPERATOR>+</OPERATOR> <STRING>'Width'</STRING><OPERATOR>,</OPERATOR> bds <OPERATOR>=</OPERATOR> bd <OPERATOR>+</OPERATOR> <STRING>'Style'</STRING><OPERATOR>,</OPERATOR> bdc <OPERATOR>=</OPERATOR> bd <OPERATOR>+</OPERATOR> <STRING>'Color'</STRING><OPERATOR>;</OPERATOR>
	Short[bd<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>Short</OBJ><OPERATOR>.</OPERATOR><OO>borderWidth</OO>[bdw<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> Short[bd<CLOSER>]</CLOSER>[bdw<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> All[bdw<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <STRING>'@px'</STRING><OPERATOR>;</OPERATOR>
	<OBJ>Short</OBJ><OPERATOR>.</OPERATOR><OO>borderStyle</OO>[bds<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> Short[bd<CLOSER>]</CLOSER>[bds<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> All[bds<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <STRING>'@'</STRING><OPERATOR>;</OPERATOR>
	<OBJ>Short</OBJ><OPERATOR>.</OPERATOR><OO>borderColor</OO>[bdc<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> Short[bd<CLOSER>]</CLOSER>[bdc<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> All[bdc<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <STRING>'rgb(@, @, @)'</STRING><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Element.Event</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains Element methods for dealing with events. This file also includes mouseenter and mouseleave custom Element Events.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Element, Event]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Element.Event</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>events</OO> <OPERATOR>=</OPERATOR> {set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(events<CLOSER>)</CLOSER>{
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addEvents</OO>(events<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}}</CLOSER><OPERATOR>;</OPERATOR>

[Element<OPERATOR>,</OPERATOR> Window<OPERATOR>,</OPERATOR> Document<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>invoke</OO>(<STRING>'implement'</STRING><OPERATOR>,</OPERATOR> {

	addEvent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(type<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> events <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'events'</STRING><OPERATOR>,</OPERATOR> {<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>events[type<CLOSER>])</CLOSER> events[type<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> {keys<OPERATOR>:</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> values<OPERATOR>:</OPERATOR> [<CLOSER>]}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (events[type<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>keys</OO><OPERATOR>.</OPERATOR><OO>contains</OO>(fn<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		events[type<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>keys</OO><OPERATOR>.</OPERATOR><OO>push</OO>(fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> realType <OPERATOR>=</OPERATOR> type<OPERATOR>,</OPERATOR>
			custom <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Events</OO>[type<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>
			condition <OPERATOR>=</OPERATOR> fn<OPERATOR>,</OPERATOR>
			self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (custom<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>custom</OBJ><OPERATOR>.</OPERATOR><OO>onAdd</OO><CLOSER>)</CLOSER> <OBJ>custom</OBJ><OPERATOR>.</OPERATOR><OO>onAdd</OO><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (<OBJ>custom</OBJ><OPERATOR>.</OPERATOR><OO>condition</OO><CLOSER>)</CLOSER>{
				condition <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(event<CLOSER>)</CLOSER>{
					<KEYWORD>if</KEYWORD> (<OBJ>custom</OBJ><OPERATOR>.</OPERATOR><OO>condition</OO><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> event<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> event<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			realType <OPERATOR>=</OPERATOR> <OBJ>custom</OBJ><OPERATOR>.</OPERATOR><OO>base</OO> <OPERATOR>||</OPERATOR> realType<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>var</KEYWORD> defn <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(self<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> nativeEvent <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>NativeEvents</OO>[realType<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (nativeEvent<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (nativeEvent <OPERATOR>==</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER>{
				defn <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(event<CLOSER>)</CLOSER>{
					event <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Event(event<OPERATOR>,</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>getWindow</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD> (<OBJ>condition</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(self<OPERATOR>,</OPERATOR> event<CLOSER>)</CLOSER> <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD><CLOSER>)</CLOSER> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>stop</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addListener</OO>(realType<OPERATOR>,</OPERATOR> defn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		events[type<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>values</OO><OPERATOR>.</OPERATOR><OO>push</OO>(defn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	removeEvent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(type<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> events <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'events'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>events <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>events[type<CLOSER>])</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> list <OPERATOR>=</OPERATOR> events[type<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> index <OPERATOR>=</OPERATOR> <OBJ>list</OBJ><OPERATOR>.</OPERATOR><OO>keys</OO><OPERATOR>.</OPERATOR><OO>indexOf</OO>(fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (index <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> value <OPERATOR>=</OPERATOR> <OBJ>list</OBJ><OPERATOR>.</OPERATOR><OO>values</OO>[index<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>delete</KEYWORD> <OBJ>list</OBJ><OPERATOR>.</OPERATOR><OO>keys</OO>[index<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>delete</KEYWORD> <OBJ>list</OBJ><OPERATOR>.</OPERATOR><OO>values</OO>[index<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> custom <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Events</OO>[type<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (custom<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>custom</OBJ><OPERATOR>.</OPERATOR><OO>onRemove</OO><CLOSER>)</CLOSER> <OBJ>custom</OBJ><OPERATOR>.</OPERATOR><OO>onRemove</OO><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			type <OPERATOR>=</OPERATOR> <OBJ>custom</OBJ><OPERATOR>.</OPERATOR><OO>base</OO> <OPERATOR>||</OPERATOR> type<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> (<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>NativeEvents</OO>[type<CLOSER>])</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeListener</OO>(type<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	addEvents<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(events<CLOSER>)</CLOSER>{
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> event <KEYWORD>in</KEYWORD> events<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addEvent</OO>(event<OPERATOR>,</OPERATOR> events[event<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	removeEvents<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(events<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> type<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (typeOf(events<CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'object'</STRING><CLOSER>)</CLOSER>{
			<KEYWORD>for</KEYWORD> (type <KEYWORD>in</KEYWORD> events<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeEvent</OO>(type<OPERATOR>,</OPERATOR> events[type<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>var</KEYWORD> attached <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'events'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>attached<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>events<CLOSER>)</CLOSER>{
			<KEYWORD>for</KEYWORD> (type <KEYWORD>in</KEYWORD> attached<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeEvents</OO>(type<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>eliminate</OO>(<STRING>'events'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (attached[events<CLOSER>])</CLOSER>{
			attached[events<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>keys</OO><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(fn<CLOSER>)</CLOSER>{
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeEvent</OO>(events<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>delete</KEYWORD> attached[events<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	fireEvent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(type<OPERATOR>,</OPERATOR> args<OPERATOR>,</OPERATOR> delay<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> events <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'events'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>events <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>events[type<CLOSER>])</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		args <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		events[type<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>keys</OO><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(fn<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (delay<CLOSER>)</CLOSER> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>delay</OO>(delay<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>else</KEYWORD> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	cloneEvents<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(from<OPERATOR>,</OPERATOR> type<CLOSER>)</CLOSER>{
		from <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(from<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> events <OPERATOR>=</OPERATOR> <OBJ>from</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'events'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>events<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>type<CLOSER>)</CLOSER>{
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> eventType <KEYWORD>in</KEYWORD> events<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>cloneEvents</OO>(from<OPERATOR>,</OPERATOR> eventType<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (events[type<CLOSER>])</CLOSER>{
			events[type<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>keys</OO><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(fn<CLOSER>)</CLOSER>{
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>addEvent</OO>(type<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// IE9</COMMENT>
<KEYWORD>try</KEYWORD> {
	<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> HTMLElement <OPERATOR>!=</OPERATOR> <STRING>'undefined'</STRING><CLOSER>)</CLOSER>
		<OBJ>HTMLElement</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>fireEvent</OO> <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>fireEvent</OO><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>NativeEvents</OO> <OPERATOR>=</OPERATOR> {
	click<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> dblclick<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> mouseup<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> mousedown<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> contextmenu<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <COMMENT>//mouse buttons</COMMENT>
	mousewheel<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> DOMMouseScroll<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <COMMENT>//mouse wheel</COMMENT>
	mouseover<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> mouseout<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> mousemove<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> selectstart<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> selectend<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <COMMENT>//mouse movement</COMMENT>
	keydown<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> keypress<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> keyup<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <COMMENT>//keyboard</COMMENT>
	orientationchange<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <COMMENT>// mobile</COMMENT>
	touchstart<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> touchmove<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> touchend<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> touchcancel<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <COMMENT>// touch</COMMENT>
	gesturestart<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> gesturechange<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> gestureend<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <COMMENT>// gesture</COMMENT>
	focus<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> blur<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> change<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> reset<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> select<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> submit<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <COMMENT>//form elements</COMMENT>
	load<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> unload<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> beforeunload<OPERATOR>:</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> resize<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> move<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> DOMContentLoaded<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> readystatechange<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <COMMENT>//window</COMMENT>
	error<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> abort<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> scroll<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC> <COMMENT>//misc</COMMENT>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> check <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(event<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> related <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>relatedTarget</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (related <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>related<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> (related <OPERATOR>!=</OPERATOR> <KEYWORD>this</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>related</OBJ><OPERATOR>.</OPERATOR><OO>prefix</OO> <OPERATOR>!=</OPERATOR> <STRING>'xul'</STRING> <OPERATOR>&amp;&amp;</OPERATOR> typeOf(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <STRING>'document'</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(related<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Events</OO> <OPERATOR>=</OPERATOR> {

	mouseenter<OPERATOR>:</OPERATOR> {
		base<OPERATOR>:</OPERATOR> <STRING>'mouseover'</STRING><OPERATOR>,</OPERATOR>
		condition<OPERATOR>:</OPERATOR> check
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	mouseleave<OPERATOR>:</OPERATOR> {
		base<OPERATOR>:</OPERATOR> <STRING>'mouseout'</STRING><OPERATOR>,</OPERATOR>
		condition<OPERATOR>:</OPERATOR> check
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	mousewheel<OPERATOR>:</OPERATOR> {
		base<OPERATOR>:</OPERATOR> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>firefox</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'DOMMouseScroll'</STRING> <OPERATOR>:</OPERATOR> <STRING>'mousewheel'</STRING>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Events</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Hash(<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Events</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Element.Dimensions</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains methods to work with size, scroll, or positioning of Elements and the window object.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>credits:</COMMENT>
<COMMENT>  - Element positioning based on the [qooxdoo](http://qooxdoo.org/) code and smart browser fixes, [LGPL License](http://www.gnu.org/licenses/lgpl.html).</COMMENT>
<COMMENT>  - Viewport dimensions based on [YUI](http://developer.yahoo.com/yui/) code, [BSD License](http://developer.yahoo.com/yui/license.html).</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Element, Element.Style]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: [Element.Dimensions]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	scrollTo<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(x<OPERATOR>,</OPERATOR> y<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (isBody(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER>{
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getWindow</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>scrollTo</OO>(x<OPERATOR>,</OPERATOR> y<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO> <OPERATOR>=</OPERATOR> x<OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO> <OPERATOR>=</OPERATOR> y<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getSize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (isBody(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getWindow</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>getSize</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> {x<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>offsetWidth</OO><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>offsetHeight</OO><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getScrollSize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (isBody(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getWindow</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>getScrollSize</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> {x<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>scrollWidth</OO><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>scrollHeight</OO><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getScroll<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (isBody(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getWindow</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>getScroll</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> {x<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getScrolls<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> element <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>,</OPERATOR> position <OPERATOR>=</OPERATOR> {x<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>while</KEYWORD> (element <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>isBody(element<CLOSER>))</CLOSER>{
			<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>+=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO><OPERATOR>;</OPERATOR>
			<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>+=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO><OPERATOR>;</OPERATOR>
			element <OPERATOR>=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> position<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getOffsetParent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> element <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (isBody(element<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>ie</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>offsetParent</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>while</KEYWORD> ((element <OPERATOR>=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><CLOSER>))</CLOSER>{
			<KEYWORD>if</KEYWORD> (styleString(element<OPERATOR>,</OPERATOR> <STRING>'position'</STRING><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <STRING>'static'</STRING> <OPERATOR>||</OPERATOR> isBody(element<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> element<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getOffsets<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getBoundingClientRect</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Platform</OO><OPERATOR>.</OPERATOR><OO>ios</OO><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> bound <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getBoundingClientRect</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
				html <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getDocument</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>documentElement</OO><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
				htmlScroll <OPERATOR>=</OPERATOR> <OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>getScroll</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
				elemScrolls <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getScrolls</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
				isFixed <OPERATOR>=</OPERATOR> (styleString(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>'position'</STRING><CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'fixed'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

			<KEYWORD>return</KEYWORD> {
				x<OPERATOR>:</OPERATOR> <OBJ>bound</OBJ><OPERATOR>.</OPERATOR><OO>left</OO><OPERATOR>.</OPERATOR><OO>toInt</OO>(<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <OBJ>elemScrolls</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>+</OPERATOR> ((isFixed<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>:</OPERATOR> <OBJ>htmlScroll</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> <OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>clientLeft</OO><OPERATOR>,</OPERATOR>
				y<OPERATOR>:</OPERATOR> <OBJ>bound</OBJ><OPERATOR>.</OPERATOR><OO>top</OO><OPERATOR>.</OPERATOR><OO>toInt</OO>(<CLOSER>)</CLOSER>  <OPERATOR>+</OPERATOR> <OBJ>elemScrolls</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>+</OPERATOR> ((isFixed<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>:</OPERATOR> <OBJ>htmlScroll</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> <OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>clientTop</OO>
			<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<KEYWORD>var</KEYWORD> element <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> position <OPERATOR>=</OPERATOR> {x<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (isBody(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> position<OPERATOR>;</OPERATOR>

		<KEYWORD>while</KEYWORD> (element <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>isBody(element<CLOSER>))</CLOSER>{
			<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>+=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>offsetLeft</OO><OPERATOR>;</OPERATOR>
			<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>+=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>firefox</OO><CLOSER>)</CLOSER>{
				<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>borderBox(element<CLOSER>))</CLOSER>{
					<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>+=</OPERATOR> leftBorder(element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>+=</OPERATOR> topBorder(element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
				<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (parent <OPERATOR>&amp;&amp;</OPERATOR> styleString(parent<OPERATOR>,</OPERATOR> <STRING>'overflow'</STRING><CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <STRING>'visible'</STRING><CLOSER>)</CLOSER>{
					<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>+=</OPERATOR> leftBorder(parent<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>+=</OPERATOR> topBorder(parent<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER>
			<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (element <OPERATOR>!=</OPERATOR> <KEYWORD>this</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>safari</OO><CLOSER>)</CLOSER>{
				<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>+=</OPERATOR> leftBorder(element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>+=</OPERATOR> topBorder(element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>

			element <OPERATOR>=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>offsetParent</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>firefox</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>borderBox(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER>{
			<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>-=</OPERATOR> leftBorder(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>-=</OPERATOR> topBorder(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> position<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getPosition<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(relative<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (isBody(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> {x<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> offset <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getOffsets</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
			scroll <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getScrolls</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> position <OPERATOR>=</OPERATOR> {
			x<OPERATOR>:</OPERATOR> <OBJ>offset</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>-</OPERATOR> <OBJ>scroll</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR>
			y<OPERATOR>:</OPERATOR> <OBJ>offset</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>-</OPERATOR> <OBJ>scroll</OBJ><OPERATOR>.</OPERATOR><OO>y</OO>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		
		<KEYWORD>if</KEYWORD> (relative <OPERATOR>&amp;&amp;</OPERATOR> (relative <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(relative<CLOSER>)))</CLOSER>{
			<KEYWORD>var</KEYWORD> relativePosition <OPERATOR>=</OPERATOR> <OBJ>relative</OBJ><OPERATOR>.</OPERATOR><OO>getPosition</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> {x<OPERATOR>:</OPERATOR> <OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>-</OPERATOR> <OBJ>relativePosition</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>-</OPERATOR> leftBorder(relative<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>-</OPERATOR> <OBJ>relativePosition</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>-</OPERATOR> topBorder(relative<CLOSER>)}</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> position<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getCoordinates<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(element<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (isBody(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getWindow</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>getCoordinates</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> position <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getPosition</OO>(element<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
			size <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getSize</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> obj <OPERATOR>=</OPERATOR> {
			left<OPERATOR>:</OPERATOR> <OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR>
			top<OPERATOR>:</OPERATOR> <OBJ>position</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>,</OPERATOR>
			width<OPERATOR>:</OPERATOR> <OBJ>size</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR>
			height<OPERATOR>:</OPERATOR> <OBJ>size</OBJ><OPERATOR>.</OPERATOR><OO>y</OO>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>right</OO> <OPERATOR>=</OPERATOR> <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>+</OPERATOR> <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>;</OPERATOR>
		<OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>bottom</OO> <OPERATOR>=</OPERATOR> <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>top</OO> <OPERATOR>+</OPERATOR> <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> obj<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	computePosition<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(obj<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> {
			left<OPERATOR>:</OPERATOR> <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>x</OO> <OPERATOR>-</OPERATOR> styleNumber(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>'margin-left'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
			top<OPERATOR>:</OPERATOR> <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>y</OO> <OPERATOR>-</OPERATOR> styleNumber(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>'margin-top'</STRING><CLOSER>)</CLOSER>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	setPosition<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(obj<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setStyles</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>computePosition</OO>(obj<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


[Document<OPERATOR>,</OPERATOR> Window<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>invoke</OO>(<STRING>'implement'</STRING><OPERATOR>,</OPERATOR> {

	getSize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> doc <OPERATOR>=</OPERATOR> getCompatElement(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> {x<OPERATOR>:</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>clientWidth</OO><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>clientHeight</OO><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getScroll<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> win <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getWindow</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> doc <OPERATOR>=</OPERATOR> getCompatElement(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> {x<OPERATOR>:</OPERATOR> <OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>pageXOffset</OO> <OPERATOR>||</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>pageYOffset</OO> <OPERATOR>||</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getScrollSize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> doc <OPERATOR>=</OPERATOR> getCompatElement(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
			min <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getSize</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
			body <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getDocument</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> {x<OPERATOR>:</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>max</OO>(<OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>scrollWidth</OO><OPERATOR>,</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>scrollWidth</OO><OPERATOR>,</OPERATOR> <OBJ>min</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>max</OO>(<OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>scrollHeight</OO><OPERATOR>,</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>scrollHeight</OO><OPERATOR>,</OPERATOR> <OBJ>min</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><CLOSER>)}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getPosition<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> {x<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> y<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getCoordinates<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> size <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getSize</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> {top<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> left<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> bottom<OPERATOR>:</OPERATOR> <OBJ>size</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>,</OPERATOR> right<OPERATOR>:</OPERATOR> <OBJ>size</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR> <OBJ>size</OBJ><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>,</OPERATOR> width<OPERATOR>:</OPERATOR> <OBJ>size</OBJ><OPERATOR>.</OPERATOR><OO>x</OO><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// private methods</COMMENT>

<KEYWORD>var</KEYWORD> styleString <OPERATOR>=</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>getComputedStyle</OO><OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> styleNumber(element<OPERATOR>,</OPERATOR> style<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> styleString(element<OPERATOR>,</OPERATOR> style<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toInt</OO>(<CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> borderBox(element<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> styleString(element<OPERATOR>,</OPERATOR> <STRING>'-moz-box-sizing'</STRING><CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <STRING>'border-box'</STRING><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> topBorder(element<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> styleNumber(element<OPERATOR>,</OPERATOR> <STRING>'border-top-width'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> leftBorder(element<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> styleNumber(element<OPERATOR>,</OPERATOR> <STRING>'border-left-width'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> isBody(element<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (<REGEX>/^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>body<REGEX_OPERATOR>|</REGEX_OPERATOR>html<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$/<KEYWORD>i</KEYWORD></REGEX><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>tagName</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> getCompatElement(element<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> doc <OPERATOR>=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>getDocument</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>compatMode</OO> <OPERATOR>||</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>compatMode</OO> <OPERATOR>==</OPERATOR> <STRING>'CSS1Compat'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>html</OO> <OPERATOR>:</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//aliases</COMMENT>
<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>alias</OO>({position<OPERATOR>:</OPERATOR> <STRING>'setPosition'</STRING><CLOSER>})</CLOSER><OPERATOR>;</OPERATOR> <COMMENT>//compatability</COMMENT>

[Window<OPERATOR>,</OPERATOR> Document<OPERATOR>,</OPERATOR> Element<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>invoke</OO>(<STRING>'implement'</STRING><OPERATOR>,</OPERATOR> {

	getHeight<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getSize</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getWidth<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getSize</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getScrollTop<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getScroll</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getScrollLeft<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getScroll</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getScrollHeight<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getScrollSize</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getScrollWidth<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getScrollSize</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getTop<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getPosition</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>y</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getLeft<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getPosition</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>x</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Fx</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains the basic animation logic to be extended by all other Fx Classes.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Chain, Events, Options]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Fx</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<KEYWORD>var</KEYWORD> Fx <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Fx</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	Implements<OPERATOR>:</OPERATOR> [Chain<OPERATOR>,</OPERATOR> Events<OPERATOR>,</OPERATOR> Options<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>

	options<OPERATOR>:</OPERATOR> {
		<COMMENT>/*</COMMENT>
<COMMENT>		onStart: nil,</COMMENT>
<COMMENT>		onCancel: nil,</COMMENT>
<COMMENT>		onComplete: nil,</COMMENT>
<COMMENT>		*/</COMMENT>
		fps<OPERATOR>:</OPERATOR> <NUMERIC>50</NUMERIC><OPERATOR>,</OPERATOR>
		unit<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		duration<OPERATOR>:</OPERATOR> <NUMERIC>500</NUMERIC><OPERATOR>,</OPERATOR>
		link<OPERATOR>:</OPERATOR> <STRING>'ignore'</STRING>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	initialize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(options<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>subject</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>subject</OO> <OPERATOR>||</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setOptions</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getTransition<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(p<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OPERATOR>-</OPERATOR>(<OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>cos</OO>(<OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>PI</OO> <OPERATOR>*</OPERATOR> p<CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>/</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	step<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> time <OPERATOR>=</OPERATOR> <OBJ>Date</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (time <OPERATOR>&lt;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>time</OO> <OPERATOR>+</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>duration</OO><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> delta <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>transition</OO>((time <OPERATOR>-</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>time</OO><CLOSER>)</CLOSER> <OPERATOR>/</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>duration</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>set</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>compute</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>from</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>to</OO><OPERATOR>,</OPERATOR> delta<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>set</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>compute</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>from</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>to</OO><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>complete</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(now<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> now<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	compute<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(from<OPERATOR>,</OPERATOR> to<OPERATOR>,</OPERATOR> delta<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>compute</OO>(from<OPERATOR>,</OPERATOR> to<OPERATOR>,</OPERATOR> delta<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	check<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>timer</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>switch</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>link</OO><CLOSER>)</CLOSER>{
			<KEYWORD>case</KEYWORD> <STRING>'cancel'</STRING><OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>cancel</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'chain'</STRING><OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>chain</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>caller</OO><OPERATOR>.</OPERATOR><OO>pass</OO>(arguments<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	start<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(from<OPERATOR>,</OPERATOR> to<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>check</OO>(from<OPERATOR>,</OPERATOR> to<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> duration <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>duration</OO><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>duration</OO> <OPERATOR>=</OPERATOR> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Durations</OO>[duration<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <OBJ>duration</OBJ><OPERATOR>.</OPERATOR><OO>toInt</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>from</OO> <OPERATOR>=</OPERATOR> from<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>to</OO> <OPERATOR>=</OPERATOR> to<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>time</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>transition</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getTransition</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>startTimer</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onStart</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	complete<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>stopTimer</OO>(<CLOSER>))</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onComplete</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	cancel<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>stopTimer</OO>(<CLOSER>))</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onCancel</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	onStart<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'start'</STRING><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>subject</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	onComplete<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'complete'</STRING><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>subject</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>callChain</OO>(<CLOSER>))</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'chainComplete'</STRING><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>subject</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	onCancel<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'cancel'</STRING><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>subject</OO><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>clearChain</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	pause<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>stopTimer</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	resume<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>startTimer</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	stopTimer<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>timer</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>time</OO> <OPERATOR>=</OPERATOR> <OBJ>Date</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>(<CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>time</OO><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>timer</OO> <OPERATOR>=</OPERATOR> removeInstance(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	startTimer<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>timer</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>time</OO> <OPERATOR>=</OPERATOR> <OBJ>Date</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>(<CLOSER>)</CLOSER> <OPERATOR>-</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>time</OO><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>timer</OO> <OPERATOR>=</OPERATOR> addInstance(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>compute</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(from<OPERATOR>,</OPERATOR> to<OPERATOR>,</OPERATOR> delta<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> (to <OPERATOR>-</OPERATOR> from<CLOSER>)</CLOSER> <OPERATOR>*</OPERATOR> delta <OPERATOR>+</OPERATOR> from<OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Durations</OO> <OPERATOR>=</OPERATOR> {<STRING>'short'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>250</NUMERIC><OPERATOR>,</OPERATOR> <STRING>'normal'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>500</NUMERIC><OPERATOR>,</OPERATOR> <STRING>'long'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>1000</NUMERIC><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// global timers</COMMENT>

<KEYWORD>var</KEYWORD> instances <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> timers <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> loop <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<KEYWORD>this</KEYWORD>[i<CLOSER>])</CLOSER> <KEYWORD>this</KEYWORD>[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>step</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> addInstance <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(instance<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> fps <OPERATOR>=</OPERATOR> <OBJ>instance</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>fps</OO><OPERATOR>,</OPERATOR>
		list <OPERATOR>=</OPERATOR> instances[fps<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> (instances[fps<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> [<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>list</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(instance<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>timers[fps<CLOSER>])</CLOSER> timers[fps<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>loop</OBJ><OPERATOR>.</OPERATOR><OO>periodical</OO>(<OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>round</OO>(<NUMERIC>1000</NUMERIC> <OPERATOR>/</OPERATOR> fps<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> list<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> removeInstance <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(instance<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> fps <OPERATOR>=</OPERATOR> <OBJ>instance</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>fps</OO><OPERATOR>,</OPERATOR>
		list <OPERATOR>=</OPERATOR> instances[fps<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>list</OBJ><OPERATOR>.</OPERATOR><OO>erase</OO>(instance<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>list</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&amp;&amp;</OPERATOR> timers[fps<CLOSER>])</CLOSER> timers[fps<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <FUNCTION>clearInterval</FUNCTION>(timers[fps<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Fx.CSS</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains the CSS animation logic. Used by Fx.Tween, Fx.Morph, Fx.Elements.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Fx, Element.Style]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Fx.CSS</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	Extends<OPERATOR>:</OPERATOR> Fx<OPERATOR>,</OPERATOR>

	<COMMENT>//prepares the base from/to object</COMMENT>

	prepare<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(element<OPERATOR>,</OPERATOR> property<OPERATOR>,</OPERATOR> values<CLOSER>)</CLOSER>{
		values <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(values<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (values[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER>{
			values[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> values[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
			values[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>getStyle</OO>(property<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>var</KEYWORD> parsed <OPERATOR>=</OPERATOR> <OBJ>values</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parse</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> {from<OPERATOR>:</OPERATOR> parsed[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> to<OPERATOR>:</OPERATOR> parsed[<NUMERIC>1</NUMERIC><CLOSER>]}</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<COMMENT>//parses a value into an array</COMMENT>

	parse<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
		value <OPERATOR>=</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(value<CLOSER>)</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		value <OPERATOR>=</OPERATOR> (<KEYWORD>typeof</KEYWORD> value <OPERATOR>==</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>' '</STRING><CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>(val<CLOSER>)</CLOSER>{
			val <OPERATOR>=</OPERATOR> <TYPE>String</TYPE>(val<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> found <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>.</OPERATOR><OO>Parsers</OO><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(parser<OPERATOR>,</OPERATOR> key<CLOSER>)</CLOSER>{
				<KEYWORD>if</KEYWORD> (found<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> parsed <OPERATOR>=</OPERATOR> <OBJ>parser</OBJ><OPERATOR>.</OPERATOR><OO>parse</OO>(val<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (parsed <OPERATOR>||</OPERATOR> parsed <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER> found <OPERATOR>=</OPERATOR> {value<OPERATOR>:</OPERATOR> parsed<OPERATOR>,</OPERATOR> parser<OPERATOR>:</OPERATOR> parser<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
			found <OPERATOR>=</OPERATOR> found <OPERATOR>||</OPERATOR> {value<OPERATOR>:</OPERATOR> val<OPERATOR>,</OPERATOR> parser<OPERATOR>:</OPERATOR> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>.</OPERATOR><OO>Parsers</OO><OPERATOR>.</OPERATOR><OO>String</OO><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> found<OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<COMMENT>//computes by a from and to prepared objects, using their parsers.</COMMENT>

	compute<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(from<OPERATOR>,</OPERATOR> to<OPERATOR>,</OPERATOR> delta<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> computed <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		(<OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>min</OO>(<OBJ>from</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR> <OBJ>to</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>))</CLOSER><OPERATOR>.</OPERATOR><OO>times</OO>(<KEYWORD>function</KEYWORD>(i<CLOSER>)</CLOSER>{
			<OBJ>computed</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>({value<OPERATOR>:</OPERATOR> from[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>parser</OO><OPERATOR>.</OPERATOR><OO>compute</OO>(from[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>value</OO><OPERATOR>,</OPERATOR> to[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>value</OO><OPERATOR>,</OPERATOR> delta<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> parser<OPERATOR>:</OPERATOR> from[i<CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>parser</OO><CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>computed</OBJ><OPERATOR>.</OPERATOR><OO>$family</OO> <OPERATOR>=</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(<STRING>'fx:css:value'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> computed<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<COMMENT>//serves the value as settable</COMMENT>

	serve<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> unit<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (typeOf(value<CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <STRING>'fx:css:value'</STRING><CLOSER>)</CLOSER> value <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parse</OO>(value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> returned <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(bit<CLOSER>)</CLOSER>{
			returned <OPERATOR>=</OPERATOR> <OBJ>returned</OBJ><OPERATOR>.</OPERATOR><OO>concat</OO>(<OBJ>bit</OBJ><OPERATOR>.</OPERATOR><OO>parser</OO><OPERATOR>.</OPERATOR><OO>serve</OO>(<OBJ>bit</OBJ><OPERATOR>.</OPERATOR><OO>value</OO><OPERATOR>,</OPERATOR> unit<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> returned<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<COMMENT>//renders the change to an element</COMMENT>

	render<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(element<OPERATOR>,</OPERATOR> property<OPERATOR>,</OPERATOR> value<OPERATOR>,</OPERATOR> unit<CLOSER>)</CLOSER>{
		<OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>setStyle</OO>(property<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>serve</OO>(value<OPERATOR>,</OPERATOR> unit<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<COMMENT>//searches inside the page css to find the values for a selector</COMMENT>

	search<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(selector<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>.</OPERATOR><OO>Cache</OO>[selector<CLOSER>])</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>.</OPERATOR><OO>Cache</OO>[selector<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> to <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>styleSheets</OO><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(sheet<OPERATOR>,</OPERATOR> j<CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> href <OPERATOR>=</OPERATOR> <OBJ>sheet</OBJ><OPERATOR>.</OPERATOR><OO>href</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (href <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>href</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(<STRING>'://'</STRING><CLOSER>)</CLOSER> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>href</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>domain</OO><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> rules <OPERATOR>=</OPERATOR> <OBJ>sheet</OBJ><OPERATOR>.</OPERATOR><OO>rules</OO> <OPERATOR>||</OPERATOR> <OBJ>sheet</OBJ><OPERATOR>.</OPERATOR><OO>cssRules</OO><OPERATOR>;</OPERATOR>
			<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(rules<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(rule<OPERATOR>,</OPERATOR> i<CLOSER>)</CLOSER>{
				<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>rule</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> selectorText <OPERATOR>=</OPERATOR> (<OBJ>rule</OBJ><OPERATOR>.</OPERATOR><OO>selectorText</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>rule</OBJ><OPERATOR>.</OPERATOR><OO>selectorText</OO><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/^<ESC>\w</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR>/</REGEX><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(m<CLOSER>)</CLOSER>{
					<KEYWORD>return</KEYWORD> <OBJ>m</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>})</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>selectorText <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>selectorText</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<STRING>'^'</STRING> <OPERATOR>+</OPERATOR> selector <OPERATOR>+</OPERATOR> <STRING>'$'</STRING><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
				<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Styles</OO><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> style<CLOSER>)</CLOSER>{
					<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>rule</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>[style<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>ShortStyles</OO>[style<CLOSER>])</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
					value <OPERATOR>=</OPERATOR> <TYPE>String</TYPE>(<OBJ>rule</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>[style<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
					to[style<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> (<OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<REGEX>/^rgb/</REGEX><CLOSER>))</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>rgbToHex</OO>(<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> value<OPERATOR>;</OPERATOR>
				<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>.</OPERATOR><OO>Cache</OO>[selector<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> to<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>.</OPERATOR><OO>Cache</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>.</OPERATOR><OO>Parsers</OO> <OPERATOR>=</OPERATOR> {

	Color<OPERATOR>:</OPERATOR> {
		parse<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (<OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/^#<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>0-9a-f<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_REPEAT_MARKER>{3,6}</REGEX_REPEAT_MARKER>$/<KEYWORD>i</KEYWORD></REGEX><CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>hexToRgb</OO>(<KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> ((value <OPERATOR>=</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>,<ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>,<ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>/</REGEX><CLOSER>)))</CLOSER> <OPERATOR>?</OPERATOR> [value[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> value[<NUMERIC>2</NUMERIC><CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> value[<NUMERIC>3</NUMERIC><CLOSER>]]</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
		compute<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(from<OPERATOR>,</OPERATOR> to<OPERATOR>,</OPERATOR> delta<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>from</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> i<CLOSER>)</CLOSER>{
				<KEYWORD>return</KEYWORD> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>round</OO>(<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>compute</OO>(from[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> to[i<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> delta<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
		serve<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<TYPE>Number</TYPE><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<TYPE>Number</TYPE><OPERATOR>:</OPERATOR> {
		parse<OPERATOR>:</OPERATOR> <FUNCTION>parseFloat</FUNCTION><OPERATOR>,</OPERATOR>
		compute<OPERATOR>:</OPERATOR> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>compute</OO><OPERATOR>,</OPERATOR>
		serve<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> unit<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> (unit<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> value <OPERATOR>+</OPERATOR> unit <OPERATOR>:</OPERATOR> value<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	<TYPE>String</TYPE><OPERATOR>:</OPERATOR> {
		parse<OPERATOR>:</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(<KEYWORD>false</KEYWORD><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR>
		compute<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(zero<OPERATOR>,</OPERATOR> one<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> one<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
		serve<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(zero<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> zero<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>.</OPERATOR><OO>Parsers</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Hash(<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>.</OPERATOR><OO>Parsers</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Fx.Tween</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Formerly Fx.Style, effect to transition any CSS property for an element.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Fx.CSS</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: [Fx.Tween, Element.fade, Element.highlight]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Tween</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	Extends<OPERATOR>:</OPERATOR> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>,</OPERATOR>

	initialize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(element<OPERATOR>,</OPERATOR> options<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>element</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>subject</OO> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(property<OPERATOR>,</OPERATOR> now<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER>{
			now <OPERATOR>=</OPERATOR> property<OPERATOR>;</OPERATOR>
			property <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>property</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>property</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>render</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>element</OO><OPERATOR>,</OPERATOR> property<OPERATOR>,</OPERATOR> now<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>unit</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	start<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(property<OPERATOR>,</OPERATOR> from<OPERATOR>,</OPERATOR> to<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>check</OO>(property<OPERATOR>,</OPERATOR> from<OPERATOR>,</OPERATOR> to<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> args <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>flatten</OO>(arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>property</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>property</OO> <OPERATOR>||</OPERATOR> <OBJ>args</OBJ><OPERATOR>.</OPERATOR><OO>shift</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> parsed <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prepare</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>element</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>property</OO><OPERATOR>,</OPERATOR> args<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO>(<OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>from</OO><OPERATOR>,</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>to</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>tween</OO> <OPERATOR>=</OPERATOR> {

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(options<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'tween'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>cancel</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>setOptions</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> tween <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'tween'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>tween<CLOSER>)</CLOSER>{
			tween <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Tween</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> {link<OPERATOR>:</OPERATOR> <STRING>'cancel'</STRING><CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>store</OO>(<STRING>'tween'</STRING><OPERATOR>,</OPERATOR> tween<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> tween<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	tween<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(property<OPERATOR>,</OPERATOR> from<OPERATOR>,</OPERATOR> to<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'tween'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>start</OO>(arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	fade<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(how<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> fade <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'tween'</STRING><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> o <OPERATOR>=</OPERATOR> <STRING>'opacity'</STRING><OPERATOR>,</OPERATOR> toggle<OPERATOR>;</OPERATOR>
		how <OPERATOR>=</OPERATOR> [how<OPERATOR>,</OPERATOR> <STRING>'toggle'</STRING><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>pick</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>switch</KEYWORD> (how<CLOSER>)</CLOSER>{
			<KEYWORD>case</KEYWORD> <STRING>'in'</STRING><OPERATOR>:</OPERATOR> <OBJ>fade</OBJ><OPERATOR>.</OPERATOR><OO>start</OO>(o<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'out'</STRING><OPERATOR>:</OPERATOR> <OBJ>fade</OBJ><OPERATOR>.</OPERATOR><OO>start</OO>(o<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'show'</STRING><OPERATOR>:</OPERATOR> <OBJ>fade</OBJ><OPERATOR>.</OPERATOR><OO>set</OO>(o<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'hide'</STRING><OPERATOR>:</OPERATOR> <OBJ>fade</OBJ><OPERATOR>.</OPERATOR><OO>set</OO>(o<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'toggle'</STRING><OPERATOR>:</OPERATOR>
				<KEYWORD>var</KEYWORD> flag <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'fade:flag'</STRING><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'opacity'</STRING><CLOSER>)</CLOSER> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>fade</OBJ><OPERATOR>.</OPERATOR><OO>start</OO>(o<OPERATOR>,</OPERATOR> (flag<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>store</OO>(<STRING>'fade:flag'</STRING><OPERATOR>,</OPERATOR> <OPERATOR>!</OPERATOR>flag<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				toggle <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>default</KEYWORD><OPERATOR>:</OPERATOR> <OBJ>fade</OBJ><OPERATOR>.</OPERATOR><OO>start</OO>(o<OPERATOR>,</OPERATOR> arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>toggle<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>eliminate</OO>(<STRING>'fade:flag'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	highlight<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(start<OPERATOR>,</OPERATOR> end<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>end<CLOSER>)</CLOSER>{
			end <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'highlight:original'</STRING><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getStyle</OO>(<STRING>'background-color'</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			end <OPERATOR>=</OPERATOR> (end <OPERATOR>==</OPERATOR> <STRING>'transparent'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'#fff'</STRING> <OPERATOR>:</OPERATOR> end<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>var</KEYWORD> tween <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'tween'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>tween</OBJ><OPERATOR>.</OPERATOR><OO>start</OO>(<STRING>'background-color'</STRING><OPERATOR>,</OPERATOR> start <OPERATOR>||</OPERATOR> <STRING>'#ffff88'</STRING><OPERATOR>,</OPERATOR> end<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>chain</OO>(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setStyle</OO>(<STRING>'background-color'</STRING><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'highlight:original'</STRING><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>tween</OBJ><OPERATOR>.</OPERATOR><OO>callChain</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>bind</OO>(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Fx.Morph</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Formerly Fx.Styles, effect to transition any number of CSS properties for an element using an object of rules, or CSS based selector rules.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Fx.CSS</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Fx.Morph</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Morph</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	Extends<OPERATOR>:</OPERATOR> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>CSS</OO><OPERATOR>,</OPERATOR>

	initialize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(element<OPERATOR>,</OPERATOR> options<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>element</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>subject</OO> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(now<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> now <OPERATOR>==</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> now <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(now<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> p <KEYWORD>in</KEYWORD> now<CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>render</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>element</OO><OPERATOR>,</OPERATOR> p<OPERATOR>,</OPERATOR> now[p<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>unit</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	compute<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(from<OPERATOR>,</OPERATOR> to<OPERATOR>,</OPERATOR> delta<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> now <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> p <KEYWORD>in</KEYWORD> from<CLOSER>)</CLOSER> now[p<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO>(from[p<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> to[p<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR> delta<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> now<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	start<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(properties<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>check</OO>(properties<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> properties <OPERATOR>==</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER> properties <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>search</OO>(properties<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> from <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> to <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> p <KEYWORD>in</KEYWORD> properties<CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> parsed <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prepare</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>element</OO><OPERATOR>,</OPERATOR> p<OPERATOR>,</OPERATOR> properties[p<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			from[p<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>from</OO><OPERATOR>;</OPERATOR>
			to[p<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <OBJ>parsed</OBJ><OPERATOR>.</OPERATOR><OO>to</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO>(from<OPERATOR>,</OPERATOR> to<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>morph</OO> <OPERATOR>=</OPERATOR> {

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(options<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'morph'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>cancel</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>setOptions</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> morph <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'morph'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>morph<CLOSER>)</CLOSER>{
			morph <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Morph</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> {link<OPERATOR>:</OPERATOR> <STRING>'cancel'</STRING><CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>store</OO>(<STRING>'morph'</STRING><OPERATOR>,</OPERATOR> morph<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> morph<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	morph<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(props<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'morph'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>start</OO>(props<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Fx.Transitions</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains a set of advanced transitions to be used with any of the Fx Classes.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>credits:</COMMENT>
<COMMENT>  - Easing Equations by Robert Penner, &lt;http://www.robertpenner.com/easing/&gt;, modified and optimized to be used with MooTools.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Fx</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Fx.Transitions</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	getTransition<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> trans <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>transition</OO> <OPERATOR>||</OPERATOR> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transitions</OO><OPERATOR>.</OPERATOR><OO>Sine</OO><OPERATOR>.</OPERATOR><OO>easeInOut</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<KEYWORD>typeof</KEYWORD> trans <OPERATOR>==</OPERATOR> <STRING>'string'</STRING><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> data <OPERATOR>=</OPERATOR> <OBJ>trans</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>':'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			trans <OPERATOR>=</OPERATOR> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transitions</OO><OPERATOR>;</OPERATOR>
			trans <OPERATOR>=</OPERATOR> trans[data[<NUMERIC>0</NUMERIC><CLOSER>]]</CLOSER> <OPERATOR>||</OPERATOR> trans[data[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>capitalize</OO>(<CLOSER>)]</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (data[<NUMERIC>1</NUMERIC><CLOSER>])</CLOSER> trans <OPERATOR>=</OPERATOR> trans[<STRING>'ease'</STRING> <OPERATOR>+</OPERATOR> data[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>capitalize</OO>(<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> (data[<NUMERIC>2</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>?</OPERATOR> data[<NUMERIC>2</NUMERIC><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>capitalize</OO>(<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <STRING>''</STRING><CLOSER>)]</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> trans<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transition</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(transition<OPERATOR>,</OPERATOR> params<CLOSER>)</CLOSER>{
	params <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>from</OO>(params<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(transition<OPERATOR>,</OPERATOR> {
		easeIn<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(pos<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> transition(pos<OPERATOR>,</OPERATOR> params<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
		easeOut<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(pos<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <OPERATOR>-</OPERATOR> transition(<NUMERIC>1</NUMERIC> <OPERATOR>-</OPERATOR> pos<OPERATOR>,</OPERATOR> params<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
		easeInOut<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(pos<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> (pos <OPERATOR>&lt;=</OPERATOR> <NUMERIC>0.5</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> transition(<NUMERIC>2</NUMERIC> <OPERATOR>*</OPERATOR> pos<OPERATOR>,</OPERATOR> params<CLOSER>)</CLOSER> <OPERATOR>/</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>:</OPERATOR> (<NUMERIC>2</NUMERIC> <OPERATOR>-</OPERATOR> transition(<NUMERIC>2</NUMERIC> <OPERATOR>*</OPERATOR> (<NUMERIC>1</NUMERIC> <OPERATOR>-</OPERATOR> pos<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> params<CLOSER>))</CLOSER> <OPERATOR>/</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transitions</OO> <OPERATOR>=</OPERATOR> {

	linear<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(zero<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> zero<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transitions</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Hash(<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transitions</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transitions</OO><OPERATOR>.</OPERATOR><OO>extend</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(transitions<CLOSER>)</CLOSER>{
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> transition <KEYWORD>in</KEYWORD> transitions<CLOSER>)</CLOSER> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transitions</OO>[transition<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transition</OO>(transitions[transition<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transitions</OO><OPERATOR>.</OPERATOR><OO>extend</OO>({

	Pow<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(p<OPERATOR>,</OPERATOR> x<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>pow</OO>(p<OPERATOR>,</OPERATOR> x <OPERATOR>&amp;&amp;</OPERATOR> x[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <NUMERIC>6</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	Expo<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(p<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>pow</OO>(<NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC> <OPERATOR>*</OPERATOR> (p <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	Circ<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(p<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <OPERATOR>-</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>sin</OO>(<OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>acos</OO>(p<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	Sine<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(p<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <OPERATOR>-</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>sin</OO>((<NUMERIC>1</NUMERIC> <OPERATOR>-</OPERATOR> p<CLOSER>)</CLOSER> <OPERATOR>*</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>PI</OO> <OPERATOR>/</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	Back<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(p<OPERATOR>,</OPERATOR> x<CLOSER>)</CLOSER>{
		x <OPERATOR>=</OPERATOR> x <OPERATOR>&amp;&amp;</OPERATOR> x[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <NUMERIC>1.618</NUMERIC><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>pow</OO>(p<OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>*</OPERATOR> ((x <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>*</OPERATOR> p <OPERATOR>-</OPERATOR> x<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	Bounce<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(p<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> value<OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> a <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> b <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> a <OPERATOR>+=</OPERATOR> b<OPERATOR>,</OPERATOR> b <OPERATOR>/</OPERATOR><OPERATOR>=</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (p <OPERATOR>&gt;=</OPERATOR> (<NUMERIC>7</NUMERIC> <OPERATOR>-</OPERATOR> <NUMERIC>4</NUMERIC> <OPERATOR>*</OPERATOR> a<CLOSER>)</CLOSER> <OPERATOR>/</OPERATOR> <NUMERIC>11</NUMERIC><CLOSER>)</CLOSER>{
				value <OPERATOR>=</OPERATOR> b <OPERATOR>*</OPERATOR> b <OPERATOR>-</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>pow</OO>((<NUMERIC>11</NUMERIC> <OPERATOR>-</OPERATOR> <NUMERIC>6</NUMERIC> <OPERATOR>*</OPERATOR> a <OPERATOR>-</OPERATOR> <NUMERIC>11</NUMERIC> <OPERATOR>*</OPERATOR> p<CLOSER>)</CLOSER> <OPERATOR>/</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> value<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	Elastic<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(p<OPERATOR>,</OPERATOR> x<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>pow</OO>(<NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC> <OPERATOR>*</OPERATOR> <OPERATOR>--</OPERATOR>p<CLOSER>)</CLOSER> <OPERATOR>*</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>cos</OO>(<NUMERIC>20</NUMERIC> <OPERATOR>*</OPERATOR> p <OPERATOR>*</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>PI</OO> <OPERATOR>*</OPERATOR> (x <OPERATOR>&amp;&amp;</OPERATOR> x[<NUMERIC>0</NUMERIC><CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>/</OPERATOR> <NUMERIC>3</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

[<STRING>'Quad'</STRING><OPERATOR>,</OPERATOR> <STRING>'Cubic'</STRING><OPERATOR>,</OPERATOR> <STRING>'Quart'</STRING><OPERATOR>,</OPERATOR> <STRING>'Quint'</STRING><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(transition<OPERATOR>,</OPERATOR> i<CLOSER>)</CLOSER>{
	<OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transitions</OO>[transition<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>Fx</OBJ><OPERATOR>.</OPERATOR><OO>Transition</OO>(<KEYWORD>function</KEYWORD>(p<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>pow</OO>(p<OPERATOR>,</OPERATOR> [i <OPERATOR>+</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Request</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Powerful all purpose Request Class. Uses XMLHTTPRequest.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Object, Element, Chain, Events, Options, Browser]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Request</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<KEYWORD>var</KEYWORD> progressSupport <OPERATOR>=</OPERATOR> (<STRING>'onprogress'</STRING> <KEYWORD>in</KEYWORD> <KEYWORD>new</KEYWORD> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Request</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> Request <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Request</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	Implements<OPERATOR>:</OPERATOR> [Chain<OPERATOR>,</OPERATOR> Events<OPERATOR>,</OPERATOR> Options<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>

	options<OPERATOR>:</OPERATOR> {<COMMENT>/*</COMMENT>
<COMMENT>		onRequest: function(){},</COMMENT>
<COMMENT>		onLoadstart: function(event, xhr){},</COMMENT>
<COMMENT>		onProgress: function(event, xhr){},</COMMENT>
<COMMENT>		onComplete: function(){},</COMMENT>
<COMMENT>		onCancel: function(){},</COMMENT>
<COMMENT>		onSuccess: function(responseText, responseXML){},</COMMENT>
<COMMENT>		onFailure: function(xhr){},</COMMENT>
<COMMENT>		onException: function(headerName, value){},</COMMENT>
<COMMENT>		onTimeout: function(){},</COMMENT>
<COMMENT>		user: '',</COMMENT>
<COMMENT>		password: '',*/</COMMENT>
		url<OPERATOR>:</OPERATOR> <STRING>''</STRING><OPERATOR>,</OPERATOR>
		data<OPERATOR>:</OPERATOR> <STRING>''</STRING><OPERATOR>,</OPERATOR>
		headers<OPERATOR>:</OPERATOR> {
			<STRING>'X-Requested-With'</STRING><OPERATOR>:</OPERATOR> <STRING>'XMLHttpRequest'</STRING><OPERATOR>,</OPERATOR>
			<STRING>'Accept'</STRING><OPERATOR>:</OPERATOR> <STRING>'text/javascript, text/html, application/xml, text/xml, */*'</STRING>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
		async<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		format<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		method<OPERATOR>:</OPERATOR> <STRING>'post'</STRING><OPERATOR>,</OPERATOR>
		link<OPERATOR>:</OPERATOR> <STRING>'ignore'</STRING><OPERATOR>,</OPERATOR>
		isSuccess<OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR>
		emulation<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		urlEncoded<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		encoding<OPERATOR>:</OPERATOR> <STRING>'utf-8'</STRING><OPERATOR>,</OPERATOR>
		evalScripts<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		evalResponse<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		timeout<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
		noCache<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	initialize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(options<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Request</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setOptions</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>headers</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>headers</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	onStateChange<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> xhr <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>readyState</OO> <OPERATOR>!=</OPERATOR> <NUMERIC>4</NUMERIC> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>running</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>running</OO> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>status</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>attempt</OO>(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> status <OPERATOR>=</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>status</OO><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>status</OO> <OPERATOR>=</OPERATOR> (status <OPERATOR>==</OPERATOR> <NUMERIC>1223</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <NUMERIC>204</NUMERIC> <OPERATOR>:</OPERATOR> status<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>bind</OO>(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>onreadystatechange</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<FUNCTION>clearTimeout</FUNCTION>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>timer</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>response</OO> <OPERATOR>=</OPERATOR> {text<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO><OPERATOR>.</OPERATOR><OO>responseText</OO> <OPERATOR>||</OPERATOR> <STRING>''</STRING><OPERATOR>,</OPERATOR> xml<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO><OPERATOR>.</OPERATOR><OO>responseXML</OO><CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>isSuccess</OO><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>status</OO><CLOSER>))</CLOSER>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>success</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>response</OO><OPERATOR>.</OPERATOR><OO>text</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>response</OO><OPERATOR>.</OPERATOR><OO>xml</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>failure</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	isSuccess<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> status <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>status</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (status <OPERATOR>&gt;=</OPERATOR> <NUMERIC>200</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> status <OPERATOR>&lt;</OPERATOR> <NUMERIC>300</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	isRunning<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OPERATOR>!!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>running</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	processScripts<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(text<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>evalResponse</OO> <OPERATOR>||</OPERATOR> (<REGEX>/<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>ecma<REGEX_OPERATOR>|</REGEX_OPERATOR>java<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>script/</REGEX><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>getHeader</OO>(<STRING>'Content-type'</STRING><CLOSER>)))</CLOSER> <KEYWORD>return</KEYWORD> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>(text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>text</OBJ><OPERATOR>.</OPERATOR><OO>stripScripts</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>evalScripts</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	success<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(text<OPERATOR>,</OPERATOR> xml<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onSuccess</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>processScripts</OO>(text<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> xml<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	onSuccess<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'complete'</STRING><OPERATOR>,</OPERATOR> arguments<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'success'</STRING><OPERATOR>,</OPERATOR> arguments<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>callChain</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	failure<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onFailure</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	onFailure<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'complete'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'failure'</STRING><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
	
	loadstart<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(event<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'loadstart'</STRING><OPERATOR>,</OPERATOR> [event<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO><CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
	
	progress<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(event<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'progress'</STRING><OPERATOR>,</OPERATOR> [event<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO><CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
	
	timeout<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'timeout'</STRING><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	setHeader<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(name<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>headers</OO>[name<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	getHeader<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(name<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>attempt</OO>(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO><OPERATOR>.</OPERATOR><OO>getResponseHeader</OO>(name<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER><OPERATOR>.</OPERATOR><OO>bind</OO>(<KEYWORD>this</KEYWORD><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	check<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>running</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>switch</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>link</OO><CLOSER>)</CLOSER>{
			<KEYWORD>case</KEYWORD> <STRING>'cancel'</STRING><OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>cancel</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'chain'</STRING><OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>chain</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>caller</OO><OPERATOR>.</OPERATOR><OO>pass</OO>(arguments<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>))</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
	
	send<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(options<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>check</OO>(options<CLOSER>))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>isSuccess</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>isSuccess</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isSuccess</OO><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>running</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> typeOf(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (type <OPERATOR>==</OPERATOR> <STRING>'string'</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>==</OPERATOR> <STRING>'element'</STRING><CLOSER>)</CLOSER> options <OPERATOR>=</OPERATOR> {data<OPERATOR>:</OPERATOR> options<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> old <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>;</OPERATOR>
		options <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>({data<OPERATOR>:</OPERATOR> <OBJ>old</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>,</OPERATOR> url<OPERATOR>:</OPERATOR> <OBJ>old</OBJ><OPERATOR>.</OPERATOR><OO>url</OO><OPERATOR>,</OPERATOR> method<OPERATOR>:</OPERATOR> <OBJ>old</OBJ><OPERATOR>.</OPERATOR><OO>method</OO><CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> data <OPERATOR>=</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>,</OPERATOR> url <OPERATOR>=</OPERATOR> <TYPE>String</TYPE>(<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>url</OO><CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> method <OPERATOR>=</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>method</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>switch</KEYWORD> (typeOf(data<CLOSER>))</CLOSER>{
			<KEYWORD>case</KEYWORD> <STRING>'element'</STRING><OPERATOR>:</OPERATOR> data <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(data<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toQueryString</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR> <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'object'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>case</KEYWORD> <STRING>'hash'</STRING><OPERATOR>:</OPERATOR> data <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>toQueryString</OO>(data<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>format</OO><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> format <OPERATOR>=</OPERATOR> <STRING>'format='</STRING> <OPERATOR>+</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>format</OO><OPERATOR>;</OPERATOR>
			data <OPERATOR>=</OPERATOR> (data<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> format <OPERATOR>+</OPERATOR> <STRING>'&amp;'</STRING> <OPERATOR>+</OPERATOR> data <OPERATOR>:</OPERATOR> format<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>emulation</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>[<STRING>'get'</STRING><OPERATOR>,</OPERATOR> <STRING>'post'</STRING><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>contains</OO>(method<CLOSER>))</CLOSER>{
			<KEYWORD>var</KEYWORD> _method <OPERATOR>=</OPERATOR> <STRING>'_method='</STRING> <OPERATOR>+</OPERATOR> method<OPERATOR>;</OPERATOR>
			data <OPERATOR>=</OPERATOR> (data<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> _method <OPERATOR>+</OPERATOR> <STRING>'&amp;'</STRING> <OPERATOR>+</OPERATOR> data <OPERATOR>:</OPERATOR> _method<OPERATOR>;</OPERATOR>
			method <OPERATOR>=</OPERATOR> <STRING>'post'</STRING><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>urlEncoded</OO> <OPERATOR>&amp;&amp;</OPERATOR> [<STRING>'post'</STRING><OPERATOR>,</OPERATOR> <STRING>'put'</STRING><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>contains</OO>(method<CLOSER>))</CLOSER>{
			<KEYWORD>var</KEYWORD> encoding <OPERATOR>=</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>encoding</OO><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'; charset='</STRING> <OPERATOR>+</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>encoding</OO> <OPERATOR>:</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>headers</OO>[<STRING>'Content-type'</STRING><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <STRING>'application/x-www-form-urlencoded'</STRING> <OPERATOR>+</OPERATOR> encoding<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>url<CLOSER>)</CLOSER> url <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>location</OO><OPERATOR>.</OPERATOR><OO>pathname</OO><OPERATOR>;</OPERATOR>
		
		<KEYWORD>var</KEYWORD> trimPosition <OPERATOR>=</OPERATOR> <OBJ>url</OBJ><OPERATOR>.</OPERATOR><OO>lastIndexOf</OO>(<STRING>'/'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (trimPosition <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> (trimPosition <OPERATOR>=</OPERATOR> <OBJ>url</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>'#'</STRING><CLOSER>))</CLOSER> <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>)</CLOSER> url <OPERATOR>=</OPERATOR> <OBJ>url</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> trimPosition<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>noCache</OO><CLOSER>)</CLOSER>
			url <OPERATOR>+=</OPERATOR> (<OBJ>url</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(<STRING>'?'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'&amp;'</STRING> <OPERATOR>:</OPERATOR> <STRING>'?'</STRING><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <OBJ>String</OBJ><OPERATOR>.</OPERATOR><OO>uniqueID</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (data <OPERATOR>&amp;&amp;</OPERATOR> method <OPERATOR>==</OPERATOR> <STRING>'get'</STRING><CLOSER>)</CLOSER>{
			url <OPERATOR>+=</OPERATOR> (<OBJ>url</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(<STRING>'?'</STRING><CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <STRING>'&amp;'</STRING> <OPERATOR>:</OPERATOR> <STRING>'?'</STRING><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> data<OPERATOR>;</OPERATOR>
			data <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<KEYWORD>var</KEYWORD> xhr <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (progressSupport<CLOSER>)</CLOSER>{
			<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>onloadstart</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>loadstart</OO><OPERATOR>.</OPERATOR><OO>bind</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>onprogress</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>progress</OO><OPERATOR>.</OPERATOR><OO>bind</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>open</OO>(<OBJ>method</OBJ><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> url<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>async</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>user</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>password</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>user</OO> <OPERATOR>&amp;&amp;</OPERATOR> <STRING>'withCredentials'</STRING> <KEYWORD>in</KEYWORD> xhr<CLOSER>)</CLOSER> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>withCredentials</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		
		<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>onreadystatechange</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onStateChange</OO><OPERATOR>.</OPERATOR><OO>bind</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>headers</OO><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> key<CLOSER>)</CLOSER>{
			<KEYWORD>try</KEYWORD> {
				<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>setRequestHeader</OO>(key<OPERATOR>,</OPERATOR> value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD> (e<CLOSER>)</CLOSER>{
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'exception'</STRING><OPERATOR>,</OPERATOR> [key<OPERATOR>,</OPERATOR> value<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>}</CLOSER>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'request'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>send</OO>(data<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>async</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onStateChange</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>timeout</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>timer</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>timeout</OO><OPERATOR>.</OPERATOR><OO>delay</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>timeout</OO><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	cancel<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>running</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>running</OO> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> xhr <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO><OPERATOR>;</OPERATOR>
		<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>abort</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<FUNCTION>clearTimeout</FUNCTION>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>timer</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>onreadystatechange</OO> <OPERATOR>=</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>onprogress</OO> <OPERATOR>=</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>onloadstart</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>Request</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'cancel'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> methods <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
[<STRING>'get'</STRING><OPERATOR>,</OPERATOR> <STRING>'post'</STRING><OPERATOR>,</OPERATOR> <STRING>'put'</STRING><OPERATOR>,</OPERATOR> <STRING>'delete'</STRING><OPERATOR>,</OPERATOR> <STRING>'GET'</STRING><OPERATOR>,</OPERATOR> <STRING>'POST'</STRING><OPERATOR>,</OPERATOR> <STRING>'PUT'</STRING><OPERATOR>,</OPERATOR> <STRING>'DELETE'</STRING><CLOSER>]</CLOSER><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(method<CLOSER>)</CLOSER>{
	methods[method<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(data<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>send</OO>({
			data<OPERATOR>:</OPERATOR> data<OPERATOR>,</OPERATOR>
			method<OPERATOR>:</OPERATOR> method
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Request</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>(methods<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>send</OO> <OPERATOR>=</OPERATOR> {

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(options<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> send <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'send'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>cancel</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>send</OBJ><OPERATOR>.</OPERATOR><OO>setOptions</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> send <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'send'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>send<CLOSER>)</CLOSER>{
			send <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Request({
				data<OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> link<OPERATOR>:</OPERATOR> <STRING>'cancel'</STRING><OPERATOR>,</OPERATOR> method<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'method'</STRING><CLOSER>)</CLOSER> <OPERATOR>||</OPERATOR> <STRING>'post'</STRING><OPERATOR>,</OPERATOR> url<OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'action'</STRING><CLOSER>)</CLOSER>
			<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>store</OO>(<STRING>'send'</STRING><OPERATOR>,</OPERATOR> send<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> send<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	send<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(url<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> sender <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'send'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>sender</OBJ><OPERATOR>.</OPERATOR><OO>send</OO>({data<OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> url<OPERATOR>:</OPERATOR> url <OPERATOR>||</OPERATOR> <OBJ>sender</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>url</OO><CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Request.HTML</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Extends the basic Request Class with additional methods for interacting with HTML responses.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Element, Request]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Request.HTML</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<OBJ>Request</OBJ><OPERATOR>.</OPERATOR><OO>HTML</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	Extends<OPERATOR>:</OPERATOR> Request<OPERATOR>,</OPERATOR>

	options<OPERATOR>:</OPERATOR> {
		update<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		append<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		evalScripts<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		filter<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		headers<OPERATOR>:</OPERATOR> {
			Accept<OPERATOR>:</OPERATOR> <STRING>'text/html, application/xml, text/xml, */*'</STRING>
		<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	success<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(text<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> options <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>,</OPERATOR> response <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>response</OO><OPERATOR>;</OPERATOR>

		<OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>html</OO> <OPERATOR>=</OPERATOR> <OBJ>text</OBJ><OPERATOR>.</OPERATOR><OO>stripScripts</OO>(<KEYWORD>function</KEYWORD>(script<CLOSER>)</CLOSER>{
			<OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>javascript</OO> <OPERATOR>=</OPERATOR> script<OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> match <OPERATOR>=</OPERATOR> <OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>html</OO><OPERATOR>.</OPERATOR><OO>match</OO>(<REGEX>/&lt;body<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^&gt;<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>&gt;<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\s</ESC><ESC>\S</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>&lt;<ESC>\/</ESC>body&gt;/<KEYWORD>i</KEYWORD></REGEX><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (match<CLOSER>)</CLOSER> <OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>html</OO> <OPERATOR>=</OPERATOR> match[<NUMERIC>1</NUMERIC><CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> temp <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Element(<STRING>'div'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>set</OO>(<STRING>'html'</STRING><OPERATOR>,</OPERATOR> <OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>html</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>tree</OO> <OPERATOR>=</OPERATOR> <OBJ>temp</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO><OPERATOR>;</OPERATOR>
		<OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>elements</OO> <OPERATOR>=</OPERATOR> <OBJ>temp</OBJ><OPERATOR>.</OPERATOR><OO>getElements</OO>(<STRING>'*'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO><CLOSER>)</CLOSER> <OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>tree</OO> <OPERATOR>=</OPERATOR> <OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>elements</OO><OPERATOR>.</OPERATOR><OO>filter</OO>(<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>update</OO><CLOSER>)</CLOSER> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>update</OO><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>empty</OO>(<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>set</OO>(<STRING>'html'</STRING><OPERATOR>,</OPERATOR> <OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>html</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>append</OO><CLOSER>)</CLOSER> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>append</OO><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>adopt</OO>(<OBJ>temp</OBJ><OPERATOR>.</OPERATOR><OO>getChildren</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>evalScripts</OO><CLOSER>)</CLOSER> <OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>(<OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>javascript</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onSuccess</OO>(<OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>tree</OO><OPERATOR>,</OPERATOR> <OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>elements</OO><OPERATOR>,</OPERATOR> <OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>html</OO><OPERATOR>,</OPERATOR> <OBJ>response</OBJ><OPERATOR>.</OPERATOR><OO>javascript</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Properties</OO><OPERATOR>.</OPERATOR><OO>load</OO> <OPERATOR>=</OPERATOR> {

	set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(options<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> load <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'load'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>cancel</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>load</OBJ><OPERATOR>.</OPERATOR><OO>setOptions</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> load <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>retrieve</OO>(<STRING>'load'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>load<CLOSER>)</CLOSER>{
			load <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>Request</OBJ><OPERATOR>.</OPERATOR><OO>HTML</OO>({data<OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> link<OPERATOR>:</OPERATOR> <STRING>'cancel'</STRING><OPERATOR>,</OPERATOR> update<OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> method<OPERATOR>:</OPERATOR> <STRING>'get'</STRING><CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>store</OO>(<STRING>'load'</STRING><OPERATOR>,</OPERATOR> load<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> load<OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>implement</OO>({

	load<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(<STRING>'load'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>send</OO>(<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>link</OO>(arguments<OPERATOR>,</OPERATOR> {data<OPERATOR>:</OPERATOR> <OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>isObject</OO><OPERATOR>,</OPERATOR> url<OPERATOR>:</OPERATOR> <OBJ>Type</OBJ><OPERATOR>.</OPERATOR><OO>isString</OO><CLOSER>}))</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: JSON</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: JSON encoder and decoder.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>See Also: &lt;http://www.json.org/&gt;</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Array, String, Number, Function]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: JSON</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>JSON</OO><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>JSON</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;1.2compat&gt;</COMMENT>

<CONSTANT>JSON</CONSTANT> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Hash({
	stringify<OPERATOR>:</OPERATOR> <OBJ>JSON</OBJ><OPERATOR>.</OPERATOR><OO>stringify</OO><OPERATOR>,</OPERATOR>
	parse<OPERATOR>:</OPERATOR> <OBJ>JSON</OBJ><OPERATOR>.</OPERATOR><OO>parse</OO>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>//&lt;/1.2compat&gt;</COMMENT>

<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(<CONSTANT>JSON</CONSTANT><OPERATOR>,</OPERATOR> {

	$specialChars<OPERATOR>:</OPERATOR> {<STRING>'<ESC>\b</ESC>'</STRING><OPERATOR>:</OPERATOR> <STRING>'<ESC>\\</ESC>b'</STRING><OPERATOR>,</OPERATOR> <STRING>'<ESC>\t</ESC>'</STRING><OPERATOR>:</OPERATOR> <STRING>'<ESC>\\</ESC>t'</STRING><OPERATOR>,</OPERATOR> <STRING>'<ESC>\n</ESC>'</STRING><OPERATOR>:</OPERATOR> <STRING>'<ESC>\\</ESC>n'</STRING><OPERATOR>,</OPERATOR> <STRING>'<ESC>\f</ESC>'</STRING><OPERATOR>:</OPERATOR> <STRING>'<ESC>\\</ESC>f'</STRING><OPERATOR>,</OPERATOR> <STRING>'<ESC>\r</ESC>'</STRING><OPERATOR>:</OPERATOR> <STRING>'<ESC>\\</ESC>r'</STRING><OPERATOR>,</OPERATOR> <STRING>'"'</STRING> <OPERATOR>:</OPERATOR> <STRING>'<ESC>\\</ESC>"'</STRING><OPERATOR>,</OPERATOR> <STRING>'<ESC>\\</ESC>'</STRING><OPERATOR>:</OPERATOR> <STRING>'<ESC>\\</ESC><ESC>\\</ESC>'</STRING><CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	$replaceChars<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(chr<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>JSON</OBJ><OPERATOR>.</OPERATOR><OO>$specialChars</OO>[chr<CLOSER>]</CLOSER> <OPERATOR>||</OPERATOR> <STRING>'<ESC>\\</ESC>u00'</STRING> <OPERATOR>+</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>floor</OO>(<OBJ>chr</OBJ><OPERATOR>.</OPERATOR><OO>charCodeAt</OO>(<CLOSER>)</CLOSER> <OPERATOR>/</OPERATOR> <NUMERIC>16</NUMERIC><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toString</OO>(<NUMERIC>16</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> (<OBJ>chr</OBJ><OPERATOR>.</OPERATOR><OO>charCodeAt</OO>(<CLOSER>)</CLOSER> <OPERATOR>%</OPERATOR> <NUMERIC>16</NUMERIC><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>toString</OO>(<NUMERIC>16</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	encode<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(obj<CLOSER>)</CLOSER>{
		<KEYWORD>switch</KEYWORD> (typeOf(obj<CLOSER>))</CLOSER>{
			<KEYWORD>case</KEYWORD> <STRING>'string'</STRING><OPERATOR>:</OPERATOR>
				<KEYWORD>return</KEYWORD> <STRING>'"'</STRING> <OPERATOR>+</OPERATOR> <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\x00</ESC>-<ESC>\x1f</ESC><ESC>\\</ESC>"<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <OBJ>JSON</OBJ><OPERATOR>.</OPERATOR><OO>$replaceChars</OO><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>'"'</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'array'</STRING><OPERATOR>:</OPERATOR>
				<KEYWORD>return</KEYWORD> <STRING>'['</STRING> <OPERATOR>+</OPERATOR> <TYPE>String</TYPE>(<OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<OBJ>JSON</OBJ><OPERATOR>.</OPERATOR><OO>encode</OO><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>clean</OO>(<CLOSER>))</CLOSER> <OPERATOR>+</OPERATOR> <STRING>']'</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'object'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>case</KEYWORD> <STRING>'hash'</STRING><OPERATOR>:</OPERATOR>
				<KEYWORD>var</KEYWORD> string <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>;</OPERATOR>
				<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(obj<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(value<OPERATOR>,</OPERATOR> key<CLOSER>)</CLOSER>{
					<KEYWORD>var</KEYWORD> json <OPERATOR>=</OPERATOR> <OBJ>JSON</OBJ><OPERATOR>.</OPERATOR><OO>encode</OO>(value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD> (json<CLOSER>)</CLOSER> <OBJ>string</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(<OBJ>JSON</OBJ><OPERATOR>.</OPERATOR><OO>encode</OO>(key<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>':'</STRING> <OPERATOR>+</OPERATOR> json<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD> <STRING>'{'</STRING> <OPERATOR>+</OPERATOR> string <OPERATOR>+</OPERATOR> <STRING>'}'</STRING><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'number'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>case</KEYWORD> <STRING>'boolean'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <TYPE>String</TYPE>(obj<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>case</KEYWORD> <STRING>'null'</STRING><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <STRING>'null'</STRING><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	decode<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(string<OPERATOR>,</OPERATOR> secure<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (typeOf(string<CLOSER>)</CLOSER> <OPERATOR>!=</OPERATOR> <STRING>'string'</STRING> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>string</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (secure <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>(<REGEX>/^<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>,:{}<ESC>\[</ESC><ESC>\]</ESC>0-9<REGEX_OPERATOR>.</REGEX_OPERATOR><ESC>\-</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR>Eaeflnr-u <ESC>\n</ESC><ESC>\r</ESC><ESC>\t</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>$/</REGEX><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>string</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/<ESC>\\</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR>/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>'@'</STRING><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX>/"<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^"<ESC>\\</ESC><ESC>\n</ESC><ESC>\r</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>"/<KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>''</STRING><CLOSER>)))</CLOSER> <KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <FUNCTION>eval</FUNCTION>(<STRING>'('</STRING> <OPERATOR>+</OPERATOR> string <OPERATOR>+</OPERATOR> <STRING>')'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Request.JSON</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Extends the basic Request Class with additional methods for sending and receiving JSON data.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Request, JSON]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Request.JSON</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<OBJ>Request</OBJ><OPERATOR>.</OPERATOR><OO>JSON</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	Extends<OPERATOR>:</OPERATOR> Request<OPERATOR>,</OPERATOR>

	options<OPERATOR>:</OPERATOR> {
		secure<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	initialize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(options<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>headers</OO><OPERATOR>,</OPERATOR> {
			<STRING>'Accept'</STRING><OPERATOR>:</OPERATOR> <STRING>'application/json'</STRING><OPERATOR>,</OPERATOR>
			<STRING>'X-Request'</STRING><OPERATOR>:</OPERATOR> <STRING>'JSON'</STRING>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	success<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(text<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> secure <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>secure</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> json <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>response</OO><OPERATOR>.</OPERATOR><OO>json</OO> <OPERATOR>=</OPERATOR> <OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>attempt</OO>(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
			<KEYWORD>return</KEYWORD> <OBJ>JSON</OBJ><OPERATOR>.</OPERATOR><OO>decode</OO>(text<OPERATOR>,</OPERATOR> secure<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> (json <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><CLOSER>)</CLOSER> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onFailure</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>else</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onSuccess</OO>(json<OPERATOR>,</OPERATOR> text<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Cookie</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Class for creating, reading, and deleting browser Cookies.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>credits:</COMMENT>
<COMMENT>  - Based on the functions by Peter-Paul Koch (http://quirksmode.org).</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: Options</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Cookie</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

<KEYWORD>var</KEYWORD> Cookie <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	Implements<OPERATOR>:</OPERATOR> Options<OPERATOR>,</OPERATOR>

	options<OPERATOR>:</OPERATOR> {
		path<OPERATOR>:</OPERATOR> <STRING>'/'</STRING><OPERATOR>,</OPERATOR>
		domain<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		duration<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		secure<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		<TYPE>document</TYPE><OPERATOR>:</OPERATOR> <TYPE>document</TYPE><OPERATOR>,</OPERATOR>
		encode<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	initialize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(key<OPERATOR>,</OPERATOR> options<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>key</OO> <OPERATOR>=</OPERATOR> key<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setOptions</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	write<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(value<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>encode</OO><CLOSER>)</CLOSER> value <OPERATOR>=</OPERATOR> <FUNCTION>encodeURIComponent</FUNCTION>(value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>domain</OO><CLOSER>)</CLOSER> value <OPERATOR>+=</OPERATOR> <STRING>'; domain='</STRING> <OPERATOR>+</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>domain</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>path</OO><CLOSER>)</CLOSER> value <OPERATOR>+=</OPERATOR> <STRING>'; path='</STRING> <OPERATOR>+</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>path</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>duration</OO><CLOSER>)</CLOSER>{
			<KEYWORD>var</KEYWORD> date <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Date</TYPE>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<OBJ>date</OBJ><OPERATOR>.</OPERATOR><OO>setTime</OO>(<OBJ>date</OBJ><OPERATOR>.</OPERATOR><OO>getTime</OO>(<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>duration</OO> <OPERATOR>*</OPERATOR> <NUMERIC>24</NUMERIC> <OPERATOR>*</OPERATOR> <NUMERIC>60</NUMERIC> <OPERATOR>*</OPERATOR> <NUMERIC>60</NUMERIC> <OPERATOR>*</OPERATOR> <NUMERIC>1000</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			value <OPERATOR>+=</OPERATOR> <STRING>'; expires='</STRING> <OPERATOR>+</OPERATOR> <OBJ>date</OBJ><OPERATOR>.</OPERATOR><OO>toGMTString</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<KEYWORD>if</KEYWORD> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>secure</OO><CLOSER>)</CLOSER> value <OPERATOR>+=</OPERATOR> <STRING>'; secure'</STRING><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>.</OPERATOR><OO>cookie</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>key</OO> <OPERATOR>+</OPERATOR> <STRING>'='</STRING> <OPERATOR>+</OPERATOR> value<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	read<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>var</KEYWORD> value <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>.</OPERATOR><OO>cookie</OO><OPERATOR>.</OPERATOR><OO>match</OO>(<STRING>'(?:^|;)<ESC>\\</ESC>s*'</STRING> <OPERATOR>+</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>key</OO><OPERATOR>.</OPERATOR><OO>escapeRegExp</OO>(<CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>'=([^;]*)'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> (value<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <FUNCTION>decodeURIComponent</FUNCTION>(value[<NUMERIC>1</NUMERIC><CLOSER>])</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	dispose<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>new</KEYWORD> Cookie(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>key</OO><OPERATOR>,</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO>({<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>,</OPERATOR> {duration<OPERATOR>:</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><CLOSER>}))</CLOSER><OPERATOR>.</OPERATOR><OO>write</OO>(<STRING>''</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Cookie</OBJ><OPERATOR>.</OPERATOR><OO>write</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(key<OPERATOR>,</OPERATOR> value<OPERATOR>,</OPERATOR> options<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Cookie(key<OPERATOR>,</OPERATOR> options<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>write</OO>(value<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Cookie</OBJ><OPERATOR>.</OPERATOR><OO>read</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(key<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Cookie(key<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>read</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Cookie</OBJ><OPERATOR>.</OPERATOR><OO>dispose</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(key<OPERATOR>,</OPERATOR> options<CLOSER>)</CLOSER>{
	<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> Cookie(key<OPERATOR>,</OPERATOR> options<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>dispose</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: DOMReady</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Contains the custom event domready.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Browser, Element, Element.Event]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: [DOMReady, DomReady]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<TYPE>window</TYPE><OPERATOR>,</OPERATOR> <TYPE>document</TYPE><CLOSER>)</CLOSER>{

<KEYWORD>var</KEYWORD> ready<OPERATOR>,</OPERATOR>
	loaded<OPERATOR>,</OPERATOR>
	checks <OPERATOR>=</OPERATOR> [<CLOSER>]</CLOSER><OPERATOR>,</OPERATOR>
	shouldPoll<OPERATOR>,</OPERATOR>
	timer<OPERATOR>,</OPERATOR>
	isFramed <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

<COMMENT>// Thanks to Rich Dougherty &lt;http://www.richdougherty.com/&gt;</COMMENT>
<KEYWORD>try</KEYWORD> {
	isFramed <OPERATOR>=</OPERATOR> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>frameElement</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD>(e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER>

<KEYWORD>var</KEYWORD> domready <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<FUNCTION>clearTimeout</FUNCTION>(timer<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (ready<CLOSER>)</CLOSER> <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
	<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>loaded</OO> <OPERATOR>=</OPERATOR> ready <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>removeListener</OO>(<STRING>'DOMContentLoaded'</STRING><OPERATOR>,</OPERATOR> domready<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>removeListener</OO>(<STRING>'readystatechange'</STRING><OPERATOR>,</OPERATOR> check<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	
	<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'domready'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>'domready'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> check <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>checks</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>--;</OPERATOR><CLOSER>)</CLOSER> <KEYWORD>if</KEYWORD> (checks[i<CLOSER>]</CLOSER>(<CLOSER>))</CLOSER>{
		domready(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

	<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> poll <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<FUNCTION>clearTimeout</FUNCTION>(timer<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>check(<CLOSER>))</CLOSER> timer <OPERATOR>=</OPERATOR> <FUNCTION>setTimeout</FUNCTION>(poll<OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>addListener</OO>(<STRING>'DOMContentLoaded'</STRING><OPERATOR>,</OPERATOR> domready<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// doScroll technique by Diego Perini http://javascript.nwbox.com/IEContentLoaded/</COMMENT>
<KEYWORD>var</KEYWORD> testElement <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>'div'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<KEYWORD>if</KEYWORD> (<OBJ>testElement</OBJ><OPERATOR>.</OPERATOR><OO>doScroll</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>isFramed<CLOSER>)</CLOSER>{
	<OBJ>checks</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>try</KEYWORD> {
			<OBJ>testElement</OBJ><OPERATOR>.</OPERATOR><OO>doScroll</OO>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>catch</KEYWORD> (e<CLOSER>)</CLOSER>{<CLOSER>}</CLOSER>

		<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>
	shouldPoll <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER>

<KEYWORD>if</KEYWORD> (<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>readyState</OO><CLOSER>)</CLOSER> <OBJ>checks</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> state <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>readyState</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> (state <OPERATOR>==</OPERATOR> <STRING>'loaded'</STRING> <OPERATOR>||</OPERATOR> state <OPERATOR>==</OPERATOR> <STRING>'complete'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (<STRING>'onreadystatechange'</STRING> <KEYWORD>in</KEYWORD> <TYPE>document</TYPE><CLOSER>)</CLOSER> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>addListener</OO>(<STRING>'readystatechange'</STRING><OPERATOR>,</OPERATOR> check<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<KEYWORD>else</KEYWORD> shouldPoll <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> (shouldPoll<CLOSER>)</CLOSER> poll(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Events</OO><OPERATOR>.</OPERATOR><OO>domready</OO> <OPERATOR>=</OPERATOR> {
	onAdd<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (ready<CLOSER>)</CLOSER> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// Make sure that domready fires before load</COMMENT>
<OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Events</OO><OPERATOR>.</OPERATOR><OO>load</OO> <OPERATOR>=</OPERATOR> {
	base<OPERATOR>:</OPERATOR> <STRING>'load'</STRING><OPERATOR>,</OPERATOR>
	onAdd<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(fn<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (loaded <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>this</KEYWORD> <OPERATOR>==</OPERATOR> <TYPE>window</TYPE><CLOSER>)</CLOSER> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
	condition<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>if</KEYWORD> (<KEYWORD>this</KEYWORD> <OPERATOR>==</OPERATOR> <TYPE>window</TYPE><CLOSER>)</CLOSER>{
			domready(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
			<KEYWORD>delete</KEYWORD> <OBJ>Element</OBJ><OPERATOR>.</OPERATOR><OO>Events</OO><OPERATOR>.</OPERATOR><OO>load</OO><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<COMMENT>// This is based on the custom load event</COMMENT>
<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>addEvent</OO>(<STRING>'load'</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
	loaded <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<TYPE>window</TYPE><OPERATOR>,</OPERATOR> <TYPE>document</TYPE><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>


<COMMENT>/*</COMMENT>
<COMMENT>---</COMMENT>
<COMMENT></COMMENT>
<COMMENT>name: Swiff</COMMENT>
<COMMENT></COMMENT>
<COMMENT>description: Wrapper for embedding SWF movies. Supports External Interface Communication.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>license: MIT-style license.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>credits:</COMMENT>
<COMMENT>  - Flash detection &amp; Internet Explorer + Flash Player 9 fix inspired by SWFObject.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>requires: [Options, Object]</COMMENT>
<COMMENT></COMMENT>
<COMMENT>provides: Swiff</COMMENT>
<COMMENT></COMMENT>
<COMMENT>...</COMMENT>
<COMMENT>*/</COMMENT>

(<KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{

<KEYWORD>var</KEYWORD> id <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> Swiff <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>Swiff</OO> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Class({

	Implements<OPERATOR>:</OPERATOR> Options<OPERATOR>,</OPERATOR>

	options<OPERATOR>:</OPERATOR> {
		id<OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR>
		height<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
		width<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
		container<OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR>
		properties<OPERATOR>:</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
		params<OPERATOR>:</OPERATOR> {
			quality<OPERATOR>:</OPERATOR> <STRING>'high'</STRING><OPERATOR>,</OPERATOR>
			allowScriptAccess<OPERATOR>:</OPERATOR> <STRING>'always'</STRING><OPERATOR>,</OPERATOR>
			wMode<OPERATOR>:</OPERATOR> <STRING>'window'</STRING><OPERATOR>,</OPERATOR>
			swLiveConnect<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD>
		<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
		callBacks<OPERATOR>:</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>
		vars<OPERATOR>:</OPERATOR> {<CLOSER>}</CLOSER>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	toElement<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>object</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	initialize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(path<OPERATOR>,</OPERATOR> options<CLOSER>)</CLOSER>{
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>instance</OO> <OPERATOR>=</OPERATOR> <STRING>'Swiff_'</STRING> <OPERATOR>+</OPERATOR> id<OPERATOR>++;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>setOptions</OO>(options<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		options <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> id <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>id</OO> <OPERATOR>=</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>id</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>instance</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> container <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>container</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<OBJ>Swiff</OBJ><OPERATOR>.</OPERATOR><OO>CallBacks</OO>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>instance</OO><CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> params <OPERATOR>=</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>params</OO><OPERATOR>,</OPERATOR> vars <OPERATOR>=</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>vars</OO><OPERATOR>,</OPERATOR> callBacks <OPERATOR>=</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>callBacks</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> properties <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>({height<OPERATOR>:</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>,</OPERATOR> width<OPERATOR>:</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><CLOSER>}</CLOSER><OPERATOR>,</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>properties</OO><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> callBack <KEYWORD>in</KEYWORD> callBacks<CLOSER>)</CLOSER>{
			<OBJ>Swiff</OBJ><OPERATOR>.</OPERATOR><OO>CallBacks</OO>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>instance</OO><CLOSER>]</CLOSER>[callBack<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> (<KEYWORD>function</KEYWORD>(option<CLOSER>)</CLOSER>{
				<KEYWORD>return</KEYWORD> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
					<KEYWORD>return</KEYWORD> <OBJ>option</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>(<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>object</OO><OPERATOR>,</OPERATOR> arguments<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
				<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>
			<CLOSER>})</CLOSER>(callBacks[callBack<CLOSER>])</CLOSER><OPERATOR>;</OPERATOR>
			vars[callBack<CLOSER>]</CLOSER> <OPERATOR>=</OPERATOR> <STRING>'Swiff.CallBacks.'</STRING> <OPERATOR>+</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>instance</OO> <OPERATOR>+</OPERATOR> <STRING>'.'</STRING> <OPERATOR>+</OPERATOR> callBack<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>

		<OBJ>params</OBJ><OPERATOR>.</OPERATOR><OO>flashVars</OO> <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>toQueryString</OO>(vars<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> (<OBJ>Browser</OBJ><OPERATOR>.</OPERATOR><OO>ie</OO><CLOSER>)</CLOSER>{
			<OBJ>properties</OBJ><OPERATOR>.</OPERATOR><OO>classid</OO> <OPERATOR>=</OPERATOR> <STRING>'clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'</STRING><OPERATOR>;</OPERATOR>
			<OBJ>params</OBJ><OPERATOR>.</OPERATOR><OO>movie</OO> <OPERATOR>=</OPERATOR> path<OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER> <KEYWORD>else</KEYWORD> {
			<OBJ>properties</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <STRING>'application/x-shockwave-flash'</STRING><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		<OBJ>properties</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> path<OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> build <OPERATOR>=</OPERATOR> <STRING>'&lt;object id="'</STRING> <OPERATOR>+</OPERATOR> id <OPERATOR>+</OPERATOR> <STRING>'"'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> property <KEYWORD>in</KEYWORD> properties<CLOSER>)</CLOSER> build <OPERATOR>+=</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> property <OPERATOR>+</OPERATOR> <STRING>'="'</STRING> <OPERATOR>+</OPERATOR> properties[property<CLOSER>]</CLOSER> <OPERATOR>+</OPERATOR> <STRING>'"'</STRING><OPERATOR>;</OPERATOR>
		build <OPERATOR>+=</OPERATOR> <STRING>'&gt;'</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> param <KEYWORD>in</KEYWORD> params<CLOSER>)</CLOSER>{
			<KEYWORD>if</KEYWORD> (params[param<CLOSER>])</CLOSER> build <OPERATOR>+=</OPERATOR> <STRING>'&lt;param name="'</STRING> <OPERATOR>+</OPERATOR> param <OPERATOR>+</OPERATOR> <STRING>'" value="'</STRING> <OPERATOR>+</OPERATOR> params[param<CLOSER>]</CLOSER> <OPERATOR>+</OPERATOR> <STRING>'" /&gt;'</STRING><OPERATOR>;</OPERATOR>
		<CLOSER>}</CLOSER>
		build <OPERATOR>+=</OPERATOR> <STRING>'&lt;/object&gt;'</STRING><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>object</OO> <OPERATOR>=</OPERATOR> ((container<CLOSER>)</CLOSER> <OPERATOR>?</OPERATOR> <OBJ>container</OBJ><OPERATOR>.</OPERATOR><OO>empty</OO>(<CLOSER>)</CLOSER> <OPERATOR>:</OPERATOR> <KEYWORD>new</KEYWORD> Element(<STRING>'div'</STRING><CLOSER>))</CLOSER><OPERATOR>.</OPERATOR><OO>set</OO>(<STRING>'html'</STRING><OPERATOR>,</OPERATOR> build<CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	replaces<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(element<CLOSER>)</CLOSER>{
		element <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(element<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<OBJ>element</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>replaceChild</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>toElement</OO>(<CLOSER>)</CLOSER><OPERATOR>,</OPERATOR> element<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	inject<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(element<CLOSER>)</CLOSER>{
		<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>id</OO>(element<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><CLOSER>)</CLOSER><OPERATOR>.</OPERATOR><OO>appendChild</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>toElement</OO>(<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER><OPERATOR>,</OPERATOR>

	remote<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(<CLOSER>)</CLOSER>{
		<KEYWORD>return</KEYWORD> <OBJ>Swiff</OBJ><OPERATOR>.</OPERATOR><OO>remote</OO><OPERATOR>.</OPERATOR><OO>apply</OO>(Swiff<OPERATOR>,</OPERATOR> [<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>toElement</OO>(<CLOSER>)]</CLOSER><OPERATOR>.</OPERATOR><OO>extend</OO>(arguments<CLOSER>))</CLOSER><OPERATOR>;</OPERATOR>
	<CLOSER>}</CLOSER>

<CLOSER>})</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Swiff</OBJ><OPERATOR>.</OPERATOR><OO>CallBacks</OO> <OPERATOR>=</OPERATOR> {<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<OBJ>Swiff</OBJ><OPERATOR>.</OPERATOR><OO>remote</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(obj<OPERATOR>,</OPERATOR> fn<CLOSER>)</CLOSER>{
	<KEYWORD>var</KEYWORD> rs <OPERATOR>=</OPERATOR> <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>CallFunction</OO>(<STRING>'&lt;invoke name="'</STRING> <OPERATOR>+</OPERATOR> fn <OPERATOR>+</OPERATOR> <STRING>'" returntype="javascript"&gt;'</STRING> <OPERATOR>+</OPERATOR> __flash__argumentsToXML(arguments<OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><CLOSER>)</CLOSER> <OPERATOR>+</OPERATOR> <STRING>'&lt;/invoke&gt;'</STRING><CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <FUNCTION>eval</FUNCTION>(rs<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>
<CLOSER>}</CLOSER><OPERATOR>;</OPERATOR>

<CLOSER>})</CLOSER>(<CLOSER>)</CLOSER><OPERATOR>;</OPERATOR>

